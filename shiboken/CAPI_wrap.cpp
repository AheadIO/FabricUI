/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyInstanceMethod_New(func);
#else
  return NULL;
#endif
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, v);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
#else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
#endif
#if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
#else
    PyString_ConcatAndDel(&repr,nrep);
#endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  if( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) )
    res = Py_True;
  else
    res = Py_False;
  Py_INCREF(res);
  return res;  
}


SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	/* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
	PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else    
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
#endif
	(char *)"SwigPyObject",		    /* tp_name */
	sizeof(SwigPyObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)SwigPyObject_dealloc,   /* tp_dealloc */
	(printfunc)SwigPyObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)SwigPyObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
	(cmpfunc)SwigPyObject_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyObject_repr,	    /* tp_repr */    
	&SwigPyObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	(richcmpfunc)SwigPyObject_richcompare,           /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
	0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpyobject_type = tmp;
    /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpyobject_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
    /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
    PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
	PyObject_HEAD_INIT(NULL)
    0,				    /* ob_size */	
#endif
	(char *)"SwigPyPacked",		    /* tp_name */	
	sizeof(SwigPyPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)SwigPyPacked_dealloc,   /* tp_dealloc */	
	(printfunc)SwigPyPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
#if PY_VERSION_HEX>=0x03000000
    0, /* tp_reserved in 3.0.1 */
#else
    (cmpfunc)SwigPyPacked_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyPacked_repr,	    /* tp_repr */
	0,	                            /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyPacked_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpypacked_type = tmp;
    /* for Python 3 the ob_type already assigned in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpypacked_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (SwigPyObject_Check(pyobj)) {
    return (SwigPyObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !SwigPyObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 SwigPyObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (SwigPyObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (own)
      *own = 0;
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (SwigPyObject *)sobj->next;
	  } else {
	    if (ptr) {
              int newmemory = 0;
              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
              if (newmemory == SWIG_CAST_NEW_MEMORY) {
                assert(own);
                if (own)
                  *own = *own | SWIG_CAST_NEW_MEMORY;
              }
            }
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = SwigPyObject_New(ptr, type, own);
    SwigPyClientData *clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FEC_ClientCreateOptions swig_types[0]
#define SWIGTYPE_p_FEC_DFGCacheRule swig_types[1]
#define SWIGTYPE_p_FEC_DFGExecType swig_types[2]
#define SWIGTYPE_p_FEC_DFGNodeType swig_types[3]
#define SWIGTYPE_p_FEC_DFGPortType swig_types[4]
#define SWIGTYPE_p_FEC_KLSourceFile swig_types[5]
#define SWIGTYPE_p_FEC_KLTokenType swig_types[6]
#define SWIGTYPE_p_FEC_RTValSimpleData swig_types[7]
#define SWIGTYPE_p_FEC_RTValSimpleData_value swig_types[8]
#define SWIGTYPE_p_FEC_RTValSimpleData_value_string swig_types[9]
#define SWIGTYPE_p_FEC_RTValSimpleType swig_types[10]
#define SWIGTYPE_p_FEC_Variant swig_types[11]
#define SWIGTYPE_p_FEC_VariantDictIter swig_types[12]
#define SWIGTYPE_p_FabricCore__Client swig_types[13]
#define SWIGTYPE_p_FabricCore__Context swig_types[14]
#define SWIGTYPE_p_FabricCore__DFGBinding swig_types[15]
#define SWIGTYPE_p_FabricCore__DFGExec swig_types[16]
#define SWIGTYPE_p_FabricCore__DFGHost swig_types[17]
#define SWIGTYPE_p_FabricCore__DFGView swig_types[18]
#define SWIGTYPE_p_FabricCore__DGBinding swig_types[19]
#define SWIGTYPE_p_FabricCore__DGBindingList swig_types[20]
#define SWIGTYPE_p_FabricCore__DGCompiledObject swig_types[21]
#define SWIGTYPE_p_FabricCore__DGContainer swig_types[22]
#define SWIGTYPE_p_FabricCore__DGEvent swig_types[23]
#define SWIGTYPE_p_FabricCore__DGEventHandler swig_types[24]
#define SWIGTYPE_p_FabricCore__DGNamedObject swig_types[25]
#define SWIGTYPE_p_FabricCore__DGNode swig_types[26]
#define SWIGTYPE_p_FabricCore__DGOperator swig_types[27]
#define SWIGTYPE_p_FabricCore__Exception swig_types[28]
#define SWIGTYPE_p_FabricCore__KLTokenStream swig_types[29]
#define SWIGTYPE_p_FabricCore__RTVal swig_types[30]
#define SWIGTYPE_p_FabricCore__RTValFromJSONDecoder swig_types[31]
#define SWIGTYPE_p_FabricCore__RTValToJSONEncoder swig_types[32]
#define SWIGTYPE_p_FabricCore__Ref swig_types[33]
#define SWIGTYPE_p_FabricCore__String swig_types[34]
#define SWIGTYPE_p_FabricCore__Variant swig_types[35]
#define SWIGTYPE_p_PythonRTValFromJSONDecoder swig_types[36]
#define SWIGTYPE_p_PythonRTValToJSONEncoder swig_types[37]
#define SWIGTYPE_p_ReportCallback swig_types[38]
#define SWIGTYPE_p_SimpleData swig_types[39]
#define SWIGTYPE_p_SlowOperationCallback swig_types[40]
#define SWIGTYPE_p_StatusCallback swig_types[41]
#define SWIGTYPE_p___int64 swig_types[42]
#define SWIGTYPE_p_char swig_types[43]
#define SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_int__void swig_types[44]
#define SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_int_p_q_const__char_unsigned_int__void swig_types[45]
#define SWIGTYPE_p_f_p_void_p_void_p_void_unsigned_char_p_f_p_void_p_q_const__char_unsigned_int__void_p_void_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char swig_types[46]
#define SWIGTYPE_p_f_p_void_p_void_p_void_unsigned_char_p_q_const__char_unsigned_int_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char swig_types[47]
#define SWIGTYPE_p_f_p_void_unsigned_char_unsigned_char_p_q_const__char_unsigned_int__void swig_types[48]
#define SWIGTYPE_p_float swig_types[49]
#define SWIGTYPE_p_int swig_types[50]
#define SWIGTYPE_p_long swig_types[51]
#define SWIGTYPE_p_long_long swig_types[52]
#define SWIGTYPE_p_p_char swig_types[53]
#define SWIGTYPE_p_p_f_p_void_p_q_const__char_unsigned_int__void swig_types[54]
#define SWIGTYPE_p_p_unsigned_long swig_types[55]
#define SWIGTYPE_p_p_void swig_types[56]
#define SWIGTYPE_p_short swig_types[57]
#define SWIGTYPE_p_signed___int64 swig_types[58]
#define SWIGTYPE_p_signed_char swig_types[59]
#define SWIGTYPE_p_unsigned___int64 swig_types[60]
#define SWIGTYPE_p_unsigned_char swig_types[61]
#define SWIGTYPE_p_unsigned_int swig_types[62]
#define SWIGTYPE_p_unsigned_long swig_types[63]
#define SWIGTYPE_p_unsigned_long_long swig_types[64]
#define SWIGTYPE_p_unsigned_short swig_types[65]
#define SWIGTYPE_p_void swig_types[66]
swig_type_info *swig_types[68];
static swig_module_info swig_module = {swig_types, 67, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _CAPI.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__CAPI

#else
#  define SWIG_init    init_CAPI

#endif
#define SWIG_name    "_CAPI"

#define SWIGVERSION 0x010340 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <stdint.h>		// Use the C99 official header


#include <string>


  #ifndef FEC_SHARED
    #define FEC_SHARED
  #endif
  #ifndef FEC_PROVIDE_STL_BINDINGS
    #define FEC_PROVIDE_STL_BINDINGS
  #endif
  #define SWIG_FILE_WITH_INIT
  #include <Core/Clients/CAPI/FabricCore.h>
  #include <Core/Clients/PythonCAPI/PythonCAPI.h>

  class AutoCStr
  {
  public:

    AutoCStr( char *cStr )
      : m_cStr( cStr ) {}
    ~AutoCStr()
      { delete [] m_cStr; }

    bool isValid() const
      { return !!m_cStr; }
    operator bool() const
      { return isValid(); }
    bool operator!() const
      { return !isValid(); }

    char const *get() const
      { return m_cStr; }
    operator const char *() const
      { return get(); }

  private:

    char *m_cStr;
  };


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (PyObject * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_signed_SS_char (PyObject * obj, signed char *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SCHAR_MIN || v > SCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< signed char >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_signed_SS_char  (signed char value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





typedef union {
    int boolean;
    uint8_t uint8;
    uint16_t uint16;
    uint32_t uint32;
    uint64_t uint64;
    int8_t sint8;
    int16_t sint16;
    int32_t sint32;
    int64_t sint64;
    float float32;
    double float64;
    struct     {
      char const *cStringData;
      uint32_t length;
    } string;
  } FEC_RTValSimpleData_value;



typedef struct {
      char const *cStringData;
      uint32_t length;
    } FEC_RTValSimpleData_value_string;



SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}

SWIGINTERN PyObject *FabricCore_DFGExec_exportNodesJSON__SWIG_1(FabricCore::DFGExec *self,PyObject *nodeNamesPyObj){
    if ( !PyList_Check( nodeNamesPyObj ) )
    {
      PyErr_SetString(PyExc_ValueError, "nodeNames: expecting a list");
      return NULL;
    }
    uint32_t nodeCount = PyList_Size( nodeNamesPyObj );
    char const **nodeCStrs =
      static_cast<char const **>( alloca( nodeCount*sizeof(char const *) ) );
    for ( uint32_t i = 0; i < nodeCount; i++ ) {
      PyObject *nodeNamePyObj = PyList_GetItem( nodeNamesPyObj, i );
      if ( !PyString_Check(nodeNamePyObj)
        && !PyUnicode_Check(nodeNamePyObj) )
      {
        PyErr_SetString( PyExc_ValueError, "nodeNames: list items must be strings" );
        return NULL;
      }
      nodeCStrs[i] = PyString_AsString(nodeNamePyObj);
    }

    PyObject *pyResult = 0;
    try
    {
      FabricCore::String result =
        self->exportNodesJSON(
          nodeCount,
          nodeCStrs
          );
      char const *resultCStr;
      uint32_t resultSize;
      result.getCStrAndSize( resultCStr, resultSize );
      pyResult = PyString_FromStringAndSize( resultCStr, resultSize );
    }
    catch ( FabricCore::Exception e )
    {
      PyErr_Format( PyExc_Exception, "Fabric: %s", e.getDesc_cstr() );
      return NULL;
    }
    return pyResult;
  }
SWIGINTERN PyObject *FabricCore_DFGExec_exportNodesJSON__SWIG_2(FabricCore::DFGExec *self,PyObject *nodeNamesPyObj,PyObject *pyEncoder){
    if ( !PyList_Check( nodeNamesPyObj ) )
    {
      PyErr_SetString(PyExc_ValueError, "nodeNames: expecting a list");
      return NULL;
    }
    uint32_t nodeCount = PyList_Size( nodeNamesPyObj );
    char const **nodeCStrs =
      static_cast<char const **>( alloca( nodeCount*sizeof(char const *) ) );
    for ( uint32_t i = 0; i < nodeCount; i++ ) {
      PyObject *nodeNamePyObj = PyList_GetItem( nodeNamesPyObj, i );
      if ( !PyString_Check(nodeNamePyObj)
        && !PyUnicode_Check(nodeNamePyObj) )
      {
        PyErr_SetString( PyExc_ValueError, "nodeNames: list items must be strings" );
        return NULL;
      }
      nodeCStrs[i] = PyString_AsString(nodeNamePyObj);
    }

    if ( !PyCallable_Check( pyEncoder ) )
    {
      PyErr_SetString(
        PyExc_TypeError,
        "encoder: must be callable"
        );
      return NULL;
    }

    PyObject *pyResult = 0;
    try
    {
      FabricCore::String result =
        self->exportNodesJSON( nodeCount, nodeCStrs );
      char const *resultCStr;
      uint32_t resultSize;
      result.getCStrAndSize( resultCStr, resultSize );
      pyResult = PyString_FromStringAndSize( resultCStr, resultSize );
    }
    catch ( FabricCore::Exception e )
    {
      PyErr_Format( PyExc_Exception, "Fabric: %s", e.getDesc_cstr() );
      return NULL;
    }
    return pyResult;
  }
SWIGINTERN PyObject *FabricCore_DFGExec_bind__SWIG_2(FabricCore::DFGExec *self,PyObject *rtValsPyObj){
    if ( !PyList_Check( rtValsPyObj ) )
    {
      PyErr_SetString(
        PyExc_ValueError,
        "Fabric: rebind(): rtVals: expecting a list"
        );
      return NULL;
    }
    
    uint32_t numRTVals = PyList_Size( rtValsPyObj );
    FabricCore::RTVal *rtVals = new FabricCore::RTVal[numRTVals];
    
    for ( uint32_t i = 0; i < numRTVals; ++i )
    {
      PyObject *rtValPyObj = PyList_GetItem( rtValsPyObj, i );
      rtVals[i] = PyObjectToRTVal_DFGExec( self, rtValPyObj );
    }

    PyObject *result = 0;

    try
    {
      result = SWIG_NewPointerObj(
        new FabricCore::DFGBinding(
          static_cast<FabricCore::DFGBinding const &>(
            self->bind(
              numRTVals,
              rtVals
              )
            )
          ),
        SWIGTYPE_p_FabricCore__DFGBinding,
        SWIG_POINTER_OWN
        );
    }
    catch ( FabricCore::Exception e )
    {
      PyErr_Format( PyExc_Exception, "Fabric: %s", e.getDesc_cstr() );
      delete [] rtVals;
      return NULL;
    }

    delete [] rtVals;

    return result;
  }
SWIGINTERN PyObject *FabricCore_DFGExec_getPortDefaultValue(FabricCore::DFGExec *self,PyObject *portNamePyObj,PyObject *typeNamePyObj){
    AutoCStr portNameCStr =
      PyStringToCString(
        portNamePyObj,
        "Fabric: getPortDefaultValue(): portName: "
        );
    if ( !portNameCStr )
      return NULL;

    AutoCStr typeNameCStr =
      PyStringToCString(
        typeNamePyObj,
        "Fabric: getPortDefaultValue(): typeName: "
        );
    if ( !typeNameCStr )
      return NULL;

    FabricCore::RTVal rtVal;

    try
    {
      rtVal =
        self->getPortDefaultValue(
          portNameCStr, typeNameCStr
          );
    }
    catch ( FabricCore::Exception e )
    {
      PyErr_Format( PyExc_Exception, "Fabric: %s", e.getDesc_cstr() );
      return NULL;
    }

    return RTValToPyObject_DFGExec( self, &rtVal );
  }
SWIGINTERN PyObject *FabricCore_DFGExec_getInstPortResolvedDefaultValue(FabricCore::DFGExec *self,PyObject *portNamePyObj,PyObject *typeNamePyObj){
    AutoCStr portNameCStr =
      PyStringToCString(
        portNamePyObj,
        "Fabric: getInstPortResolvedDefaultValue(): portName: "
        );
    if ( !portNameCStr )
      return NULL;

    AutoCStr typeNameCStr =
      PyStringToCString(
        typeNamePyObj,
        "Fabric: getInstPortResolvedDefaultValue(): typeName: "
        );
    if ( !typeNameCStr )
      return NULL;

    FabricCore::RTVal rtVal;

    try
    {
      rtVal =
        self->getInstPortResolvedDefaultValue(
          portNameCStr, typeNameCStr
          );
    }
    catch ( FabricCore::Exception e )
    {
      PyErr_Format( PyExc_Exception, "Fabric: %s", e.getDesc_cstr() );
      return NULL;
    }

    return RTValToPyObject_DFGExec( self, &rtVal );
  }
SWIGINTERN PyObject *FabricCore_DFGExec_setPortDefaultValue__SWIG_2(FabricCore::DFGExec *self,PyObject *portNamePyObj,PyObject *rtValPyObj,PyObject *canUndoPyObj){
    AutoCStr portNameCStr =
      PyStringToCString(
        portNamePyObj,
        "Fabric: setPortDefaultValue(): portName: "
        );
    if ( !portNameCStr )
      return NULL;

    FabricCore::RTVal rtVal = PyObjectToRTVal_DFGExec( self, rtValPyObj );

    bool canUndo = canUndoPyObj == Py_True;

    try
    {
      self->setPortDefaultValue(
        portNameCStr,
        rtVal,
        canUndo
        );
    }
    catch ( FabricCore::Exception e )
    {
      PyErr_Format( PyExc_Exception, "Fabric: %s", e.getDesc_cstr() );
      return NULL;
    }

    return SWIG_Py_Void();
  }
SWIGINTERN PyObject *FabricCore_DFGExec_setPortDefaultValue__SWIG_3(FabricCore::DFGExec *self,PyObject *portNamePyObj,PyObject *rtValPyObj){
    AutoCStr portNameCStr =
      PyStringToCString(
        portNamePyObj,
        "Fabric: setPortDefaultValue(): portName: "
        );
    if ( !portNameCStr )
      return NULL;

    FabricCore::RTVal rtVal = PyObjectToRTVal_DFGExec( self, rtValPyObj );

    try
    {
      self->setPortDefaultValue(
        portNameCStr,
        rtVal,
        true
        );
    }
    catch ( FabricCore::Exception e )
    {
      PyErr_Format( PyExc_Exception, "Fabric: %s", e.getDesc_cstr() );
      return NULL;
    }

    return SWIG_Py_Void();
  }
SWIGINTERN PyObject *FabricCore_DFGExec_getDebugNodePortValue(FabricCore::DFGExec *self,PyObject *pinPathPyObj){
    AutoCStr pinPathCStr =
      PyStringToCString(
        pinPathPyObj,
        "Fabric: setNodePortDefaultValue(): pinPath: "
        );
    if ( !pinPathCStr )
      return NULL;

    FabricCore::RTVal rtVal;
    try
    {
      rtVal = self->getDebugNodePortValue(
        pinPathCStr
        );
    }
    catch ( FabricCore::Exception e )
    {
      PyErr_Format(
        PyExc_Exception,
        "Fabric: getDebugNodePortValue(path): %s", e.getDesc_cstr()
        );
      return NULL;
    }

    return RTValToPyObject_DFGExec( self, &rtVal );
  }
SWIGINTERN PyObject *FabricCore_DFGExec_createView__SWIG_1(FabricCore::DFGExec *self,PyObject *pycallback){
    // [andrew 2012-11-13] we never release this pycallback so we will always
    // leak one Python reference to the current callback
    Py_INCREF( pycallback );

    if (!PyCallable_Check( pycallback )) {
      PyErr_SetString(
        PyExc_TypeError,
        "Fabric: createView(path, callback): callback: must be a callable object"
        );
      return NULL;
    }
    
    PyObject *result = SWIG_NewPointerObj(
      new FabricCore::DFGView(
        static_cast<FabricCore::DFGView const &>(
          self->createView(
            &PythonSingleStringCallback,
            reinterpret_cast<void *>( pycallback )
            )
          )
        ),
      SWIGTYPE_p_FabricCore__DFGView,
      SWIG_POINTER_OWN
      );
    
    return result;
  }
SWIGINTERN PyObject *FabricCore_DFGBinding_getArgValue(FabricCore::DFGBinding *self,PyObject *namePyObj){
    AutoCStr nameCString =
      PyStringToCString(
        namePyObj,
        "Fabric: getArgValue(name): name: "
        );
    if ( !nameCString )
      return NULL;

    FabricCore::RTVal rtVal;
    try
    {
      rtVal = self->getArgValue( nameCString.get() );
    }
    catch ( FabricCore::Exception e )
    {
      PyErr_Format(
        PyExc_Exception,
        "Fabric: getArgValue(name): %s", e.getDesc_cstr()
        );
      return NULL;
    }

    return RTValToPyObject_DFGBinding( self, &rtVal );
  }
SWIGINTERN PyObject *FabricCore_DFGBinding_setArgValue__SWIG_4(FabricCore::DFGBinding *self,PyObject *namePyObj,PyObject *rtValPyObj,PyObject *canUndoPyObj){
    AutoCStr nameCString =
      PyStringToCString(
        namePyObj,
        "Fabric: setArgValue(name, value): name: "
        );
    if ( !nameCString )
      return NULL;

    FabricCore::RTVal rtVal = PyObjectToRTVal_DFGBinding( self, rtValPyObj );

    bool canUndo = canUndoPyObj == Py_True;

    try
    {
      self->setArgValue( nameCString.get(), rtVal, canUndo );
    }
    catch ( FabricCore::Exception e )
    {
      PyErr_Format(
        PyExc_Exception,
        "Fabric: setArgValue(name, value): %s",
        e.getDesc_cstr()
        );
      return NULL;
    }

    return SWIG_Py_Void();
  }
SWIGINTERN PyObject *FabricCore_DFGBinding_setArgValue__SWIG_5(FabricCore::DFGBinding *self,PyObject *namePyObj,PyObject *rtValPyObj){
    AutoCStr nameCString =
      PyStringToCString(
        namePyObj,
        "Fabric: setArgValue(name, value): name: "
        );
    if ( !nameCString )
      return NULL;

    FabricCore::RTVal rtVal = PyObjectToRTVal_DFGBinding( self, rtValPyObj );

    try
    {
      self->setArgValue( nameCString.get(), rtVal, true );
    }
    catch ( FabricCore::Exception e )
    {
      PyErr_Format(
        PyExc_Exception,
        "Fabric: setArgValue(name, value): %s",
        e.getDesc_cstr()
        );
      return NULL;
    }

    return SWIG_Py_Void();
  }
SWIGINTERN PyObject *FabricCore_DFGBinding_setNotificationCallback__SWIG_1(FabricCore::DFGBinding *self,PyObject *pycallback){
    // [andrew 2012-11-13] we never release this pycallback so we will always
    // leak one Python reference to the current callback
    Py_INCREF( pycallback );

    if (!PyCallable_Check( pycallback )) {
      PyErr_SetString(
        PyExc_TypeError,
        "Fabric: setNotificationCallback(path, callback): callback: must be a callable object"
        );
      return NULL;
    }
    
    self->setNotificationCallback(
      &PythonSingleStringCallback,
      reinterpret_cast<void *>( pycallback )
      );

    return SWIG_Py_Void();
  }
SWIGINTERN PyObject *FabricCore_DFGHost_createBindingToPreset__SWIG_2(FabricCore::DFGHost *self,PyObject *presetPathPyObj,PyObject *rtValsPyObj){
    AutoCStr presetPathCStr =
      PyStringToCString(
        presetPathPyObj,
        "Fabric: DFGHost.createBindingToPreset: presetPath: "
        );
    if ( !presetPathCStr )
      return NULL;

    if ( !PyList_Check( rtValsPyObj ) )
    {
      PyErr_SetString(
        PyExc_ValueError,
        "Fabric: DFGHost.createBindingToPreset: rtVals: expecting a list"
        );
      return NULL;
    }
    
    uint32_t numRTVals = PyList_Size( rtValsPyObj );
    FabricCore::RTVal *rtVals = new FabricCore::RTVal[numRTVals];
    
    for ( uint32_t i = 0; i < numRTVals; ++i )
    {
      PyObject *rtValPyObj = PyList_GetItem( rtValsPyObj, i );
      rtVals[i] = PyObjectToRTVal_DFGHost( self, rtValPyObj );
    }

    PyObject *result = 0;

    try
    {
      result = SWIG_NewPointerObj(
        new FabricCore::DFGBinding(
          static_cast<FabricCore::DFGBinding const &>(
            self->createBindingToPreset(
              presetPathCStr,
              numRTVals,
              rtVals
              )
            )
          ),
        SWIGTYPE_p_FabricCore__DFGBinding,
        SWIG_POINTER_OWN
        );
    }
    catch ( FabricCore::Exception e )
    {
      PyErr_Format( PyExc_Exception, "Fabric: %s", e.getDesc_cstr() );
      delete [] rtVals;
      return NULL;
    }

    delete [] rtVals;

    return result;
  }
SWIGINTERN PyObject *FabricCore_DFGHost_createBindingToExecutableFromJSON(FabricCore::DFGHost *self,PyObject *jsonPyObj,PyObject *rtValsPyObj){
    char *jsonCString =
      PyStringToCString(
        jsonPyObj,
        "Fabric: DFGHost.createBindingToExecutableFromJSON: json: "
        );
    if ( !jsonCString )
    {
      return NULL;
    }

    if ( !PyList_Check( rtValsPyObj ) )
    {
      PyErr_SetString(
        PyExc_ValueError,
        "Fabric: DFGHost.createBindingToExecutableFromJSON: rtVals: expecting a list"
        );
      delete [] jsonCString;
      return NULL;
    }
    
    uint32_t numRTVals = PyList_Size( rtValsPyObj );
    FabricCore::RTVal *rtVals = new FabricCore::RTVal[numRTVals];
    
    for ( uint32_t i = 0; i < numRTVals; ++i )
    {
      PyObject *rtValPyObj = PyList_GetItem( rtValsPyObj, i );
      rtVals[i] = PyObjectToRTVal_DFGHost( self, rtValPyObj );
    }

    PyObject *result = 0;

    try
    {
      result = SWIG_NewPointerObj(
        new FabricCore::DFGBinding(
          static_cast<FabricCore::DFGBinding const &>(
            self->createBindingToPreset(
              jsonCString,
              numRTVals,
              rtVals
              )
            )
          ),
        SWIGTYPE_p_FabricCore__DFGBinding,
        SWIG_POINTER_OWN
        );
    }
    catch ( FabricCore::Exception e )
    {
      PyErr_Format( PyExc_Exception, "Fabric: %s", e.getDesc_cstr() );
      delete [] rtVals;
      delete [] jsonCString;
      return NULL;
    }

    delete [] rtVals;
    delete [] jsonCString;

    return result;
  }
SWIGINTERN FabricCore::Client FabricCore_Client_Create__SWIG_1(PyObject *pyReportCallback,PyObject *pyCreateOptions){
    FabricCore::Client::ReportCallback pyReportCFunction =
      &PythonReportCallback;
    if ( pyReportCallback == Py_None )
    {
      // [andrew 20140121] allow totally disabling reporting so that there
      // are never calls into Python while executing within the Core
      pyReportCFunction = 0;
    }
    else if ( !PyCallable_Check( pyReportCallback ) )
    {
      PyErr_SetString(
        PyExc_TypeError,
        "reportCallback must be a callable object!"
        );
      return FabricCore::Client();
    }
    else
    {
      
      // [andrew 2012-11-13] we never release this pycallback so we will always
      // leak one Python reference to the current callback
      Py_INCREF( pyReportCallback );
    }
    
    try
    {
      if ( PyDict_Check( pyCreateOptions ) )
      {
        FabricCore::Client::CreateOptions createOptions;
        memset( &createOptions, 0, sizeof(createOptions) );
        
        PyObject *pyGuarded = PyDict_GetItemString( pyCreateOptions, "guarded" );
        if ( pyGuarded && PyInt_Check( pyGuarded ) && PyInt_AsLong( pyGuarded ) )
          createOptions.guarded = true;
        PyObject *pyTrapOnThrow = PyDict_GetItemString( pyCreateOptions, "trapOnThrow" );
        if ( pyTrapOnThrow && PyInt_Check( pyTrapOnThrow ) && PyInt_AsLong( pyTrapOnThrow ) )
          createOptions.trapOnThrow = true;
        PyObject *pyTraceOperators = PyDict_GetItemString( pyCreateOptions, "traceOperators" );
        if ( pyTraceOperators && PyInt_Check( pyTraceOperators ) && PyInt_AsLong( pyTraceOperators ) )
          createOptions.traceOperators = true;
        PyObject *pyOptimizationType = PyDict_GetItemString( pyCreateOptions, "optimizationType" );
        if ( pyOptimizationType && PyInt_Check( pyOptimizationType ) )
          createOptions.optimizationType = PyInt_AsLong( pyOptimizationType ) ;
        
        char const **extsToLoad;
        PyObject *pyExtsToLoad = PyDict_GetItemString( pyCreateOptions, "extsToLoad" );
        if ( pyExtsToLoad && PyList_Check( pyExtsToLoad ) )
        {
          createOptions.numExtsToLoad = PyList_Size( pyExtsToLoad );
          extsToLoad =
            (char const **)alloca(
              createOptions.numExtsToLoad * sizeof(char const *)
              );
          for ( uint32_t i=0; i<createOptions.numExtsToLoad; ++i )
          {
            PyObject *pyExtToLoad = PyList_GetItem( pyExtsToLoad, i );
            if ( !PyString_Check( pyExtToLoad ) && !PyUnicode_Check( pyExtToLoad ) )
            {
              char buf[256];
              snprintf( buf, 256, "extsToLoad[%u]: not a string", i );
              PyErr_SetString( PyExc_TypeError, buf );
              return FabricCore::Client();
            }
            extsToLoad[i] = PyString_AsString( pyExtToLoad );
          }
          createOptions.extsToLoad = extsToLoad;
        }
        
        char const **extPaths;
        PyObject *pyExtPaths = PyDict_GetItemString( pyCreateOptions, "extPaths" );
        if ( pyExtPaths && PyList_Check( pyExtPaths ) )
        {
          createOptions.numExtPaths = PyList_Size( pyExtPaths );
          extPaths =
            (char const **)alloca(
              createOptions.numExtPaths * sizeof(char const *)
              );
          for ( uint32_t i=0; i<createOptions.numExtPaths; ++i )
          {
            PyObject *pyExtPath = PyList_GetItem( pyExtPaths, i );
            if ( !PyString_Check( pyExtPath ) && !PyUnicode_Check( pyExtPath ) )
            {
              char buf[256];
              snprintf( buf, 256, "extPaths[%u]: not a string", i );
              PyErr_SetString( PyExc_TypeError, buf );
              return FabricCore::Client();
            }
            extPaths[i] = PyString_AsString( pyExtPath );
          }
          createOptions.extPaths = extPaths;
        }
        
        char const **canvasPresetDirCStrs;
        PyObject *pyCanvasPresetDirs =
          PyDict_GetItemString( pyCreateOptions, "canvasPresetDirs" );
        if ( pyCanvasPresetDirs )
        {
          if ( !PyList_Check( pyCanvasPresetDirs ) )
          {
            PyErr_SetString(
              PyExc_TypeError,
              "canvasPresetDirs: must be a list"
              );
            return FabricCore::Client();
          }

          createOptions.canvasPresetDirCount =
            PyList_Size( pyCanvasPresetDirs );
          canvasPresetDirCStrs =
            (char const **)alloca(
              createOptions.canvasPresetDirCount * sizeof(char const *)
              );
          for ( uint32_t i=0; i<createOptions.canvasPresetDirCount; ++i )
          {
            PyObject *pyCanvasPresetDir =
              PyList_GetItem( pyCanvasPresetDirs, i );
            if ( !PyString_Check( pyCanvasPresetDir )
              && !PyUnicode_Check( pyCanvasPresetDir ) )
            {
              char buf[256];
              snprintf( buf, 256, "canvasPresetDirs[%u]: not a string", i );
              PyErr_SetString( PyExc_TypeError, buf );
              return FabricCore::Client();
            }
            canvasPresetDirCStrs[i] = PyString_AsString( pyCanvasPresetDir );
          }
          createOptions.canvasPresetDirCStrs = canvasPresetDirCStrs;
        }
        
        PyObject *pyRTValToJSONEnc =
          PyDict_GetItemString( pyCreateOptions, "rtValToJSONEncoder" );
        if ( pyRTValToJSONEnc && pyRTValToJSONEnc != Py_None )
        {
          if ( !PyCallable_Check( pyRTValToJSONEnc ) )
          {
            PyErr_SetString(
              PyExc_TypeError,
              "rtValToJSONEncoder: must be callable or 'None'"
              );
            return FabricCore::Client();
          }
          PythonRTValToJSONEncoder *pythonRTValToJSONEncoder =
            new PythonRTValToJSONEncoder( pyRTValToJSONEnc );
          createOptions.rtValToJSONEncoder = pythonRTValToJSONEncoder;
        }
        
        PyObject *pyRTValFromJSONDec =
          PyDict_GetItemString( pyCreateOptions, "rtValFromJSONDecoder" );
        if ( pyRTValFromJSONDec && pyRTValFromJSONDec != Py_None )
        {
          if ( !PyCallable_Check( pyRTValFromJSONDec ) )
          {
            PyErr_SetString(
              PyExc_TypeError,
              "rtValFromJSONDecoder: must be callable or 'None'"
              );
            return FabricCore::Client();
          }
          PythonRTValFromJSONDecoder *pythonRTValFromJSONDecoder =
            new PythonRTValFromJSONDecoder( pyRTValFromJSONDec );
          createOptions.rtValFromJSONDecoder = pythonRTValFromJSONDecoder;
        }

        return FabricCore::Client::Create(
          pyReportCFunction,
          pyReportCallback,
          &createOptions
          );
      }
      else if ( PyString_Check( pyCreateOptions ) || PyUnicode_Check( pyCreateOptions ) )
      {
        char const *existingContextID = PyString_AsString( pyCreateOptions );
        
        return FabricCore::Client::Create(
          pyReportCFunction,
          pyReportCallback,
          existingContextID
          );
      }
      else
      {
        PyErr_SetString(
          PyExc_TypeError,
          "pyCreateOptions must be a dictionary!"
          );
        return FabricCore::Client();
      }
      
    }
    catch ( FabricCore::Exception e )
    {
      char errstr[256];
      snprintf(errstr, 256, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      return FabricCore::Client();
    }
  }
SWIGINTERN PyObject *FabricCore_Client_setStatusCallback__SWIG_1(FabricCore::Client *self,PyObject *pycallback){
    if (!PyCallable_Check( pycallback )) {
      PyErr_SetString(PyExc_TypeError, "Callback must be a callable object!");
      return NULL;
    }
    
    // [andrew 2012-11-13] we never release this pycallback so we will always
    // leak one Python reference to the current callback
    Py_INCREF( pycallback );

    Py_XDECREF( self->getStatusUserdata() );
    self->setStatusCallback(
      &PythonStatusCallback,
      reinterpret_cast<void *>( pycallback )
      );

    return SWIG_Py_Void();
  }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_FEC_GetVersionMaj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":FEC_GetVersionMaj")) SWIG_fail;
  {
    try {
      result = (uint8_t)FEC_GetVersionMaj();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_GetVersionMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":FEC_GetVersionMin")) SWIG_fail;
  {
    try {
      result = (uint8_t)FEC_GetVersionMin();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_GetVersionRev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":FEC_GetVersionRev")) SWIG_fail;
  {
    try {
      result = (uint8_t)FEC_GetVersionRev();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_GetVersionStr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":FEC_GetVersionStr")) SWIG_fail;
  {
    try {
      result = (char *)FEC_GetVersionStr();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_Initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":FEC_Initialize")) SWIG_fail;
  {
    try {
      FEC_Initialize();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_Finalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":FEC_Finalize")) SWIG_fail;
  {
    try {
      FEC_Finalize();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_EnableDebug(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_EnableDebug",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FEC_EnableDebug" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      FEC_EnableDebug(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RefRetain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Ref arg1 = (FEC_Ref) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RefRetain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RefRetain" "', argument " "1"" of type '" "FEC_Ref""'"); 
  }
  {
    try {
      FEC_RefRetain(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RefRelease(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Ref arg1 = (FEC_Ref) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RefRelease",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RefRelease" "', argument " "1"" of type '" "FEC_Ref""'"); 
  }
  {
    try {
      FEC_RefRelease(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RefIsNull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Ref arg1 = (FEC_Ref) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RefIsNull",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RefIsNull" "', argument " "1"" of type '" "FEC_Ref""'"); 
  }
  {
    try {
      result = (int)FEC_RefIsNull(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_Variant__opaque__set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  uint8_t *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_Variant__opaque__set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_Variant__opaque__set" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_Variant__opaque__set" "', argument " "2"" of type '" "uint8_t [12]""'"); 
  } 
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)12; ++ii) arg1->_opaque_[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""_opaque_""' of type '""uint8_t [12]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_Variant__opaque__get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_Variant__opaque__get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_Variant__opaque__get" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  result = (uint8_t *)(uint8_t *) ((arg1)->_opaque_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FEC_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FEC_Variant")) SWIG_fail;
  {
    try {
      result = (FEC_Variant *)new FEC_Variant();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_Variant, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FEC_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FEC_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FEC_Variant" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FEC_Variant_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FEC_Variant, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_FEC_VariantDictIter__opaque__set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_VariantDictIter *arg1 = (FEC_VariantDictIter *) 0 ;
  uint8_t *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantDictIter__opaque__set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_VariantDictIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantDictIter__opaque__set" "', argument " "1"" of type '" "FEC_VariantDictIter *""'"); 
  }
  arg1 = reinterpret_cast< FEC_VariantDictIter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantDictIter__opaque__set" "', argument " "2"" of type '" "uint8_t [8]""'"); 
  } 
  arg2 = reinterpret_cast< uint8_t * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)8; ++ii) arg1->_opaque_[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""_opaque_""' of type '""uint8_t [8]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantDictIter__opaque__get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_VariantDictIter *arg1 = (FEC_VariantDictIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantDictIter__opaque__get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_VariantDictIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantDictIter__opaque__get" "', argument " "1"" of type '" "FEC_VariantDictIter *""'"); 
  }
  arg1 = reinterpret_cast< FEC_VariantDictIter * >(argp1);
  result = (uint8_t *)(uint8_t *) ((arg1)->_opaque_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FEC_VariantDictIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_VariantDictIter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FEC_VariantDictIter")) SWIG_fail;
  {
    try {
      result = (FEC_VariantDictIter *)new FEC_VariantDictIter();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_VariantDictIter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FEC_VariantDictIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_VariantDictIter *arg1 = (FEC_VariantDictIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FEC_VariantDictIter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_VariantDictIter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FEC_VariantDictIter" "', argument " "1"" of type '" "FEC_VariantDictIter *""'"); 
  }
  arg1 = reinterpret_cast< FEC_VariantDictIter * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FEC_VariantDictIter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FEC_VariantDictIter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_FEC_GetLastExceptionCString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":FEC_GetLastExceptionCString")) SWIG_fail;
  {
    try {
      result = (char *)FEC_GetLastExceptionCString();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_GetLastExceptionLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":FEC_GetLastExceptionLength")) SWIG_fail;
  {
    try {
      result = (uint32_t)FEC_GetLastExceptionLength();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClearLastException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":FEC_ClearLastException")) SWIG_fail;
  {
    try {
      FEC_ClearLastException();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_AllocVariants(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_Variant *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_AllocVariants",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FEC_AllocVariants" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  {
    try {
      result = (FEC_Variant *)FEC_AllocVariants(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_Variant, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_VariantType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantGetType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetType" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (FEC_VariantType)FEC_VariantGetType((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  FEC_Variant *arg2 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitCopy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitCopy" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantInitCopy" "', argument " "2"" of type '" "FEC_Variant const *""'"); 
  }
  arg2 = reinterpret_cast< FEC_Variant * >(argp2);
  {
    try {
      FEC_VariantInitCopy(arg1,(FEC_Variant const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  FEC_Variant *arg2 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantSetCopy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetCopy" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantSetCopy" "', argument " "2"" of type '" "FEC_Variant const *""'"); 
  }
  arg2 = reinterpret_cast< FEC_Variant * >(argp2);
  {
    try {
      FEC_VariantSetCopy(arg1,(FEC_Variant const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitTake(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  FEC_Variant *arg2 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitTake",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitTake" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantInitTake" "', argument " "2"" of type '" "FEC_Variant *""'"); 
  }
  arg2 = reinterpret_cast< FEC_Variant * >(argp2);
  {
    try {
      FEC_VariantInitTake(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetTake(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  FEC_Variant *arg2 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantSetTake",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetTake" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantSetTake" "', argument " "2"" of type '" "FEC_Variant *""'"); 
  }
  arg2 = reinterpret_cast< FEC_Variant * >(argp2);
  {
    try {
      FEC_VariantSetTake(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitNull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantInitNull",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitNull" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      FEC_VariantInitNull(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantIsNull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantIsNull",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantIsNull" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int)FEC_VariantIsNull((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitBoolean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitBoolean",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitBoolean" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantInitBoolean" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      FEC_VariantInitBoolean(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantIsBoolean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantIsBoolean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantIsBoolean" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int)FEC_VariantIsBoolean((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetBoolean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantGetBoolean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetBoolean" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int)FEC_VariantGetBoolean((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetBoolean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantSetBoolean",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetBoolean" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantSetBoolean" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      FEC_VariantSetBoolean(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitUInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitUInt8",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitUInt8" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantInitUInt8" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  {
    try {
      FEC_VariantInitUInt8(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantIsUInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantIsUInt8",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantIsUInt8" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int)FEC_VariantIsUInt8((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetUInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantGetUInt8",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetUInt8" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (uint8_t)FEC_VariantGetUInt8((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetUInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantSetUInt8",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetUInt8" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantSetUInt8" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  {
    try {
      FEC_VariantSetUInt8(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitSInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  int8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitSInt8",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitSInt8" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantInitSInt8" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = static_cast< int8_t >(val2);
  {
    try {
      FEC_VariantInitSInt8(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantIsSInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantIsSInt8",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantIsSInt8" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int)FEC_VariantIsSInt8((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetSInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantGetSInt8",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetSInt8" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int8_t)FEC_VariantGetSInt8((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetSInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  int8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantSetSInt8",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetSInt8" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantSetSInt8" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = static_cast< int8_t >(val2);
  {
    try {
      FEC_VariantSetSInt8(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitUInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitUInt16",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitUInt16" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantInitUInt16" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      FEC_VariantInitUInt16(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantIsUInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantIsUInt16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantIsUInt16" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int)FEC_VariantIsUInt16((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetUInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantGetUInt16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetUInt16" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (uint16_t)FEC_VariantGetUInt16((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetUInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantSetUInt16",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetUInt16" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantSetUInt16" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      FEC_VariantSetUInt16(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitSInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitSInt16",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitSInt16" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantInitSInt16" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  {
    try {
      FEC_VariantInitSInt16(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantIsSInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantIsSInt16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantIsSInt16" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int)FEC_VariantIsSInt16((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetSInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantGetSInt16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetSInt16" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int16_t)FEC_VariantGetSInt16((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetSInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantSetSInt16",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetSInt16" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantSetSInt16" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  {
    try {
      FEC_VariantSetSInt16(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitUInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitUInt32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitUInt32" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantInitUInt32" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      FEC_VariantInitUInt32(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantIsUInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantIsUInt32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantIsUInt32" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int)FEC_VariantIsUInt32((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetUInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantGetUInt32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetUInt32" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (uint32_t)FEC_VariantGetUInt32((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetUInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantSetUInt32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetUInt32" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantSetUInt32" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      FEC_VariantSetUInt32(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitSInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitSInt32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitSInt32" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantInitSInt32" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  {
    try {
      FEC_VariantInitSInt32(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantIsSInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantIsSInt32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantIsSInt32" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int)FEC_VariantIsSInt32((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetSInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantGetSInt32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetSInt32" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int32_t)FEC_VariantGetSInt32((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetSInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantSetSInt32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetSInt32" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantSetSInt32" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  {
    try {
      FEC_VariantSetSInt32(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitUInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitUInt64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitUInt64" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantInitUInt64" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  {
    try {
      FEC_VariantInitUInt64(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantIsUInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantIsUInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantIsUInt64" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int)FEC_VariantIsUInt64((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetUInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantGetUInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetUInt64" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (uint64_t)FEC_VariantGetUInt64((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetUInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantSetUInt64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetUInt64" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantSetUInt64" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  {
    try {
      FEC_VariantSetUInt64(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitSInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitSInt64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitSInt64" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantInitSInt64" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      FEC_VariantInitSInt64(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantIsSInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantIsSInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantIsSInt64" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int)FEC_VariantIsSInt64((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetSInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantGetSInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetSInt64" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int64_t)FEC_VariantGetSInt64((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetSInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantSetSInt64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetSInt64" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantSetSInt64" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      FEC_VariantSetSInt64(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitFloat32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitFloat32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitFloat32" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantInitFloat32" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      FEC_VariantInitFloat32(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantIsFloat32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantIsFloat32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantIsFloat32" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int)FEC_VariantIsFloat32((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetFloat32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantGetFloat32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetFloat32" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (float)FEC_VariantGetFloat32((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetFloat32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantSetFloat32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetFloat32" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantSetFloat32" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      FEC_VariantSetFloat32(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitFloat64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitFloat64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitFloat64" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantInitFloat64" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      FEC_VariantInitFloat64(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantIsFloat64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantIsFloat64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantIsFloat64" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int)FEC_VariantIsFloat64((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetFloat64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantGetFloat64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetFloat64" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (double)FEC_VariantGetFloat64((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetFloat64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantSetFloat64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetFloat64" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantSetFloat64" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      FEC_VariantSetFloat64(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantIsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantIsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantIsString" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int)FEC_VariantIsString((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitStringEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantInitStringEmpty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitStringEmpty" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      FEC_VariantInitStringEmpty(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitStringCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_VariantInitStringCopy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitStringCopy" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_VariantInitStringCopy" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      FEC_VariantInitStringCopy(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitStringCopy_cstr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitStringCopy_cstr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitStringCopy_cstr" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_VariantInitStringCopy_cstr(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitStringTake(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_VariantInitStringTake",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitStringTake" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantInitStringTake" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_VariantInitStringTake" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      FEC_VariantInitStringTake(arg1,arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitStringTake_cstr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitStringTake_cstr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitStringTake_cstr" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantInitStringTake_cstr" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      FEC_VariantInitStringTake_cstr(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetStringData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantGetStringData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetStringData" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (char *)FEC_VariantGetStringData((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetStringLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantGetStringLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetStringLength" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (uint32_t)FEC_VariantGetStringLength((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetString_cstr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantGetString_cstr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetString_cstr" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (char *)FEC_VariantGetString_cstr((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetStringCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_VariantSetStringCopy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetStringCopy" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_VariantSetStringCopy" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      FEC_VariantSetStringCopy(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetStringCopy_cstr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantSetStringCopy_cstr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetStringCopy_cstr" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_VariantSetStringCopy_cstr(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetStringTake(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_VariantSetStringTake",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetStringTake" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantSetStringTake" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_VariantSetStringTake" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      FEC_VariantSetStringTake(arg1,arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetStringTake_cstr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantSetStringTake_cstr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetStringTake_cstr" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantSetStringTake_cstr" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      FEC_VariantSetStringTake_cstr(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantIsArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantIsArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantIsArray" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int)FEC_VariantIsArray((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitArrayEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantInitArrayEmpty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitArrayEmpty" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      FEC_VariantInitArrayEmpty(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitArrayEmptyWithSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitArrayEmptyWithSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitArrayEmptyWithSize" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantInitArrayEmptyWithSize" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      FEC_VariantInitArrayEmptyWithSize(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitArrayCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  uint32_t arg2 ;
  FEC_Variant *arg3 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_VariantInitArrayCopy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitArrayCopy" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantInitArrayCopy" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_VariantInitArrayCopy" "', argument " "3"" of type '" "FEC_Variant const *""'"); 
  }
  arg3 = reinterpret_cast< FEC_Variant * >(argp3);
  {
    try {
      FEC_VariantInitArrayCopy(arg1,arg2,(FEC_Variant const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitArrayTake(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  uint32_t arg2 ;
  FEC_Variant *arg3 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_VariantInitArrayTake",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitArrayTake" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantInitArrayTake" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_VariantInitArrayTake" "', argument " "3"" of type '" "FEC_Variant *""'"); 
  }
  arg3 = reinterpret_cast< FEC_Variant * >(argp3);
  {
    try {
      FEC_VariantInitArrayTake(arg1,arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetArraySize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantGetArraySize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetArraySize" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (uint32_t)FEC_VariantGetArraySize((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetArrayElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_Variant *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantGetArrayElement",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetArrayElement" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantGetArrayElement" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (FEC_Variant *)FEC_VariantGetArrayElement((FEC_Variant const *)arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_Variant, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantArrayAppendCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  FEC_Variant *arg2 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantArrayAppendCopy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantArrayAppendCopy" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantArrayAppendCopy" "', argument " "2"" of type '" "FEC_Variant const *""'"); 
  }
  arg2 = reinterpret_cast< FEC_Variant * >(argp2);
  {
    try {
      FEC_VariantArrayAppendCopy(arg1,(FEC_Variant const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantArrayAppendTake(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  FEC_Variant *arg2 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantArrayAppendTake",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantArrayAppendTake" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantArrayAppendTake" "', argument " "2"" of type '" "FEC_Variant *""'"); 
  }
  arg2 = reinterpret_cast< FEC_Variant * >(argp2);
  {
    try {
      FEC_VariantArrayAppendTake(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetArrayElementCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  uint32_t arg2 ;
  FEC_Variant *arg3 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_VariantSetArrayElementCopy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetArrayElementCopy" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantSetArrayElementCopy" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_VariantSetArrayElementCopy" "', argument " "3"" of type '" "FEC_Variant const *""'"); 
  }
  arg3 = reinterpret_cast< FEC_Variant * >(argp3);
  {
    try {
      FEC_VariantSetArrayElementCopy(arg1,arg2,(FEC_Variant const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetArrayElementTake(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  uint32_t arg2 ;
  FEC_Variant *arg3 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_VariantSetArrayElementTake",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetArrayElementTake" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_VariantSetArrayElementTake" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_VariantSetArrayElementTake" "', argument " "3"" of type '" "FEC_Variant *""'"); 
  }
  arg3 = reinterpret_cast< FEC_Variant * >(argp3);
  {
    try {
      FEC_VariantSetArrayElementTake(arg1,arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantIsDict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantIsDict",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantIsDict" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (int)FEC_VariantIsDict((FEC_Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitDictEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantInitDictEmpty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitDictEmpty" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      FEC_VariantInitDictEmpty(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetDictKeyValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  FEC_Variant *arg2 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_Variant *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantGetDictKeyValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetDictKeyValue" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantGetDictKeyValue" "', argument " "2"" of type '" "FEC_Variant const *""'"); 
  }
  arg2 = reinterpret_cast< FEC_Variant * >(argp2);
  {
    try {
      result = (FEC_Variant *)FEC_VariantGetDictKeyValue((FEC_Variant const *)arg1,(FEC_Variant const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_Variant, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetDictKeyValue_str(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FEC_Variant *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_VariantGetDictKeyValue_str",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetDictKeyValue_str" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_VariantGetDictKeyValue_str" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = (FEC_Variant *)FEC_VariantGetDictKeyValue_str((FEC_Variant const *)arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantGetDictKeyValue_cstr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_Variant *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantGetDictKeyValue_cstr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantGetDictKeyValue_cstr" "', argument " "1"" of type '" "FEC_Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_Variant *)FEC_VariantGetDictKeyValue_cstr((FEC_Variant const *)arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetDictKeyCopyValueCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  FEC_Variant *arg2 = (FEC_Variant *) 0 ;
  FEC_Variant *arg3 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_VariantSetDictKeyCopyValueCopy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetDictKeyCopyValueCopy" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantSetDictKeyCopyValueCopy" "', argument " "2"" of type '" "FEC_Variant const *""'"); 
  }
  arg2 = reinterpret_cast< FEC_Variant * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_VariantSetDictKeyCopyValueCopy" "', argument " "3"" of type '" "FEC_Variant const *""'"); 
  }
  arg3 = reinterpret_cast< FEC_Variant * >(argp3);
  {
    try {
      FEC_VariantSetDictKeyCopyValueCopy(arg1,(FEC_Variant const *)arg2,(FEC_Variant const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetDictKeyTakeValueCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  FEC_Variant *arg2 = (FEC_Variant *) 0 ;
  FEC_Variant *arg3 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_VariantSetDictKeyTakeValueCopy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetDictKeyTakeValueCopy" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantSetDictKeyTakeValueCopy" "', argument " "2"" of type '" "FEC_Variant *""'"); 
  }
  arg2 = reinterpret_cast< FEC_Variant * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_VariantSetDictKeyTakeValueCopy" "', argument " "3"" of type '" "FEC_Variant const *""'"); 
  }
  arg3 = reinterpret_cast< FEC_Variant * >(argp3);
  {
    try {
      FEC_VariantSetDictKeyTakeValueCopy(arg1,arg2,(FEC_Variant const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantSetDictKeyTakeValueTake(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  FEC_Variant *arg2 = (FEC_Variant *) 0 ;
  FEC_Variant *arg3 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_VariantSetDictKeyTakeValueTake",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantSetDictKeyTakeValueTake" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantSetDictKeyTakeValueTake" "', argument " "2"" of type '" "FEC_Variant *""'"); 
  }
  arg2 = reinterpret_cast< FEC_Variant * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_VariantSetDictKeyTakeValueTake" "', argument " "3"" of type '" "FEC_Variant *""'"); 
  }
  arg3 = reinterpret_cast< FEC_Variant * >(argp3);
  {
    try {
      FEC_VariantSetDictKeyTakeValueTake(arg1,arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantDictIterInit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_VariantDictIter *arg1 = (FEC_VariantDictIter *) 0 ;
  FEC_Variant *arg2 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantDictIterInit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_VariantDictIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantDictIterInit" "', argument " "1"" of type '" "FEC_VariantDictIter *""'"); 
  }
  arg1 = reinterpret_cast< FEC_VariantDictIter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantDictIterInit" "', argument " "2"" of type '" "FEC_Variant const *""'"); 
  }
  arg2 = reinterpret_cast< FEC_Variant * >(argp2);
  {
    try {
      FEC_VariantDictIterInit(arg1,(FEC_Variant const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantDictIterIsDone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_VariantDictIter *arg1 = (FEC_VariantDictIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantDictIterIsDone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_VariantDictIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantDictIterIsDone" "', argument " "1"" of type '" "FEC_VariantDictIter const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_VariantDictIter * >(argp1);
  {
    try {
      result = (int)FEC_VariantDictIterIsDone((FEC_VariantDictIter const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantDictIterGetKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_VariantDictIter *arg1 = (FEC_VariantDictIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_Variant *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantDictIterGetKey",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_VariantDictIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantDictIterGetKey" "', argument " "1"" of type '" "FEC_VariantDictIter const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_VariantDictIter * >(argp1);
  {
    try {
      result = (FEC_Variant *)FEC_VariantDictIterGetKey((FEC_VariantDictIter const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_Variant, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantDictIterGetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_VariantDictIter *arg1 = (FEC_VariantDictIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_Variant *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantDictIterGetValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_VariantDictIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantDictIterGetValue" "', argument " "1"" of type '" "FEC_VariantDictIter const *""'"); 
  }
  arg1 = reinterpret_cast< FEC_VariantDictIter * >(argp1);
  {
    try {
      result = (FEC_Variant *)FEC_VariantDictIterGetValue((FEC_VariantDictIter const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_Variant, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantDictIterNext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_VariantDictIter *arg1 = (FEC_VariantDictIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantDictIterNext",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_VariantDictIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantDictIterNext" "', argument " "1"" of type '" "FEC_VariantDictIter *""'"); 
  }
  arg1 = reinterpret_cast< FEC_VariantDictIter * >(argp1);
  {
    try {
      FEC_VariantDictIterNext(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantDictIterDispose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_VariantDictIter *arg1 = (FEC_VariantDictIter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantDictIterDispose",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_VariantDictIter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantDictIterDispose" "', argument " "1"" of type '" "FEC_VariantDictIter *""'"); 
  }
  arg1 = reinterpret_cast< FEC_VariantDictIter * >(argp1);
  {
    try {
      FEC_VariantDictIterDispose(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitWithVariantDesc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  FEC_Variant *arg2 = (FEC_Variant *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_VariantInitWithVariantDesc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitWithVariantDesc" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantInitWithVariantDesc" "', argument " "2"" of type '" "FEC_Variant const *""'"); 
  }
  arg2 = reinterpret_cast< FEC_Variant * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_VariantInitWithVariantDesc" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      FEC_VariantInitWithVariantDesc(arg1,(FEC_Variant const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitFromJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_VariantInitFromJSON",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitFromJSON" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_VariantInitFromJSON" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      FEC_VariantInitFromJSON(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitWithVariantJSONEncoding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  FEC_Variant *arg2 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitWithVariantJSONEncoding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitWithVariantJSONEncoding" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantInitWithVariantJSONEncoding" "', argument " "2"" of type '" "FEC_Variant const *""'"); 
  }
  arg2 = reinterpret_cast< FEC_Variant * >(argp2);
  {
    try {
      FEC_VariantInitWithVariantJSONEncoding(arg1,(FEC_Variant const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantDispose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_VariantDispose",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantDispose" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      FEC_VariantDispose(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_KLTool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_KLTool",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FEC_KLTool" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_KLTool" "', argument " "2"" of type '" "char const *const *""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  {
    try {
      result = (int)FEC_KLTool(arg1,(char const *const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_KL2EDK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_KL2EDK",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FEC_KL2EDK" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_KL2EDK" "', argument " "2"" of type '" "char const *const *""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  {
    try {
      result = (int)FEC_KL2EDK(arg1,(char const *const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_KLExport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_KLExport",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FEC_KLExport" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_KLExport" "', argument " "2"" of type '" "char const *const *""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  {
    try {
      result = (int)FEC_KLExport(arg1,(char const *const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_FEC_ReportSource_NONE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FEC_ReportSource_NONE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FEC_ReportSource_NONE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FEC_ReportSource_NONE));
  return pyobj;
}


SWIGINTERN int Swig_var_FEC_ReportSource_System_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FEC_ReportSource_System is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FEC_ReportSource_System_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FEC_ReportSource_System));
  return pyobj;
}


SWIGINTERN int Swig_var_FEC_ReportSource_User_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FEC_ReportSource_User is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FEC_ReportSource_User_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FEC_ReportSource_User));
  return pyobj;
}


SWIGINTERN int Swig_var_FEC_ReportSource_ALL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FEC_ReportSource_ALL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FEC_ReportSource_ALL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FEC_ReportSource_ALL));
  return pyobj;
}


SWIGINTERN int Swig_var_FEC_ReportLevel_Error_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FEC_ReportLevel_Error is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FEC_ReportLevel_Error_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FEC_ReportLevel_Error));
  return pyobj;
}


SWIGINTERN int Swig_var_FEC_ReportLevel_Warning_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FEC_ReportLevel_Warning is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FEC_ReportLevel_Warning_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FEC_ReportLevel_Warning));
  return pyobj;
}


SWIGINTERN int Swig_var_FEC_ReportLevel_Info_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FEC_ReportLevel_Info is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FEC_ReportLevel_Info_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FEC_ReportLevel_Info));
  return pyobj;
}


SWIGINTERN int Swig_var_FEC_ReportLevel_Debug_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FEC_ReportLevel_Debug is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_FEC_ReportLevel_Debug_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FEC_ReportLevel_Debug));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_guarded_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_guarded_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_guarded_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_ClientCreateOptions_guarded_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->guarded = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_guarded_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_guarded_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_guarded_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (uint8_t) ((arg1)->guarded);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_trapOnThrow_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_trapOnThrow_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_trapOnThrow_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_ClientCreateOptions_trapOnThrow_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->trapOnThrow = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_trapOnThrow_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_trapOnThrow_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_trapOnThrow_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (uint8_t) ((arg1)->trapOnThrow);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_traceOperators_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_traceOperators_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_traceOperators_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_ClientCreateOptions_traceOperators_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->traceOperators = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_traceOperators_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_traceOperators_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_traceOperators_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (uint8_t) ((arg1)->traceOperators);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_optimizationType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  FEC_ClientOptimizationType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_optimizationType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_optimizationType_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_ClientCreateOptions_optimizationType_set" "', argument " "2"" of type '" "FEC_ClientOptimizationType""'");
  } 
  arg2 = static_cast< FEC_ClientOptimizationType >(val2);
  if (arg1) (arg1)->optimizationType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_optimizationType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_ClientOptimizationType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_optimizationType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_optimizationType_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (FEC_ClientOptimizationType) ((arg1)->optimizationType);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_numExtPaths_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_numExtPaths_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_numExtPaths_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_ClientCreateOptions_numExtPaths_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->numExtPaths = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_numExtPaths_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_numExtPaths_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_numExtPaths_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (uint32_t) ((arg1)->numExtPaths);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_extPaths_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  char **arg2 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_extPaths_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_extPaths_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_ClientCreateOptions_extPaths_set" "', argument " "2"" of type '" "char const *const *""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  if (arg1) (arg1)->extPaths = (char const *const *)arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_extPaths_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_extPaths_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_extPaths_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (char **) ((arg1)->extPaths);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_numExtsToLoad_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_numExtsToLoad_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_numExtsToLoad_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_ClientCreateOptions_numExtsToLoad_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->numExtsToLoad = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_numExtsToLoad_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_numExtsToLoad_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_numExtsToLoad_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (uint32_t) ((arg1)->numExtsToLoad);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_extsToLoad_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  char **arg2 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_extsToLoad_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_extsToLoad_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_ClientCreateOptions_extsToLoad_set" "', argument " "2"" of type '" "char const *const *""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  if (arg1) (arg1)->extsToLoad = (char const *const *)arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_extsToLoad_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_extsToLoad_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_extsToLoad_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (char **) ((arg1)->extsToLoad);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_canvasPresetDirCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_canvasPresetDirCount_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_canvasPresetDirCount_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_ClientCreateOptions_canvasPresetDirCount_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->canvasPresetDirCount = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_canvasPresetDirCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_canvasPresetDirCount_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_canvasPresetDirCount_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (uint32_t) ((arg1)->canvasPresetDirCount);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_canvasPresetDirCStrs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  char **arg2 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_canvasPresetDirCStrs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_canvasPresetDirCStrs_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_ClientCreateOptions_canvasPresetDirCStrs_set" "', argument " "2"" of type '" "char const *const *""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  if (arg1) (arg1)->canvasPresetDirCStrs = (char const *const *)arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_canvasPresetDirCStrs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_canvasPresetDirCStrs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_canvasPresetDirCStrs_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (char **) ((arg1)->canvasPresetDirCStrs);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_slowOperationCallback_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  FEC_ClientSlowOperationCallback arg2 = (FEC_ClientSlowOperationCallback) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_slowOperationCallback_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_slowOperationCallback_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "FEC_ClientCreateOptions_slowOperationCallback_set" "', argument " "2"" of type '" "FEC_ClientSlowOperationCallback""'"); 
    }
  }
  if (arg1) (arg1)->slowOperationCallback = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_slowOperationCallback_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_ClientSlowOperationCallback result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_slowOperationCallback_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_slowOperationCallback_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (FEC_ClientSlowOperationCallback) ((arg1)->slowOperationCallback);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_int__void);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_slowOperationUserdata_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_slowOperationUserdata_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_slowOperationUserdata_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_ClientCreateOptions_slowOperationUserdata_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->slowOperationUserdata = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_slowOperationUserdata_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_slowOperationUserdata_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_slowOperationUserdata_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (void *) ((arg1)->slowOperationUserdata);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_licenseType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  FEC_ClientLicenseType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_licenseType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_licenseType_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_ClientCreateOptions_licenseType_set" "', argument " "2"" of type '" "FEC_ClientLicenseType""'");
  } 
  arg2 = static_cast< FEC_ClientLicenseType >(val2);
  if (arg1) (arg1)->licenseType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_licenseType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_ClientLicenseType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_licenseType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_licenseType_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (FEC_ClientLicenseType) ((arg1)->licenseType);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_encodeRTValToJSON_CB_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  FEC_EncodeRTValToJSONCallback arg2 = (FEC_EncodeRTValToJSONCallback) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_encodeRTValToJSON_CB_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_encodeRTValToJSON_CB_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_void_p_void_p_void_unsigned_char_p_f_p_void_p_q_const__char_unsigned_int__void_p_void_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "FEC_ClientCreateOptions_encodeRTValToJSON_CB_set" "', argument " "2"" of type '" "FEC_EncodeRTValToJSONCallback""'"); 
    }
  }
  if (arg1) (arg1)->encodeRTValToJSON_CB = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_encodeRTValToJSON_CB_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_EncodeRTValToJSONCallback result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_encodeRTValToJSON_CB_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_encodeRTValToJSON_CB_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (FEC_EncodeRTValToJSONCallback) ((arg1)->encodeRTValToJSON_CB);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_void_p_void_p_void_unsigned_char_p_f_p_void_p_q_const__char_unsigned_int__void_p_void_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_encodeRTValToJSON_UD_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_encodeRTValToJSON_UD_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_encodeRTValToJSON_UD_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_ClientCreateOptions_encodeRTValToJSON_UD_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->encodeRTValToJSON_UD = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_encodeRTValToJSON_UD_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_encodeRTValToJSON_UD_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_encodeRTValToJSON_UD_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (void *) ((arg1)->encodeRTValToJSON_UD);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_decodeRTValFromJSON_CB_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  FEC_DecodeRTValFromJSONCallback arg2 = (FEC_DecodeRTValFromJSONCallback) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_decodeRTValFromJSON_CB_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_decodeRTValFromJSON_CB_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_void_p_void_p_void_unsigned_char_p_q_const__char_unsigned_int_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "FEC_ClientCreateOptions_decodeRTValFromJSON_CB_set" "', argument " "2"" of type '" "FEC_DecodeRTValFromJSONCallback""'"); 
    }
  }
  if (arg1) (arg1)->decodeRTValFromJSON_CB = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_decodeRTValFromJSON_CB_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_DecodeRTValFromJSONCallback result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_decodeRTValFromJSON_CB_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_decodeRTValFromJSON_CB_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (FEC_DecodeRTValFromJSONCallback) ((arg1)->decodeRTValFromJSON_CB);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_void_p_void_p_void_unsigned_char_p_q_const__char_unsigned_int_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_decodeRTValFromJSON_UD_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientCreateOptions_decodeRTValFromJSON_UD_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_decodeRTValFromJSON_UD_set" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_ClientCreateOptions_decodeRTValFromJSON_UD_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->decodeRTValFromJSON_UD = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientCreateOptions_decodeRTValFromJSON_UD_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientCreateOptions_decodeRTValFromJSON_UD_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientCreateOptions_decodeRTValFromJSON_UD_get" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  result = (void *) ((arg1)->decodeRTValFromJSON_UD);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FEC_ClientCreateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FEC_ClientCreateOptions")) SWIG_fail;
  {
    try {
      result = (FEC_ClientCreateOptions *)new FEC_ClientCreateOptions();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_ClientCreateOptions, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FEC_ClientCreateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientCreateOptions *arg1 = (FEC_ClientCreateOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FEC_ClientCreateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_ClientCreateOptions, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FEC_ClientCreateOptions" "', argument " "1"" of type '" "FEC_ClientCreateOptions *""'"); 
  }
  arg1 = reinterpret_cast< FEC_ClientCreateOptions * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FEC_ClientCreateOptions_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FEC_ClientCreateOptions, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_FEC_ClientCreate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientReportCallback arg1 = (FEC_ClientReportCallback) 0 ;
  void *arg2 = (void *) 0 ;
  FEC_ClientCreateOptions *arg3 = (FEC_ClientCreateOptions *) 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FEC_ClientRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_ClientCreate",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int res = SWIG_ConvertFunctionPtr(obj0, (void**)(&arg1), SWIGTYPE_p_f_p_void_unsigned_char_unsigned_char_p_q_const__char_unsigned_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "FEC_ClientCreate" "', argument " "1"" of type '" "FEC_ClientReportCallback""'"); 
    }
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_ClientCreate" "', argument " "2"" of type '" "void *""'"); 
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_FEC_ClientCreateOptions, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_ClientCreate" "', argument " "3"" of type '" "FEC_ClientCreateOptions const *""'"); 
  }
  arg3 = reinterpret_cast< FEC_ClientCreateOptions * >(argp3);
  {
    try {
      result = (FEC_ClientRef)FEC_ClientCreate(arg1,arg2,(FEC_ClientCreateOptions const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientBind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientReportCallback arg1 = (FEC_ClientReportCallback) 0 ;
  void *arg2 = (void *) 0 ;
  char *arg3 = (char *) 0 ;
  int res2 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FEC_ClientRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_ClientBind",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int res = SWIG_ConvertFunctionPtr(obj0, (void**)(&arg1), SWIGTYPE_p_f_p_void_unsigned_char_unsigned_char_p_q_const__char_unsigned_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "FEC_ClientBind" "', argument " "1"" of type '" "FEC_ClientReportCallback""'"); 
    }
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_ClientBind" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (FEC_ClientRef)FEC_ClientBind(arg1,arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientSetReportCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  FEC_ClientReportCallback arg2 = (FEC_ClientReportCallback) 0 ;
  void *arg3 = (void *) 0 ;
  int res1 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_ClientSetReportCallback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientSetReportCallback" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_void_unsigned_char_unsigned_char_p_q_const__char_unsigned_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "FEC_ClientSetReportCallback" "', argument " "2"" of type '" "FEC_ClientReportCallback""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_ClientSetReportCallback" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      FEC_ClientSetReportCallback(arg1,arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientEnableRuntimeLogging(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientEnableRuntimeLogging",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientEnableRuntimeLogging" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      FEC_ClientEnableRuntimeLogging(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientDisableRuntimeLogging(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientDisableRuntimeLogging",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientDisableRuntimeLogging" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      FEC_ClientDisableRuntimeLogging(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientGetReportSourceMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_ReportSource result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientGetReportSourceMask",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientGetReportSourceMask" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      result = (FEC_ReportSource)FEC_ClientGetReportSourceMask(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientGetReportLevelMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_ReportLevel result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientGetReportLevelMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientGetReportLevelMax" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      result = (FEC_ReportLevel)FEC_ClientGetReportLevelMax(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientSetReportSourceMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  FEC_ReportSource arg2 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientSetReportSourceMask",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientSetReportSourceMask" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_ClientSetReportSourceMask" "', argument " "2"" of type '" "FEC_ReportSource""'");
  } 
  arg2 = static_cast< FEC_ReportSource >(val2);
  {
    try {
      FEC_ClientSetReportSourceMask(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientSetReportLevelMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  FEC_ReportLevel arg2 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientSetReportLevelMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientSetReportLevelMax" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_ClientSetReportLevelMax" "', argument " "2"" of type '" "FEC_ReportLevel""'");
  } 
  arg2 = static_cast< FEC_ReportLevel >(val2);
  {
    try {
      FEC_ClientSetReportLevelMax(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientGetContextID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientGetContextID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientGetContextID" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      result = (char *)FEC_ClientGetContextID(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientGetMemoryUsage_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientGetMemoryUsage_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientGetMemoryUsage_Variant" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      result = FEC_ClientGetMemoryUsage_Variant(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FEC_Variant(static_cast< const FEC_Variant& >(result))), SWIGTYPE_p_FEC_Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientStartInstrumentation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientStartInstrumentation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientStartInstrumentation" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      FEC_ClientStartInstrumentation(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientStopInstrumentation_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientStopInstrumentation_Variant",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientStopInstrumentation_Variant" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = FEC_ClientStopInstrumentation_Variant(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FEC_Variant(static_cast< const FEC_Variant& >(result))), SWIGTYPE_p_FEC_Variant, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientExportExtension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_ClientExportExtension",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientExportExtension" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FEC_ClientExportExtension" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      FEC_ClientExportExtension(arg1,(char const *)arg2,(char const *)arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientSetLogWarnings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int arg2 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientSetLogWarnings",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientSetLogWarnings" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_ClientSetLogWarnings" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      FEC_ClientSetLogWarnings(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientSetStatusCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  FEC_ClientStatusCallback arg2 = (FEC_ClientStatusCallback) 0 ;
  void *arg3 = (void *) 0 ;
  int res1 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_ClientSetStatusCallback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientSetStatusCallback" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_int_p_q_const__char_unsigned_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "FEC_ClientSetStatusCallback" "', argument " "2"" of type '" "FEC_ClientStatusCallback""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_ClientSetStatusCallback" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      FEC_ClientSetStatusCallback(arg1,arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientGetStatusUserdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientGetStatusUserdata",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientGetStatusUserdata" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      result = (void *)FEC_ClientGetStatusUserdata(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientSetSlowOperationCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  FEC_ClientSlowOperationCallback arg2 = (FEC_ClientSlowOperationCallback) 0 ;
  void *arg3 = (void *) 0 ;
  int res1 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_ClientSetSlowOperationCallback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientSetSlowOperationCallback" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "FEC_ClientSetSlowOperationCallback" "', argument " "2"" of type '" "FEC_ClientSlowOperationCallback""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_ClientSetSlowOperationCallback" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      FEC_ClientSetSlowOperationCallback(arg1,arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientQueueStatusMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_ClientQueueStatusMessage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientQueueStatusMessage" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      FEC_ClientQueueStatusMessage(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientValidateLicense(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientValidateLicense",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientValidateLicense" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      result = (int)FEC_ClientValidateLicense(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientHasCommercialLicense(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientHasCommercialLicense",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientHasCommercialLicense" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      result = (int)FEC_ClientHasCommercialLicense(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_SetStandaloneLicense(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_SetStandaloneLicense",&obj0)) SWIG_fail;
  {
    if (PyString_Check(obj0) || obj0 == Py_None) {
      res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
    }
    else if (PyUnicode_Check(obj0)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj0);
      alloc1 = SWIG_NEWOBJ;
      res1 = SWIG_AsCharPtrAndSize(uniobj, &buf1, NULL, &alloc1);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1),
        "Error converting string or unicode argument to char *");
    }
    arg1 = buf1;
  }
  {
    try {
      FEC_SetStandaloneLicense((char const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientEnableBackgroundTasks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientEnableBackgroundTasks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientEnableBackgroundTasks" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      FEC_ClientEnableBackgroundTasks(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientIsBackgroundOptimizationInProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientIsBackgroundOptimizationInProgress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientIsBackgroundOptimizationInProgress" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      result = (int)FEC_ClientIsBackgroundOptimizationInProgress(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientAdoptCurrentGLContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientAdoptCurrentGLContext",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientAdoptCurrentGLContext" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      FEC_ClientAdoptCurrentGLContext(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientIdle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientIdle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientIdle" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      FEC_ClientIdle(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientSupportsGPUCompute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientSupportsGPUCompute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientSupportsGPUCompute" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      result = (int)FEC_ClientSupportsGPUCompute(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientGetContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_ContextRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientGetContext",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientGetContext" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      result = (FEC_ContextRef)FEC_ClientGetContext(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ClientComputeMD5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_ClientComputeMD5",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientComputeMD5" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_StringRef)FEC_ClientComputeMD5(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_StringGetCStr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_StringRef arg1 = (FEC_StringRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_StringGetCStr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_StringGetCStr" "', argument " "1"" of type '" "FEC_StringRef""'"); 
  }
  {
    try {
      result = (char *)FEC_StringGetCStr(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_StringGetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_StringRef arg1 = (FEC_StringRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_StringGetSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_StringGetSize" "', argument " "1"" of type '" "FEC_StringRef""'"); 
  }
  {
    try {
      result = (uint32_t)FEC_StringGetSize(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_StringGetCStrAndSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_StringRef arg1 = (FEC_StringRef) 0 ;
  char **arg2 = (char **) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  int res1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_StringGetCStrAndSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_StringGetCStrAndSize" "', argument " "1"" of type '" "FEC_StringRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_StringGetCStrAndSize" "', argument " "2"" of type '" "char const **""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_StringGetCStrAndSize" "', argument " "3"" of type '" "uint32_t *""'"); 
  }
  arg3 = reinterpret_cast< uint32_t * >(argp3);
  {
    try {
      FEC_StringGetCStrAndSize(arg1,(char const **)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_StringAppend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_StringRef arg1 = (FEC_StringRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_StringAppend",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_StringAppend" "', argument " "1"" of type '" "FEC_StringRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_StringAppend" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      FEC_StringAppend(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTAssign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  FEC_RTValRef arg2 = (FEC_RTValRef) 0 ;
  int res1 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTAssign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTAssign" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_RTAssign" "', argument " "2"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      FEC_RTAssign(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  FEC_RTValRef *arg4 = (FEC_RTValRef *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_RTConstructValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructValue" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_RTConstructValue" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_RTConstructValue" "', argument " "4"" of type '" "FEC_RTValRef const *""'"); 
  }
  arg4 = reinterpret_cast< FEC_RTValRef * >(argp4);
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructValue(arg1,(char const *)arg2,arg3,(void *const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructValueFromBoolean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  int arg2 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTConstructValueFromBoolean",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructValueFromBoolean" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTConstructValueFromBoolean" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructValueFromBoolean(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructValueFromSInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  int8_t arg2 ;
  int res1 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTConstructValueFromSInt8",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructValueFromSInt8" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTConstructValueFromSInt8" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = static_cast< int8_t >(val2);
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructValueFromSInt8(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructValueFromSInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  int16_t arg2 ;
  int res1 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTConstructValueFromSInt16",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructValueFromSInt16" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTConstructValueFromSInt16" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructValueFromSInt16(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructValueFromSInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  int32_t arg2 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTConstructValueFromSInt32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructValueFromSInt32" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTConstructValueFromSInt32" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructValueFromSInt32(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructValueFromSInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  int64_t arg2 ;
  int res1 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTConstructValueFromSInt64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructValueFromSInt64" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTConstructValueFromSInt64" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructValueFromSInt64(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructValueFromUInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  uint8_t arg2 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTConstructValueFromUInt8",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructValueFromUInt8" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTConstructValueFromUInt8" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructValueFromUInt8(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructValueFromUInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  uint16_t arg2 ;
  int res1 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTConstructValueFromUInt16",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructValueFromUInt16" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTConstructValueFromUInt16" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructValueFromUInt16(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructValueFromUInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  uint32_t arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTConstructValueFromUInt32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructValueFromUInt32" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTConstructValueFromUInt32" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructValueFromUInt32(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructValueFromUInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  uint64_t arg2 ;
  int res1 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTConstructValueFromUInt64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructValueFromUInt64" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTConstructValueFromUInt64" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructValueFromUInt64(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructValueFromFloat32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  float arg2 ;
  int res1 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTConstructValueFromFloat32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructValueFromFloat32" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTConstructValueFromFloat32" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructValueFromFloat32(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructValueFromFloat64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  double arg2 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTConstructValueFromFloat64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructValueFromFloat64" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTConstructValueFromFloat64" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructValueFromFloat64(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructValueFromData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  void *arg2 = (void *) 0 ;
  int res1 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTConstructValueFromData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructValueFromData" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_RTConstructValueFromData" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructValueFromData(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructValueFromString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_RTConstructValueFromString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructValueFromString" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_RTConstructValueFromString" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructValueFromString(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructValueFromCString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTConstructValueFromCString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructValueFromCString" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructValueFromCString(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructFixedArrayValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_RTConstructFixedArrayValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructFixedArrayValue" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_RTConstructFixedArrayValue" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructFixedArrayValue(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructVariableArrayValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTConstructVariableArrayValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructVariableArrayValue" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructVariableArrayValue(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructExternalArrayValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_RTConstructExternalArrayValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructExternalArrayValue" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_RTConstructExternalArrayValue" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_RTConstructExternalArrayValue" "', argument " "4"" of type '" "void *""'"); 
  }
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructExternalArrayValue(arg1,(char const *)arg2,arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTConstructDictValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_RTConstructDictValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTConstructDictValue" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (FEC_RTValRef)FEC_RTConstructDictValue(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTCreateValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  FEC_RTValRef *arg4 = (FEC_RTValRef *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_RTCreateValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTCreateValue" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_RTCreateValue" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_RTCreateValue" "', argument " "4"" of type '" "FEC_RTValRef const *""'"); 
  }
  arg4 = reinterpret_cast< FEC_RTValRef * >(argp4);
  {
    try {
      result = (FEC_RTValRef)FEC_RTCreateValue(arg1,(char const *)arg2,arg3,(void *const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetBoolean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetBoolean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetBoolean" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (int)FEC_RTValGetBoolean(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetUInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetUInt8",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetUInt8" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (uint8_t)FEC_RTValGetUInt8(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetUInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetUInt16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetUInt16" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (uint16_t)FEC_RTValGetUInt16(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetUInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetUInt32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetUInt32" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (uint32_t)FEC_RTValGetUInt32(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetUInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetUInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetUInt64" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (uint64_t)FEC_RTValGetUInt64(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetSInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetSInt8",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetSInt8" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (int8_t)FEC_RTValGetSInt8(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetSInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetSInt16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetSInt16" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (int16_t)FEC_RTValGetSInt16(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetSInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetSInt32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetSInt32" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (int32_t)FEC_RTValGetSInt32(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetSInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetSInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetSInt64" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (int64_t)FEC_RTValGetSInt64(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetFloat32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetFloat32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetFloat32" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (float)FEC_RTValGetFloat32(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSetFloat32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  float arg2 ;
  int res1 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSetFloat32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSetFloat32" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValSetFloat32" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      FEC_RTValSetFloat32(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetFloat64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetFloat64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetFloat64" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (double)FEC_RTValGetFloat64(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetData" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (void *)FEC_RTValGetData(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSetData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  void *arg2 = (void *) 0 ;
  int res1 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSetData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSetData" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_RTValSetData" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    try {
      FEC_RTValSetData(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetStringCString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetStringCString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetStringCString" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (char *)FEC_RTValGetStringCString(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetStringLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetStringLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetStringLength" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (uint32_t)FEC_RTValGetStringLength(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData *arg1 = (FEC_RTValSimpleData *) 0 ;
  FEC_RTValSimpleType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSimpleData_type_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_type_set" "', argument " "1"" of type '" "FEC_RTValSimpleData *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValSimpleData_type_set" "', argument " "2"" of type '" "FEC_RTValSimpleType""'");
  } 
  arg2 = static_cast< FEC_RTValSimpleType >(val2);
  if (arg1) (arg1)->type = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData *arg1 = (FEC_RTValSimpleData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_RTValSimpleType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValSimpleData_type_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_type_get" "', argument " "1"" of type '" "FEC_RTValSimpleData *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData * >(argp1);
  result = (FEC_RTValSimpleType) ((arg1)->type);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData *arg1 = (FEC_RTValSimpleData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_RTValSimpleData_value *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValSimpleData_value_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_get" "', argument " "1"" of type '" "FEC_RTValSimpleData *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData * >(argp1);
  result = (FEC_RTValSimpleData_value *)& ((arg1)->value);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FEC_RTValSimpleData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FEC_RTValSimpleData")) SWIG_fail;
  {
    try {
      result = (FEC_RTValSimpleData *)new FEC_RTValSimpleData();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_RTValSimpleData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FEC_RTValSimpleData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData *arg1 = (FEC_RTValSimpleData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FEC_RTValSimpleData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FEC_RTValSimpleData" "', argument " "1"" of type '" "FEC_RTValSimpleData *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FEC_RTValSimpleData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FEC_RTValSimpleData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_boolean_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSimpleData_value_boolean_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_boolean_set" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValSimpleData_value_boolean_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->boolean = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_boolean_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValSimpleData_value_boolean_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_boolean_get" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  result = (int) ((arg1)->boolean);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_uint8_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSimpleData_value_uint8_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_uint8_set" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValSimpleData_value_uint8_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  if (arg1) (arg1)->uint8 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_uint8_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValSimpleData_value_uint8_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_uint8_get" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  result = (uint8_t) ((arg1)->uint8);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_uint16_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSimpleData_value_uint16_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_uint16_set" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValSimpleData_value_uint16_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  if (arg1) (arg1)->uint16 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_uint16_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValSimpleData_value_uint16_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_uint16_get" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  result = (uint16_t) ((arg1)->uint16);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_uint32_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSimpleData_value_uint32_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_uint32_set" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValSimpleData_value_uint32_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->uint32 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_uint32_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValSimpleData_value_uint32_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_uint32_get" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  result = (uint32_t) ((arg1)->uint32);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_uint64_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSimpleData_value_uint64_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_uint64_set" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValSimpleData_value_uint64_set" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  if (arg1) (arg1)->uint64 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_uint64_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValSimpleData_value_uint64_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_uint64_get" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  result = (uint64_t) ((arg1)->uint64);
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_sint8_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  int8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSimpleData_value_sint8_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_sint8_set" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValSimpleData_value_sint8_set" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = static_cast< int8_t >(val2);
  if (arg1) (arg1)->sint8 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_sint8_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValSimpleData_value_sint8_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_sint8_get" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  result = (int8_t) ((arg1)->sint8);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_sint16_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSimpleData_value_sint16_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_sint16_set" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValSimpleData_value_sint16_set" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  if (arg1) (arg1)->sint16 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_sint16_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValSimpleData_value_sint16_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_sint16_get" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  result = (int16_t) ((arg1)->sint16);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_sint32_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSimpleData_value_sint32_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_sint32_set" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValSimpleData_value_sint32_set" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  if (arg1) (arg1)->sint32 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_sint32_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValSimpleData_value_sint32_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_sint32_get" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  result = (int32_t) ((arg1)->sint32);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_sint64_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSimpleData_value_sint64_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_sint64_set" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValSimpleData_value_sint64_set" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  if (arg1) (arg1)->sint64 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_sint64_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValSimpleData_value_sint64_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_sint64_get" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  result = (int64_t) ((arg1)->sint64);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_float32_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSimpleData_value_float32_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_float32_set" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValSimpleData_value_float32_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->float32 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_float32_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValSimpleData_value_float32_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_float32_get" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  result = (float) ((arg1)->float32);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_float64_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSimpleData_value_float64_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_float64_set" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValSimpleData_value_float64_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->float64 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_float64_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValSimpleData_value_float64_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_float64_get" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  result = (double) ((arg1)->float64);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_string_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_RTValSimpleData_value_string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValSimpleData_value_string_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_string_get" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  result = (FEC_RTValSimpleData_value_string *)& ((arg1)->string);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_RTValSimpleData_value_string, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FEC_RTValSimpleData_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FEC_RTValSimpleData_value")) SWIG_fail;
  {
    try {
      result = (FEC_RTValSimpleData_value *)new FEC_RTValSimpleData_value();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_RTValSimpleData_value, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FEC_RTValSimpleData_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value *arg1 = (FEC_RTValSimpleData_value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FEC_RTValSimpleData_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FEC_RTValSimpleData_value" "', argument " "1"" of type '" "FEC_RTValSimpleData_value *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FEC_RTValSimpleData_value_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FEC_RTValSimpleData_value, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_string_cStringData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value_string *arg1 = (FEC_RTValSimpleData_value_string *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSimpleData_value_string_cStringData_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value_string, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_string_cStringData_set" "', argument " "1"" of type '" "FEC_RTValSimpleData_value_string *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value_string * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->cStringData = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->cStringData = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_string_cStringData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value_string *arg1 = (FEC_RTValSimpleData_value_string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValSimpleData_value_string_cStringData_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value_string, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_string_cStringData_get" "', argument " "1"" of type '" "FEC_RTValSimpleData_value_string *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value_string * >(argp1);
  result = (char *) ((arg1)->cStringData);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_string_length_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value_string *arg1 = (FEC_RTValSimpleData_value_string *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSimpleData_value_string_length_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value_string, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_string_length_set" "', argument " "1"" of type '" "FEC_RTValSimpleData_value_string *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value_string * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValSimpleData_value_string_length_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->length = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSimpleData_value_string_length_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value_string *arg1 = (FEC_RTValSimpleData_value_string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValSimpleData_value_string_length_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value_string, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSimpleData_value_string_length_get" "', argument " "1"" of type '" "FEC_RTValSimpleData_value_string *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value_string * >(argp1);
  result = (uint32_t) ((arg1)->length);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FEC_RTValSimpleData_value_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value_string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FEC_RTValSimpleData_value_string")) SWIG_fail;
  {
    try {
      result = (FEC_RTValSimpleData_value_string *)new FEC_RTValSimpleData_value_string();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_RTValSimpleData_value_string, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FEC_RTValSimpleData_value_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValSimpleData_value_string *arg1 = (FEC_RTValSimpleData_value_string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FEC_RTValSimpleData_value_string",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_RTValSimpleData_value_string, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FEC_RTValSimpleData_value_string" "', argument " "1"" of type '" "FEC_RTValSimpleData_value_string *""'"); 
  }
  arg1 = reinterpret_cast< FEC_RTValSimpleData_value_string * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FEC_RTValSimpleData_value_string_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FEC_RTValSimpleData_value_string, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_FEC_RTValMaybeGetSimpleData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  FEC_RTValSimpleData *arg2 = (FEC_RTValSimpleData *) 0 ;
  int res1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValMaybeGetSimpleData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValMaybeGetSimpleData" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_RTValSimpleData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_RTValMaybeGetSimpleData" "', argument " "2"" of type '" "FEC_RTValSimpleData *""'"); 
  }
  arg2 = reinterpret_cast< FEC_RTValSimpleData * >(argp2);
  {
    try {
      result = (int)FEC_RTValMaybeGetSimpleData(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetArraySize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetArraySize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetArraySize" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (uint32_t)FEC_RTValGetArraySize(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSetArraySize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  uint32_t arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSetArraySize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSetArraySize" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValSetArraySize" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      FEC_RTValSetArraySize(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetArrayElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  uint32_t arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValGetArrayElement",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetArrayElement" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValGetArrayElement" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (FEC_RTValRef)FEC_RTValGetArrayElement(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetArrayElementRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  uint32_t arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValGetArrayElementRef",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetArrayElementRef" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValGetArrayElementRef" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (FEC_RTValRef)FEC_RTValGetArrayElementRef(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSetArrayElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  uint32_t arg2 ;
  FEC_RTValRef arg3 = (FEC_RTValRef) 0 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_RTValSetArrayElement",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSetArrayElement" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTValSetArrayElement" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_RTValSetArrayElement" "', argument " "3"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      FEC_RTValSetArrayElement(arg1,arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetDictSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetDictSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetDictSize" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (uint32_t)FEC_RTValGetDictSize(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetDictKeys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetDictKeys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetDictKeys" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (FEC_RTValRef)FEC_RTValGetDictKeys(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetDictElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  FEC_RTValRef arg2 = (FEC_RTValRef) 0 ;
  int res1 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValGetDictElement",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetDictElement" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_RTValGetDictElement" "', argument " "2"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (FEC_RTValRef)FEC_RTValGetDictElement(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSetDictElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  FEC_RTValRef arg2 = (FEC_RTValRef) 0 ;
  FEC_RTValRef arg3 = (FEC_RTValRef) 0 ;
  int res1 ;
  int res2 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_RTValSetDictElement",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSetDictElement" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_RTValSetDictElement" "', argument " "2"" of type '" "FEC_RTValRef""'"); 
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_RTValSetDictElement" "', argument " "3"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      FEC_RTValSetDictElement(arg1,arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValIsNullObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValIsNullObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValIsNullObject" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (int)FEC_RTValIsNullObject(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValIsArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValIsArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValIsArray" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (int)FEC_RTValIsArray(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValIsDict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValIsDict",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValIsDict" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (int)FEC_RTValIsDict(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValIsStruct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValIsStruct",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValIsStruct" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (int)FEC_RTValIsStruct(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValIsObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValIsObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValIsObject" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (int)FEC_RTValIsObject(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValIsData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValIsData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValIsData" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (int)FEC_RTValIsData(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValIsInterface(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValIsInterface",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValIsInterface" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (int)FEC_RTValIsInterface(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValMaybeGetMember(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValMaybeGetMember",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValMaybeGetMember" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_RTValRef)FEC_RTValMaybeGetMember(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValMaybeGetMemberRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValMaybeGetMemberRef",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValMaybeGetMemberRef" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_RTValRef)FEC_RTValMaybeGetMemberRef(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSetMember(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  char *arg2 = (char *) 0 ;
  FEC_RTValRef arg3 = (FEC_RTValRef) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_RTValSetMember",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSetMember" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_RTValSetMember" "', argument " "3"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      FEC_RTValSetMember(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValCallMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  FEC_RTValRef arg2 = (FEC_RTValRef) 0 ;
  char *arg3 = (char *) 0 ;
  uint32_t arg4 ;
  FEC_RTValRef *arg5 = (FEC_RTValRef *) 0 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FEC_RTValCallMethod",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    if (PyString_Check(obj0) || obj0 == Py_None) {
      res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
    }
    else if (PyUnicode_Check(obj0)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj0);
      alloc1 = SWIG_NEWOBJ;
      res1 = SWIG_AsCharPtrAndSize(uniobj, &buf1, NULL, &alloc1);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1),
        "Error converting string or unicode argument to char *");
    }
    arg1 = buf1;
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_RTValCallMethod" "', argument " "2"" of type '" "FEC_RTValRef""'"); 
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FEC_RTValCallMethod" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FEC_RTValCallMethod" "', argument " "5"" of type '" "FEC_RTValRef *""'"); 
  }
  arg5 = reinterpret_cast< FEC_RTValRef * >(argp5);
  {
    try {
      result = (FEC_RTValRef)FEC_RTValCallMethod((char const *)arg1,arg2,(char const *)arg3,arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValCopy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValCopy" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (FEC_RTValRef)FEC_RTValCopy(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValClone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValClone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValClone" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (FEC_RTValRef)FEC_RTValClone(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetDesc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetDesc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetDesc" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (FEC_RTValRef)FEC_RTValGetDesc(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetTypeName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetTypeName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetTypeName" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (FEC_RTValRef)FEC_RTValGetTypeName(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetTypeNameCStr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetTypeNameCStr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetTypeNameCStr" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (char *)FEC_RTValGetTypeNameCStr(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValGetJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTValGetJSON",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValGetJSON" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (FEC_RTValRef)FEC_RTValGetJSON(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSetJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  FEC_RTValRef arg2 = (FEC_RTValRef) 0 ;
  int res1 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSetJSON",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSetJSON" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_RTValSetJSON" "', argument " "2"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      FEC_RTValSetJSON(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValSetJSONFromCString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValSetJSONFromCString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValSetJSONFromCString" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_RTValSetJSONFromCString(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValIsExEQTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  FEC_RTValRef arg2 = (FEC_RTValRef) 0 ;
  int res1 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValIsExEQTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValIsExEQTo" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_RTValIsExEQTo" "', argument " "2"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (int)FEC_RTValIsExEQTo(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTValHasType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTValHasType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTValHasType" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (int)FEC_RTValHasType(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTGetRTSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTGetRTSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTGetRTSize" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (uint32_t)FEC_RTGetRTSize(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTGetRTIsShallow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTGetRTIsShallow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTGetRTIsShallow" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (int)FEC_RTGetRTIsShallow(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTGetRTIsStruct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTGetRTIsStruct",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTGetRTIsStruct" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (int)FEC_RTGetRTIsStruct(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTGetRTIsObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTGetRTIsObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTGetRTIsObject" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (int)FEC_RTGetRTIsObject(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTGetRTIsInterface(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTGetRTIsInterface",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTGetRTIsInterface" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (int)FEC_RTGetRTIsInterface(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTGetRTExtName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTGetRTExtName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTGetRTExtName" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FEC_RTGetRTExtName(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTGetRegisteredTypes_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_RTGetRegisteredTypes_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTGetRegisteredTypes_Variant" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    try {
      result = FEC_RTGetRegisteredTypes_Variant(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FEC_Variant(static_cast< const FEC_Variant& >(result))), SWIGTYPE_p_FEC_Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTGetAggregateMemberInfo_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_RTGetAggregateMemberInfo_Variant",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTGetAggregateMemberInfo_Variant" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = FEC_RTGetAggregateMemberInfo_Variant(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FEC_Variant(static_cast< const FEC_Variant& >(result))), SWIGTYPE_p_FEC_Variant, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_RTGetTypeNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  uint32_t arg2 ;
  char **arg3 = (char **) 0 ;
  uint32_t *arg4 = (uint32_t *) 0 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_RTGetTypeNames",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_RTGetTypeNames" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_RTGetTypeNames" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_RTGetTypeNames" "', argument " "3"" of type '" "char const **""'"); 
  }
  arg3 = reinterpret_cast< char ** >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_RTGetTypeNames" "', argument " "4"" of type '" "uint32_t *""'"); 
  }
  arg4 = reinterpret_cast< uint32_t * >(argp4);
  {
    try {
      FEC_RTGetTypeNames(arg1,arg2,(char const **)arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_KLSourceFile_filenameCStr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_KLSourceFile *arg1 = (FEC_KLSourceFile *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_KLSourceFile_filenameCStr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_KLSourceFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_KLSourceFile_filenameCStr_set" "', argument " "1"" of type '" "FEC_KLSourceFile *""'"); 
  }
  arg1 = reinterpret_cast< FEC_KLSourceFile * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->filenameCStr = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->filenameCStr = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_KLSourceFile_filenameCStr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_KLSourceFile *arg1 = (FEC_KLSourceFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_KLSourceFile_filenameCStr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_KLSourceFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_KLSourceFile_filenameCStr_get" "', argument " "1"" of type '" "FEC_KLSourceFile *""'"); 
  }
  arg1 = reinterpret_cast< FEC_KLSourceFile * >(argp1);
  result = (char *) ((arg1)->filenameCStr);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_KLSourceFile_sourceCodeCStr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_KLSourceFile *arg1 = (FEC_KLSourceFile *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_KLSourceFile_sourceCodeCStr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_KLSourceFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_KLSourceFile_sourceCodeCStr_set" "', argument " "1"" of type '" "FEC_KLSourceFile *""'"); 
  }
  arg1 = reinterpret_cast< FEC_KLSourceFile * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->sourceCodeCStr = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->sourceCodeCStr = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_KLSourceFile_sourceCodeCStr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_KLSourceFile *arg1 = (FEC_KLSourceFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_KLSourceFile_sourceCodeCStr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_KLSourceFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_KLSourceFile_sourceCodeCStr_get" "', argument " "1"" of type '" "FEC_KLSourceFile *""'"); 
  }
  arg1 = reinterpret_cast< FEC_KLSourceFile * >(argp1);
  result = (char *) ((arg1)->sourceCodeCStr);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FEC_KLSourceFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_KLSourceFile *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FEC_KLSourceFile")) SWIG_fail;
  {
    try {
      result = (FEC_KLSourceFile *)new FEC_KLSourceFile();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_KLSourceFile, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FEC_KLSourceFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_KLSourceFile *arg1 = (FEC_KLSourceFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FEC_KLSourceFile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_KLSourceFile, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FEC_KLSourceFile" "', argument " "1"" of type '" "FEC_KLSourceFile *""'"); 
  }
  arg1 = reinterpret_cast< FEC_KLSourceFile * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FEC_KLSourceFile_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FEC_KLSourceFile, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_FEC_ClientGetDFGHost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_DFGHostRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ClientGetDFGHost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ClientGetDFGHost" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      result = (FEC_DFGHostRef)FEC_ClientGetDFGHost(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_ContextGetDFGHost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_DFGHostRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_ContextGetDFGHost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_ContextGetDFGHost" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    try {
      result = (FEC_DFGHostRef)FEC_ContextGetDFGHost(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostMaybeUndo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGHostMaybeUndo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostMaybeUndo" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    try {
      result = (int)FEC_DFGHostMaybeUndo(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostMaybeRedo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGHostMaybeRedo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostMaybeRedo" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    try {
      result = (int)FEC_DFGHostMaybeRedo(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostGetContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_ContextRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGHostGetContext",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostGetContext" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    try {
      result = (FEC_ContextRef)FEC_DFGHostGetContext(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostGetPresetDesc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGHostGetPresetDesc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostGetPresetDesc" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_StringRef)FEC_DFGHostGetPresetDesc(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostAddPresetDir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DFGHostAddPresetDir",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostAddPresetDir" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    try {
      result = (char *)FEC_DFGHostAddPresetDir(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostImportPresetFileJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FEC_DFGHostImportPresetFileJSON",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostImportPresetFileJSON" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    if (PyString_Check(obj4) || obj4 == Py_None) {
      res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
    }
    else if (PyUnicode_Check(obj4)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj4);
      alloc5 = SWIG_NEWOBJ;
      res5 = SWIG_AsCharPtrAndSize(uniobj, &buf5, NULL, &alloc5);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5),
        "Error converting string or unicode argument to char *");
    }
    arg5 = buf5;
  }
  {
    try {
      result = (char *)FEC_DFGHostImportPresetFileJSON(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostExportPresetJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGHostExportPresetJSON",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostExportPresetJSON" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_StringRef)FEC_DFGHostExportPresetJSON(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostRemovePreset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGHostRemovePreset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostRemovePreset" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DFGHostRemovePreset(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostCreateBindingToNewGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_DFGBindingRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGHostCreateBindingToNewGraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostCreateBindingToNewGraph" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    try {
      result = (FEC_DFGBindingRef)FEC_DFGHostCreateBindingToNewGraph(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostCreateBindingToNewFunc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_DFGBindingRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGHostCreateBindingToNewFunc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostCreateBindingToNewFunc" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    try {
      result = (FEC_DFGBindingRef)FEC_DFGHostCreateBindingToNewFunc(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostCreateBindingFromJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  FEC_RTValRef *arg4 = (FEC_RTValRef *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  FEC_DFGBindingRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DFGHostCreateBindingFromJSON",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostCreateBindingFromJSON" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DFGHostCreateBindingFromJSON" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_DFGHostCreateBindingFromJSON" "', argument " "4"" of type '" "FEC_RTValRef const *""'"); 
  }
  arg4 = reinterpret_cast< FEC_RTValRef * >(argp4);
  {
    try {
      result = (FEC_DFGBindingRef)FEC_DFGHostCreateBindingFromJSON(arg1,(char const *)arg2,arg3,(void *const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostCreateBindingToPreset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  FEC_RTValRef *arg4 = (FEC_RTValRef *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  FEC_DFGBindingRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DFGHostCreateBindingToPreset",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostCreateBindingToPreset" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DFGHostCreateBindingToPreset" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_DFGHostCreateBindingToPreset" "', argument " "4"" of type '" "FEC_RTValRef const *""'"); 
  }
  arg4 = reinterpret_cast< FEC_RTValRef * >(argp4);
  {
    try {
      result = (FEC_DFGBindingRef)FEC_DFGHostCreateBindingToPreset(arg1,(char const *)arg2,arg3,(void *const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostCreateNewUnboundGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_DFGBindingRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGHostCreateNewUnboundGraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostCreateNewUnboundGraph" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    try {
      result = (FEC_DFGBindingRef)FEC_DFGHostCreateNewUnboundGraph(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostCreateNewUnboundFunc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_DFGBindingRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGHostCreateNewUnboundFunc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostCreateNewUnboundFunc" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    try {
      result = (FEC_DFGBindingRef)FEC_DFGHostCreateNewUnboundFunc(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostCreateNewUnboundExecFromJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DFGExecRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGHostCreateNewUnboundExecFromJSON",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostCreateNewUnboundExecFromJSON" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_DFGExecRef)FEC_DFGHostCreateNewUnboundExecFromJSON(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostGetPresetImportPathname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGHostGetPresetImportPathname",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostGetPresetImportPathname" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FEC_DFGHostGetPresetImportPathname(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostFlushUndoRedo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGHostFlushUndoRedo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostFlushUndoRedo" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    try {
      FEC_DFGHostFlushUndoRedo(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostGetBindingForID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  uint32_t arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DFGBindingRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGHostGetBindingForID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostGetBindingForID" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGHostGetBindingForID" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (FEC_DFGBindingRef)FEC_DFGHostGetBindingForID(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostBlockComps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGHostBlockComps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostBlockComps" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    try {
      FEC_DFGHostBlockComps(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGHostUnblockComps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGHostUnblockComps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGHostUnblockComps" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    try {
      FEC_DFGHostUnblockComps(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGBindingGetID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGBindingRef arg1 = (FEC_DFGBindingRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGBindingGetID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGBindingGetID" "', argument " "1"" of type '" "FEC_DFGBindingRef""'"); 
  }
  {
    try {
      result = (uint32_t)FEC_DFGBindingGetID(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGBindingGetHost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGBindingRef arg1 = (FEC_DFGBindingRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_DFGHostRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGBindingGetHost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGBindingGetHost" "', argument " "1"" of type '" "FEC_DFGBindingRef""'"); 
  }
  {
    try {
      result = (FEC_DFGHostRef)FEC_DFGBindingGetHost(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGBindingGetExec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGBindingRef arg1 = (FEC_DFGBindingRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_DFGExecRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGBindingGetExec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGBindingGetExec" "', argument " "1"" of type '" "FEC_DFGBindingRef""'"); 
  }
  {
    try {
      result = (FEC_DFGExecRef)FEC_DFGBindingGetExec(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGBindingGetArgValue_Index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGBindingRef arg1 = (FEC_DFGBindingRef) 0 ;
  unsigned int arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGBindingGetArgValue_Index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGBindingGetArgValue_Index" "', argument " "1"" of type '" "FEC_DFGBindingRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGBindingGetArgValue_Index" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (FEC_RTValRef)FEC_DFGBindingGetArgValue_Index(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGBindingGetArgValue_Name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGBindingRef arg1 = (FEC_DFGBindingRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGBindingGetArgValue_Name",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGBindingGetArgValue_Name" "', argument " "1"" of type '" "FEC_DFGBindingRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_RTValRef)FEC_DFGBindingGetArgValue_Name(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGBindingSetArgValue_Index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGBindingRef arg1 = (FEC_DFGBindingRef) 0 ;
  FEC_LockType arg2 ;
  unsigned int arg3 ;
  FEC_RTValRef arg4 = (FEC_RTValRef) 0 ;
  int arg5 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FEC_DFGBindingSetArgValue_Index",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGBindingSetArgValue_Index" "', argument " "1"" of type '" "FEC_DFGBindingRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGBindingSetArgValue_Index" "', argument " "2"" of type '" "FEC_LockType""'");
  } 
  arg2 = static_cast< FEC_LockType >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DFGBindingSetArgValue_Index" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_DFGBindingSetArgValue_Index" "', argument " "4"" of type '" "FEC_RTValRef""'"); 
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FEC_DFGBindingSetArgValue_Index" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      FEC_DFGBindingSetArgValue_Index(arg1,arg2,arg3,arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGBindingSetArgValue_Name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGBindingRef arg1 = (FEC_DFGBindingRef) 0 ;
  FEC_LockType arg2 ;
  char *arg3 = (char *) 0 ;
  FEC_RTValRef arg4 = (FEC_RTValRef) 0 ;
  int arg5 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FEC_DFGBindingSetArgValue_Name",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGBindingSetArgValue_Name" "', argument " "1"" of type '" "FEC_DFGBindingRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGBindingSetArgValue_Name" "', argument " "2"" of type '" "FEC_LockType""'");
  } 
  arg2 = static_cast< FEC_LockType >(val2);
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_DFGBindingSetArgValue_Name" "', argument " "4"" of type '" "FEC_RTValRef""'"); 
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FEC_DFGBindingSetArgValue_Name" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      FEC_DFGBindingSetArgValue_Name(arg1,arg2,(char const *)arg3,arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGBindingExecute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGBindingRef arg1 = (FEC_DFGBindingRef) 0 ;
  FEC_LockType arg2 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGBindingExecute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGBindingExecute" "', argument " "1"" of type '" "FEC_DFGBindingRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGBindingExecute" "', argument " "2"" of type '" "FEC_LockType""'");
  } 
  arg2 = static_cast< FEC_LockType >(val2);
  {
    try {
      FEC_DFGBindingExecute(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGBindingSetNotificationCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGBindingRef arg1 = (FEC_DFGBindingRef) 0 ;
  FEC_DFGNotificationCallback arg2 = (FEC_DFGNotificationCallback) 0 ;
  void *arg3 = (void *) 0 ;
  int res1 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGBindingSetNotificationCallback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGBindingSetNotificationCallback" "', argument " "1"" of type '" "FEC_DFGBindingRef""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "FEC_DFGBindingSetNotificationCallback" "', argument " "2"" of type '" "FEC_DFGNotificationCallback""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_DFGBindingSetNotificationCallback" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      FEC_DFGBindingSetNotificationCallback(arg1,arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGBindingExportJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGBindingRef arg1 = (FEC_DFGBindingRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGBindingExportJSON",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGBindingExportJSON" "', argument " "1"" of type '" "FEC_DFGBindingRef""'"); 
  }
  {
    try {
      result = (FEC_StringRef)FEC_DFGBindingExportJSON(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGBindingDeallocValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGBindingRef arg1 = (FEC_DFGBindingRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGBindingDeallocValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGBindingDeallocValues" "', argument " "1"" of type '" "FEC_DFGBindingRef""'"); 
  }
  {
    try {
      FEC_DFGBindingDeallocValues(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGBindingGetMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGBindingRef arg1 = (FEC_DFGBindingRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGBindingGetMetadata",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGBindingGetMetadata" "', argument " "1"" of type '" "FEC_DFGBindingRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FEC_DFGBindingGetMetadata(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGBindingSetMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGBindingRef arg1 = (FEC_DFGBindingRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DFGBindingSetMetadata",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGBindingSetMetadata" "', argument " "1"" of type '" "FEC_DFGBindingRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FEC_DFGBindingSetMetadata" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      FEC_DFGBindingSetMetadata(arg1,(char const *)arg2,(char const *)arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGBindingGetVars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGBindingRef arg1 = (FEC_DFGBindingRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGBindingGetVars",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGBindingGetVars" "', argument " "1"" of type '" "FEC_DFGBindingRef""'"); 
  }
  {
    try {
      result = (FEC_StringRef)FEC_DFGBindingGetVars(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGBindingGetVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGBindingRef arg1 = (FEC_DFGBindingRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGBindingGetVersion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGBindingGetVersion" "', argument " "1"" of type '" "FEC_DFGBindingRef""'"); 
  }
  {
    try {
      result = (uint32_t)FEC_DFGBindingGetVersion(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_DFGExecType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecGetType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetType" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (FEC_DFGExecType)FEC_DFGExecGetType(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetNodeType_Path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DFGNodeType result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetNodeType_Path",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetNodeType_Path" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_DFGNodeType)FEC_DFGExecGetNodeType_Path(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetHost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_DFGHostRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecGetHost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetHost" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (FEC_DFGHostRef)FEC_DFGExecGetHost(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetSubExec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DFGExecRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetSubExec",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetSubExec" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_DFGExecRef)FEC_DFGExecGetSubExec(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecAddDebugNodePort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecAddDebugNodePort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecAddDebugNodePort" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DFGExecAddDebugNodePort(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetDebugNodePortValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetDebugNodePortValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetDebugNodePortValue" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_RTValRef)FEC_DFGExecGetDebugNodePortValue(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecRemoveDebugNodePort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecRemoveDebugNodePort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecRemoveDebugNodePort" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DFGExecRemoveDebugNodePort(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetErrorCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecGetErrorCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetErrorCount" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (unsigned int)FEC_DFGExecGetErrorCount(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetError",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetError" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecGetError" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (char *)FEC_DFGExecGetError(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecHaveExecPort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecHaveExecPort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecHaveExecPort" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (int)FEC_DFGExecHaveExecPort(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetExecPortCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecGetExecPortCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetExecPortCount" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (unsigned int)FEC_DFGExecGetExecPortCount(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetExecPortName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetExecPortName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetExecPortName" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecGetExecPortName" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (char *)FEC_DFGExecGetExecPortName(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetNodeCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecGetNodeCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetNodeCount" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (unsigned int)FEC_DFGExecGetNodeCount(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetNodeName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetNodeName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetNodeName" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecGetNodeName" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (char *)FEC_DFGExecGetNodeName(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetNodeType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DFGNodeType result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetNodeType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetNodeType" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecGetNodeType" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (FEC_DFGNodeType)FEC_DFGExecGetNodeType(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetInstExec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DFGExecRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetInstExec",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetInstExec" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecGetInstExec" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (FEC_DFGExecRef)FEC_DFGExecGetInstExec(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetDesc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecGetDesc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetDesc" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (FEC_StringRef)FEC_DFGExecGetDesc(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetExecPortDesc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetExecPortDesc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetExecPortDesc" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_StringRef)FEC_DFGExecGetExecPortDesc(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetNodeDesc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetNodeDesc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetNodeDesc" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_StringRef)FEC_DFGExecGetNodeDesc(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetNodePortDesc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetNodePortDesc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetNodePortDesc" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_StringRef)FEC_DFGExecGetNodePortDesc(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetExecPortResolvedType_Index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetExecPortResolvedType_Index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetExecPortResolvedType_Index" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecGetExecPortResolvedType_Index" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (char *)FEC_DFGExecGetExecPortResolvedType_Index(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetExecPortResolvedType_Path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetExecPortResolvedType_Path",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetExecPortResolvedType_Path" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FEC_DFGExecGetExecPortResolvedType_Path(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecIsExecPortResolvedType_Index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecIsExecPortResolvedType_Index",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecIsExecPortResolvedType_Index" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecIsExecPortResolvedType_Index" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (int)FEC_DFGExecIsExecPortResolvedType_Index(arg1,arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetNodePortResolvedType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetNodePortResolvedType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetNodePortResolvedType" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FEC_DFGExecGetNodePortResolvedType(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecExportJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecExportJSON",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecExportJSON" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (FEC_StringRef)FEC_DFGExecExportJSON(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecAddInstFromPreset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecAddInstFromPreset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecAddInstFromPreset" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FEC_DFGExecAddInstFromPreset(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecAddInstWithNewGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecAddInstWithNewGraph",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecAddInstWithNewGraph" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FEC_DFGExecAddInstWithNewGraph(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecAddInstWithNewFunc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecAddInstWithNewFunc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecAddInstWithNewFunc" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FEC_DFGExecAddInstWithNewFunc(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecAddVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DFGExecAddVar",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecAddVar" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    try {
      result = (char *)FEC_DFGExecAddVar(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecAddGet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecAddGet",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecAddGet" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (char *)FEC_DFGExecAddGet(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecAddSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecAddSet",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecAddSet" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (char *)FEC_DFGExecAddSet(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetVarValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetVarValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetVarValue" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_RTValRef)FEC_DFGExecGetVarValue(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetVarValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  FEC_RTValRef arg3 = (FEC_RTValRef) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecSetVarValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetVarValue" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_DFGExecSetVarValue" "', argument " "3"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      FEC_DFGExecSetVarValue(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetRefVarPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetRefVarPath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetRefVarPath" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FEC_DFGExecGetRefVarPath(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetRefVarPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DFGExecSetRefVarPath",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetRefVarPath" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FEC_DFGExecSetRefVarPath" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      FEC_DFGExecSetRefVarPath(arg1,(char const *)arg2,(char const *)arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecAddUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecAddUser",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecAddUser" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FEC_DFGExecAddUser(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetPortDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecGetPortDefaultValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetPortDefaultValue" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (FEC_RTValRef)FEC_DFGExecGetPortDefaultValue(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetInstPortResolvedDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecGetInstPortResolvedDefaultValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetInstPortResolvedDefaultValue" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (FEC_RTValRef)FEC_DFGExecGetInstPortResolvedDefaultValue(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetPortDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  FEC_RTValRef arg3 = (FEC_RTValRef) 0 ;
  int arg4 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DFGExecSetPortDefaultValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetPortDefaultValue" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_DFGExecSetPortDefaultValue" "', argument " "3"" of type '" "FEC_RTValRef""'"); 
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FEC_DFGExecSetPortDefaultValue" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      FEC_DFGExecSetPortDefaultValue(arg1,(char const *)arg2,arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecRemoveExecPort_Path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecRemoveExecPort_Path",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecRemoveExecPort_Path" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DFGExecRemoveExecPort_Path(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecRemoveExecPort_Index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecRemoveExecPort_Index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecRemoveExecPort_Index" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecRemoveExecPort_Index" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      FEC_DFGExecRemoveExecPort_Index(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecRemoveNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecRemoveNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecRemoveNode" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DFGExecRemoveNode(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecAttachPresetFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DFGExecAttachPresetFile",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecAttachPresetFile" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FEC_DFGExecAttachPresetFile" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (char *)FEC_DFGExecAttachPresetFile(arg1,(char const *)arg2,(char const *)arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecAddInstFromJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecAddInstFromJSON",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecAddInstFromJSON" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FEC_DFGExecAddInstFromJSON(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecAddExtDep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecAddExtDep",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecAddExtDep" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      FEC_DFGExecAddExtDep(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetExtDeps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  uint32_t arg2 ;
  char **arg3 = (char **) 0 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecSetExtDeps",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetExtDeps" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecSetExtDeps" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_DFGExecSetExtDeps" "', argument " "3"" of type '" "char const **""'"); 
  }
  arg3 = reinterpret_cast< char ** >(argp3);
  {
    try {
      FEC_DFGExecSetExtDeps(arg1,arg2,(char const **)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetExtDeps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecGetExtDeps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetExtDeps" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (FEC_StringRef)FEC_DFGExecGetExtDeps(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetExtDepCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecGetExtDepCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetExtDepCount" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (unsigned int)FEC_DFGExecGetExtDepCount(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetExtDepName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetExtDepName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetExtDepName" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecGetExtDepName" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (char *)FEC_DFGExecGetExtDepName(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetExtDepVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetExtDepVersion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetExtDepVersion" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecGetExtDepVersion" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (FEC_StringRef)FEC_DFGExecGetExtDepVersion(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecRemoveExtDep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecRemoveExtDep",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecRemoveExtDep" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DFGExecRemoveExtDep(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecAddExecPort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  FEC_DFGPortType arg3 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DFGExecAddExecPort",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecAddExecPort" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DFGExecAddExecPort" "', argument " "3"" of type '" "FEC_DFGPortType""'");
  } 
  arg3 = static_cast< FEC_DFGPortType >(val3);
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    try {
      result = (char *)FEC_DFGExecAddExecPort(arg1,(char const *)arg2,arg3,(char const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecReorderExecPorts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecReorderExecPorts",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecReorderExecPorts" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecReorderExecPorts" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_DFGExecReorderExecPorts" "', argument " "3"" of type '" "unsigned int const *""'"); 
  }
  arg3 = reinterpret_cast< unsigned int * >(argp3);
  {
    try {
      FEC_DFGExecReorderExecPorts(arg1,arg2,(unsigned int const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetCacheRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_DFGCacheRule result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecGetCacheRule",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetCacheRule" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (FEC_DFGCacheRule)FEC_DFGExecGetCacheRule(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetCacheRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  FEC_DFGCacheRule arg2 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecSetCacheRule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetCacheRule" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecSetCacheRule" "', argument " "2"" of type '" "FEC_DFGCacheRule""'");
  } 
  arg2 = static_cast< FEC_DFGCacheRule >(val2);
  {
    try {
      FEC_DFGExecSetCacheRule(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetInstCacheRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DFGCacheRule result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetInstCacheRule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetInstCacheRule" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_DFGCacheRule)FEC_DFGExecGetInstCacheRule(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetInstCacheRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  FEC_DFGCacheRule arg3 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecSetInstCacheRule",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetInstCacheRule" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DFGExecSetInstCacheRule" "', argument " "3"" of type '" "FEC_DFGCacheRule""'");
  } 
  arg3 = static_cast< FEC_DFGCacheRule >(val3);
  {
    try {
      FEC_DFGExecSetInstCacheRule(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecIsConnectedTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecIsConnectedTo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecIsConnectedTo" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (int)FEC_DFGExecIsConnectedTo(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecHasSrcPort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecHasSrcPort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecHasSrcPort" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (int)FEC_DFGExecHasSrcPort(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecHasDstPorts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecHasDstPorts",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecHasDstPorts" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (int)FEC_DFGExecHasDstPorts(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecCanConnectTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DFGExecCanConnectTo",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecCanConnectTo" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    try {
      result = (FEC_StringRef)FEC_DFGExecCanConnectTo(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecConnectTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecConnectTo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecConnectTo" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      FEC_DFGExecConnectTo(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecDisconnectFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecDisconnectFrom",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecDisconnectFrom" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      FEC_DFGExecDisconnectFrom(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecDisconnectFromAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecDisconnectFromAll",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecDisconnectFromAll" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DFGExecDisconnectFromAll(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecRenameExecPort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecRenameExecPort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecRenameExecPort" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (char *)FEC_DFGExecRenameExecPort(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecRenameNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecRenameNode",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecRenameNode" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (char *)FEC_DFGExecRenameNode(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetTitle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecGetTitle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetTitle" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (char *)FEC_DFGExecGetTitle(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetTitle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecSetTitle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetTitle" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DFGExecSetTitle(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecSetVersion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetVersion" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DFGExecSetVersion(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetInstTitle_Index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetInstTitle_Index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetInstTitle_Index" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecGetInstTitle_Index" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (char *)FEC_DFGExecGetInstTitle_Index(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetInstTitle_Path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetInstTitle_Path",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetInstTitle_Path" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FEC_DFGExecGetInstTitle_Path(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetInstTitle_Index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecSetInstTitle_Index",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetInstTitle_Index" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecSetInstTitle_Index" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      FEC_DFGExecSetInstTitle_Index(arg1,arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetInstTitle_Path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecSetInstTitle_Path",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetInstTitle_Path" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      FEC_DFGExecSetInstTitle_Path(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetImportPathname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecGetImportPathname",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetImportPathname" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (char *)FEC_DFGExecGetImportPathname(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetImportPathname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecSetImportPathname",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetImportPathname" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DFGExecSetImportPathname(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecGetCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetCode" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (char *)FEC_DFGExecGetCode(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecSetCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetCode" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DFGExecSetCode(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  uint32_t *arg4 = (uint32_t *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DFGExecGetMetadata",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetMetadata" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_DFGExecGetMetadata" "', argument " "3"" of type '" "char const **""'"); 
  }
  arg3 = reinterpret_cast< char ** >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_DFGExecGetMetadata" "', argument " "4"" of type '" "uint32_t *""'"); 
  }
  arg4 = reinterpret_cast< uint32_t * >(argp4);
  {
    try {
      FEC_DFGExecGetMetadata(arg1,(char const *)arg2,(char const **)arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetExecPortMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char **arg4 = (char **) 0 ;
  uint32_t *arg5 = (uint32_t *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FEC_DFGExecGetExecPortMetadata",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetExecPortMetadata" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_DFGExecGetExecPortMetadata" "', argument " "4"" of type '" "char const **""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FEC_DFGExecGetExecPortMetadata" "', argument " "5"" of type '" "uint32_t *""'"); 
  }
  arg5 = reinterpret_cast< uint32_t * >(argp5);
  {
    try {
      FEC_DFGExecGetExecPortMetadata(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetNodeMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char **arg4 = (char **) 0 ;
  uint32_t *arg5 = (uint32_t *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FEC_DFGExecGetNodeMetadata",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetNodeMetadata" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_DFGExecGetNodeMetadata" "', argument " "4"" of type '" "char const **""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FEC_DFGExecGetNodeMetadata" "', argument " "5"" of type '" "uint32_t *""'"); 
  }
  arg5 = reinterpret_cast< uint32_t * >(argp5);
  {
    try {
      FEC_DFGExecGetNodeMetadata(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetNodePortMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char **arg4 = (char **) 0 ;
  uint32_t *arg5 = (uint32_t *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FEC_DFGExecGetNodePortMetadata",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetNodePortMetadata" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_DFGExecGetNodePortMetadata" "', argument " "4"" of type '" "char const **""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FEC_DFGExecGetNodePortMetadata" "', argument " "5"" of type '" "uint32_t *""'"); 
  }
  arg5 = reinterpret_cast< uint32_t * >(argp5);
  {
    try {
      FEC_DFGExecGetNodePortMetadata(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FEC_DFGExecSetMetadata",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetMetadata" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FEC_DFGExecSetMetadata" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FEC_DFGExecSetMetadata" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      FEC_DFGExecSetMetadata(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetExecPortMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:FEC_DFGExecSetExecPortMetadata",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetExecPortMetadata" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FEC_DFGExecSetExecPortMetadata" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FEC_DFGExecSetExecPortMetadata" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      FEC_DFGExecSetExecPortMetadata(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetNodeMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:FEC_DFGExecSetNodeMetadata",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetNodeMetadata" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FEC_DFGExecSetNodeMetadata" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FEC_DFGExecSetNodeMetadata" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      FEC_DFGExecSetNodeMetadata(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetNodePortMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:FEC_DFGExecSetNodePortMetadata",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetNodePortMetadata" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FEC_DFGExecSetNodePortMetadata" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FEC_DFGExecSetNodePortMetadata" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      FEC_DFGExecSetNodePortMetadata(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecBind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  uint32_t arg2 ;
  FEC_RTValRef *arg3 = (FEC_RTValRef *) 0 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FEC_DFGBindingRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecBind",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecBind" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecBind" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_DFGExecBind" "', argument " "3"" of type '" "FEC_RTValRef const *""'"); 
  }
  arg3 = reinterpret_cast< FEC_RTValRef * >(argp3);
  {
    try {
      result = (FEC_DFGBindingRef)FEC_DFGExecBind(arg1,arg2,(void *const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecCreateView(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  FEC_DFGNotificationCallback arg2 = (FEC_DFGNotificationCallback) 0 ;
  void *arg3 = (void *) 0 ;
  int res1 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FEC_DFGViewRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecCreateView",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecCreateView" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "FEC_DFGExecCreateView" "', argument " "2"" of type '" "FEC_DFGNotificationCallback""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_DFGExecCreateView" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (FEC_DFGViewRef)FEC_DFGExecCreateView(arg1,arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetNodePortType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DFGPortType result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetNodePortType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetNodePortType" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_DFGPortType)FEC_DFGExecGetNodePortType(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetExecPortType_Index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DFGPortType result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetExecPortType_Index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetExecPortType_Index" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecGetExecPortType_Index" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (FEC_DFGPortType)FEC_DFGExecGetExecPortType_Index(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetExecPortType_Path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DFGPortType result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetExecPortType_Path",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetExecPortType_Path" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_DFGPortType)FEC_DFGExecGetExecPortType_Path(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetExecPortType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  FEC_DFGPortType arg3 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecSetExecPortType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetExecPortType" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DFGExecSetExecPortType" "', argument " "3"" of type '" "FEC_DFGPortType""'");
  } 
  arg3 = static_cast< FEC_DFGPortType >(val3);
  {
    try {
      FEC_DFGExecSetExecPortType(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetExecPortTypeSpec_Index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetExecPortTypeSpec_Index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetExecPortTypeSpec_Index" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecGetExecPortTypeSpec_Index" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (char *)FEC_DFGExecGetExecPortTypeSpec_Index(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetExecPortTypeSpec_Path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetExecPortTypeSpec_Path",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetExecPortTypeSpec_Path" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FEC_DFGExecGetExecPortTypeSpec_Path(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetExecPortTypeSpec_Index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecSetExecPortTypeSpec_Index",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetExecPortTypeSpec_Index" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecSetExecPortTypeSpec_Index" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      FEC_DFGExecSetExecPortTypeSpec_Index(arg1,arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetExecPortTypeSpec_Path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecSetExecPortTypeSpec_Path",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetExecPortTypeSpec_Path" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      FEC_DFGExecSetExecPortTypeSpec_Path(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetExecPortName_Index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetExecPortName_Index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetExecPortName_Index" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecGetExecPortName_Index" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (char *)FEC_DFGExecGetExecPortName_Index(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetExecPortName_Path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetExecPortName_Path",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetExecPortName_Path" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FEC_DFGExecGetExecPortName_Path(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetNodePortCount_Path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetNodePortCount_Path",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetNodePortCount_Path" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (unsigned int)FEC_DFGExecGetNodePortCount_Path(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetNodePortName_Index_Index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecGetNodePortName_Index_Index",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetNodePortName_Index_Index" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DFGExecGetNodePortName_Index_Index" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DFGExecGetNodePortName_Index_Index" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (char *)FEC_DFGExecGetNodePortName_Index_Index(arg1,arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetNodePortName_Path_Index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecGetNodePortName_Path_Index",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetNodePortName_Path_Index" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DFGExecGetNodePortName_Path_Index" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (char *)FEC_DFGExecGetNodePortName_Path_Index(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetNodePortName_Path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecGetNodePortName_Path",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetNodePortName_Path" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FEC_DFGExecGetNodePortName_Path(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecExportNodesJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  uint32_t arg2 ;
  char **arg3 = (char **) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecExportNodesJSON",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecExportNodesJSON" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    int i;
    if (!PyList_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expecting a list");
      return NULL;
    }
    arg2 = PyList_Size(obj1);
    arg3 = (char **) alloca((arg2+1)*sizeof(char *));
    for (i = 0; i < arg2; i++) {
      PyObject *s = PyList_GetItem(obj1,i);
      if (!PyString_Check(s) && !PyUnicode_Check(s)) {
        PyErr_SetString(PyExc_ValueError, "List items must be strings");
        return NULL;
      }
      arg3[i] = PyString_AsString(s);
    }
    arg3[i] = 0;
  }
  {
    try {
      result = (FEC_StringRef)FEC_DFGExecExportNodesJSON(arg1,arg2,(char const *const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecImportNodesJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecImportNodesJSON",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecImportNodesJSON" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_StringRef)FEC_DFGExecImportNodesJSON(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecImplodeNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  char **arg4 = (char **) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DFGExecImplodeNodes",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecImplodeNodes" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    int i;
    if (!PyList_Check(obj2)) {
      PyErr_SetString(PyExc_ValueError, "Expecting a list");
      return NULL;
    }
    arg3 = PyList_Size(obj2);
    arg4 = (char **) alloca((arg3+1)*sizeof(char *));
    for (i = 0; i < arg3; i++) {
      PyObject *s = PyList_GetItem(obj2,i);
      if (!PyString_Check(s) && !PyUnicode_Check(s)) {
        PyErr_SetString(PyExc_ValueError, "List items must be strings");
        return NULL;
      }
      arg4[i] = PyString_AsString(s);
    }
    arg4[i] = 0;
  }
  {
    try {
      result = (char *)FEC_DFGExecImplodeNodes(arg1,(char const *)arg2,arg3,(char const *const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecExplodeNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecExplodeNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecExplodeNode" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_StringRef)FEC_DFGExecExplodeNode(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetPresetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecGetPresetName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetPresetName" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (char *)FEC_DFGExecGetPresetName(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetPresetGUID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecGetPresetGUID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetPresetGUID" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (FEC_StringRef)FEC_DFGExecGetPresetGUID(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecGetOrigPresetGUID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_StringRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecGetOrigPresetGUID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecGetOrigPresetGUID" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (FEC_StringRef)FEC_DFGExecGetOrigPresetGUID(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecSetPresetGUID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DFGExecSetPresetGUID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecSetPresetGUID" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DFGExecSetPresetGUID(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecEditWouldSplitFromPreset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecEditWouldSplitFromPreset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecEditWouldSplitFromPreset" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      result = (int)FEC_DFGExecEditWouldSplitFromPreset(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DFGExecMaybeSplitFromPreset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGExecRef arg1 = (FEC_DFGExecRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DFGExecMaybeSplitFromPreset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DFGExecMaybeSplitFromPreset" "', argument " "1"" of type '" "FEC_DFGExecRef""'"); 
  }
  {
    try {
      FEC_DFGExecMaybeSplitFromPreset(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGCompiledObjectGetContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGCompiledObjectRef arg1 = (FEC_DGCompiledObjectRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_ContextRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGCompiledObjectGetContext",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGCompiledObjectGetContext" "', argument " "1"" of type '" "FEC_DGCompiledObjectRef""'"); 
  }
  {
    try {
      result = (FEC_ContextRef)FEC_DGCompiledObjectGetContext(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGCompiledObjectPrepareForExecution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGCompiledObjectRef arg1 = (FEC_DGCompiledObjectRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGCompiledObjectPrepareForExecution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGCompiledObjectPrepareForExecution" "', argument " "1"" of type '" "FEC_DGCompiledObjectRef""'"); 
  }
  {
    try {
      FEC_DGCompiledObjectPrepareForExecution(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGCompiledObjectGetErrors_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGCompiledObjectRef arg1 = (FEC_DGCompiledObjectRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGCompiledObjectGetErrors_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGCompiledObjectGetErrors_Variant" "', argument " "1"" of type '" "FEC_DGCompiledObjectRef""'"); 
  }
  {
    try {
      result = FEC_DGCompiledObjectGetErrors_Variant(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FEC_Variant(static_cast< const FEC_Variant& >(result))), SWIGTYPE_p_FEC_Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGBindingCreateEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_DGBindingRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGBindingCreateEmpty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGBindingCreateEmpty" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    try {
      result = (FEC_DGBindingRef)FEC_DGBindingCreateEmpty(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGBindingCreate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGOperatorRef arg1 = (FEC_DGOperatorRef) 0 ;
  uint32_t arg2 ;
  char **arg3 = (char **) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DGBindingRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGBindingCreate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGBindingCreate" "', argument " "1"" of type '" "FEC_DGOperatorRef""'"); 
  }
  {
    int i;
    if (!PyList_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expecting a list");
      return NULL;
    }
    arg2 = PyList_Size(obj1);
    arg3 = (char **) alloca((arg2+1)*sizeof(char *));
    for (i = 0; i < arg2; i++) {
      PyObject *s = PyList_GetItem(obj1,i);
      if (!PyString_Check(s) && !PyUnicode_Check(s)) {
        PyErr_SetString(PyExc_ValueError, "List items must be strings");
        return NULL;
      }
      arg3[i] = PyString_AsString(s);
    }
    arg3[i] = 0;
  }
  {
    try {
      result = (FEC_DGBindingRef)FEC_DGBindingCreate(arg1,arg2,(char const **)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  {
    
  }
  return resultobj;
fail:
  {
    
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGBindingSetOperator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGBindingRef arg1 = (FEC_DGBindingRef) 0 ;
  FEC_DGOperatorRef arg2 = (FEC_DGOperatorRef) 0 ;
  int res1 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGBindingSetOperator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGBindingSetOperator" "', argument " "1"" of type '" "FEC_DGBindingRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_DGBindingSetOperator" "', argument " "2"" of type '" "FEC_DGOperatorRef""'"); 
  }
  {
    try {
      FEC_DGBindingSetOperator(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGBindingGetOperator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGBindingRef arg1 = (FEC_DGBindingRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_DGOperatorRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGBindingGetOperator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGBindingGetOperator" "', argument " "1"" of type '" "FEC_DGBindingRef""'"); 
  }
  {
    try {
      result = (FEC_DGOperatorRef)FEC_DGBindingGetOperator(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGBindingSetParameterLayout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGBindingRef arg1 = (FEC_DGBindingRef) 0 ;
  uint32_t arg2 ;
  char **arg3 = (char **) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGBindingSetParameterLayout",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGBindingSetParameterLayout" "', argument " "1"" of type '" "FEC_DGBindingRef""'"); 
  }
  {
    int i;
    if (!PyList_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expecting a list");
      return NULL;
    }
    arg2 = PyList_Size(obj1);
    arg3 = (char **) alloca((arg2+1)*sizeof(char *));
    for (i = 0; i < arg2; i++) {
      PyObject *s = PyList_GetItem(obj1,i);
      if (!PyString_Check(s) && !PyUnicode_Check(s)) {
        PyErr_SetString(PyExc_ValueError, "List items must be strings");
        return NULL;
      }
      arg3[i] = PyString_AsString(s);
    }
    arg3[i] = 0;
  }
  {
    try {
      FEC_DGBindingSetParameterLayout(arg1,arg2,(char const **)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    
  }
  return resultobj;
fail:
  {
    
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGBindingGetParameterLayout_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGBindingRef arg1 = (FEC_DGBindingRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGBindingGetParameterLayout_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGBindingGetParameterLayout_Variant" "', argument " "1"" of type '" "FEC_DGBindingRef""'"); 
  }
  {
    try {
      result = FEC_DGBindingGetParameterLayout_Variant(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FEC_Variant(static_cast< const FEC_Variant& >(result))), SWIGTYPE_p_FEC_Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGNamedObjectDestroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGNamedObjectRef arg1 = (FEC_DGNamedObjectRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGNamedObjectDestroy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGNamedObjectDestroy" "', argument " "1"" of type '" "FEC_DGNamedObjectRef""'"); 
  }
  {
    try {
      FEC_DGNamedObjectDestroy(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGNamedObjectGetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGNamedObjectRef arg1 = (FEC_DGNamedObjectRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGNamedObjectGetName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGNamedObjectGetName" "', argument " "1"" of type '" "FEC_DGNamedObjectRef""'"); 
  }
  {
    try {
      result = (char *)FEC_DGNamedObjectGetName(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGNamedObjectGetByName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FEC_DGNamedObjectRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DGNamedObjectGetByName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGNamedObjectGetByName" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (FEC_DGNamedObjectRef)FEC_DGNamedObjectGetByName(arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerAddMember_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  FEC_Variant *arg4 = (FEC_Variant *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DGContainerAddMember_Variant",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerAddMember_Variant" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_DGContainerAddMember_Variant" "', argument " "4"" of type '" "FEC_Variant const *""'"); 
  }
  arg4 = reinterpret_cast< FEC_Variant * >(argp4);
  {
    try {
      FEC_DGContainerAddMember_Variant(arg1,(char const *)arg2,(char const *)arg3,(FEC_Variant const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerRemoveMember(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGContainerRemoveMember",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerRemoveMember" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DGContainerRemoveMember(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitWithDGContainerGetMembers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  FEC_DGContainerRef arg2 = (FEC_DGContainerRef) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitWithDGContainerGetMembers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitWithDGContainerGetMembers" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantInitWithDGContainerGetMembers" "', argument " "2"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    try {
      FEC_VariantInitWithDGContainerGetMembers(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerGetMemberType_cstr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGContainerGetMemberType_cstr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerGetMemberType_cstr" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FEC_DGContainerGetMemberType_cstr(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerGetMemberSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGContainerGetMemberSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerGetMemberSize" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (uint32_t)FEC_DGContainerGetMemberSize(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerGetMemberIsShallow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGContainerGetMemberIsShallow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerGetMemberIsShallow" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (int)FEC_DGContainerGetMemberIsShallow(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitWithDGContainerGetMemberDefaultData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  FEC_DGContainerRef arg2 = (FEC_DGContainerRef) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_VariantInitWithDGContainerGetMemberDefaultData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitWithDGContainerGetMemberDefaultData" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantInitWithDGContainerGetMemberDefaultData" "', argument " "2"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      FEC_VariantInitWithDGContainerGetMemberDefaultData(arg1,arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerGetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGContainerGetSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerGetSize" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    try {
      result = (uint32_t)FEC_DGContainerGetSize(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerSetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  uint32_t arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGContainerSetSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerSetSize" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DGContainerSetSize" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      FEC_DGContainerSetSize(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerGetMemberAllSlicesData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DGContainerGetMemberAllSlicesData",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerGetMemberAllSlicesData" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DGContainerGetMemberAllSlicesData" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_DGContainerGetMemberAllSlicesData" "', argument " "4"" of type '" "void *""'"); 
  }
  {
    try {
      FEC_DGContainerGetMemberAllSlicesData(arg1,(char const *)arg2,arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerSetMemberAllSlicesData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DGContainerSetMemberAllSlicesData",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerSetMemberAllSlicesData" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DGContainerSetMemberAllSlicesData" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_DGContainerSetMemberAllSlicesData" "', argument " "4"" of type '" "void const *""'"); 
  }
  {
    try {
      FEC_DGContainerSetMemberAllSlicesData(arg1,(char const *)arg2,arg3,(void const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerGetMemberSliceData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  void *arg5 = (void *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FEC_DGContainerGetMemberSliceData",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerGetMemberSliceData" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DGContainerGetMemberSliceData" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FEC_DGContainerGetMemberSliceData" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FEC_DGContainerGetMemberSliceData" "', argument " "5"" of type '" "void *""'"); 
  }
  {
    try {
      FEC_DGContainerGetMemberSliceData(arg1,(char const *)arg2,arg3,arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerSetMemberSliceData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  void *arg5 = (void *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FEC_DGContainerSetMemberSliceData",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerSetMemberSliceData" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DGContainerSetMemberSliceData" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FEC_DGContainerSetMemberSliceData" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FEC_DGContainerSetMemberSliceData" "', argument " "5"" of type '" "void const *""'"); 
  }
  {
    try {
      FEC_DGContainerSetMemberSliceData(arg1,(char const *)arg2,arg3,arg4,(void const *)arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerGetMemberSliceArraySize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DGContainerGetMemberSliceArraySize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerGetMemberSliceArraySize" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DGContainerGetMemberSliceArraySize" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = (uint32_t)FEC_DGContainerGetMemberSliceArraySize(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerSetMemberSliceArraySize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DGContainerSetMemberSliceArraySize",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerSetMemberSliceArraySize" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DGContainerSetMemberSliceArraySize" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FEC_DGContainerSetMemberSliceArraySize" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  {
    try {
      FEC_DGContainerSetMemberSliceArraySize(arg1,(char const *)arg2,arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerGetMemberSliceArrayData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  void *arg5 = (void *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FEC_DGContainerGetMemberSliceArrayData",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerGetMemberSliceArrayData" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DGContainerGetMemberSliceArrayData" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FEC_DGContainerGetMemberSliceArrayData" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FEC_DGContainerGetMemberSliceArrayData" "', argument " "5"" of type '" "void *""'"); 
  }
  {
    try {
      FEC_DGContainerGetMemberSliceArrayData(arg1,(char const *)arg2,arg3,arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerSetMemberSliceArrayData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  void *arg5 = (void *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FEC_DGContainerSetMemberSliceArrayData",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerSetMemberSliceArrayData" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DGContainerSetMemberSliceArrayData" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FEC_DGContainerSetMemberSliceArrayData" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FEC_DGContainerSetMemberSliceArrayData" "', argument " "5"" of type '" "void const *""'"); 
  }
  {
    try {
      FEC_DGContainerSetMemberSliceArrayData(arg1,(char const *)arg2,arg3,arg4,(void const *)arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerGetMemberSliceData_Float32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DGContainerGetMemberSliceData_Float32",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerGetMemberSliceData_Float32" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DGContainerGetMemberSliceData_Float32" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = (float)FEC_DGContainerGetMemberSliceData_Float32(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerSetMemberSliceData_Float32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  float arg4 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DGContainerSetMemberSliceData_Float32",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerSetMemberSliceData_Float32" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DGContainerSetMemberSliceData_Float32" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FEC_DGContainerSetMemberSliceData_Float32" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      FEC_DGContainerSetMemberSliceData_Float32(arg1,(char const *)arg2,arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitWithDGContainerGetMemberSlice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  FEC_DGContainerRef arg2 = (FEC_DGContainerRef) 0 ;
  char *arg3 = (char *) 0 ;
  uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_VariantInitWithDGContainerGetMemberSlice",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitWithDGContainerGetMemberSlice" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantInitWithDGContainerGetMemberSlice" "', argument " "2"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FEC_VariantInitWithDGContainerGetMemberSlice" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  {
    try {
      FEC_VariantInitWithDGContainerGetMemberSlice(arg1,arg2,(char const *)arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerSetMemberSlice_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  FEC_Variant *arg4 = (FEC_Variant *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DGContainerSetMemberSlice_Variant",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerSetMemberSlice_Variant" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DGContainerSetMemberSlice_Variant" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_DGContainerSetMemberSlice_Variant" "', argument " "4"" of type '" "FEC_Variant const *""'"); 
  }
  arg4 = reinterpret_cast< FEC_Variant * >(argp4);
  {
    try {
      FEC_DGContainerSetMemberSlice_Variant(arg1,(char const *)arg2,arg3,(FEC_Variant const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerSetSlice_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  uint32_t arg2 ;
  FEC_Variant *arg3 = (FEC_Variant *) 0 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DGContainerSetSlice_Variant",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerSetSlice_Variant" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DGContainerSetSlice_Variant" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_DGContainerSetSlice_Variant" "', argument " "3"" of type '" "FEC_Variant const *""'"); 
  }
  arg3 = reinterpret_cast< FEC_Variant * >(argp3);
  {
    try {
      FEC_DGContainerSetSlice_Variant(arg1,arg2,(FEC_Variant const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerGetMemberSliceValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DGContainerGetMemberSliceValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerGetMemberSliceValue" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DGContainerGetMemberSliceValue" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = (FEC_RTValRef)FEC_DGContainerGetMemberSliceValue(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerSetMemberSliceValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  FEC_RTValRef arg4 = (FEC_RTValRef) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_DGContainerSetMemberSliceValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerSetMemberSliceValue" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DGContainerSetMemberSliceValue" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FEC_DGContainerSetMemberSliceValue" "', argument " "4"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      FEC_DGContainerSetMemberSliceValue(arg1,(char const *)arg2,arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerGetJSONStringValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGContainerGetJSONStringValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerGetJSONStringValue" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  {
    try {
      result = (FEC_RTValRef)FEC_DGContainerGetJSONStringValue(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGContainerSetJSONStringValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGContainerRef arg1 = (FEC_DGContainerRef) 0 ;
  FEC_RTValRef arg2 = (FEC_RTValRef) 0 ;
  int res1 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGContainerSetJSONStringValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGContainerSetJSONStringValue" "', argument " "1"" of type '" "FEC_DGContainerRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_DGContainerSetJSONStringValue" "', argument " "2"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      FEC_DGContainerSetJSONStringValue(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGOperatorCreate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  FEC_DGOperatorRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FEC_DGOperatorCreate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGOperatorCreate" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    if (PyString_Check(obj4) || obj4 == Py_None) {
      res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
    }
    else if (PyUnicode_Check(obj4)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj4);
      alloc5 = SWIG_NEWOBJ;
      res5 = SWIG_AsCharPtrAndSize(uniobj, &buf5, NULL, &alloc5);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5),
        "Error converting string or unicode argument to char *");
    }
    arg5 = buf5;
  }
  {
    try {
      result = (FEC_DGOperatorRef)FEC_DGOperatorCreate(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGOperatorCreateEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DGOperatorRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGOperatorCreateEmpty",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGOperatorCreateEmpty" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_DGOperatorRef)FEC_DGOperatorCreateEmpty(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGOperatorSetFilename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGOperatorRef arg1 = (FEC_DGOperatorRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGOperatorSetFilename",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGOperatorSetFilename" "', argument " "1"" of type '" "FEC_DGOperatorRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DGOperatorSetFilename(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGOperatorGetFilename_cstr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGOperatorRef arg1 = (FEC_DGOperatorRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGOperatorGetFilename_cstr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGOperatorGetFilename_cstr" "', argument " "1"" of type '" "FEC_DGOperatorRef""'"); 
  }
  {
    try {
      result = (char *)FEC_DGOperatorGetFilename_cstr(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGOperatorSetSourceCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGOperatorRef arg1 = (FEC_DGOperatorRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGOperatorSetSourceCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGOperatorSetSourceCode" "', argument " "1"" of type '" "FEC_DGOperatorRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DGOperatorSetSourceCode(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGOperatorGetSourceCode_cstr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGOperatorRef arg1 = (FEC_DGOperatorRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGOperatorGetSourceCode_cstr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGOperatorGetSourceCode_cstr" "', argument " "1"" of type '" "FEC_DGOperatorRef""'"); 
  }
  {
    try {
      result = (char *)FEC_DGOperatorGetSourceCode_cstr(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGOperatorSetEntryPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGOperatorRef arg1 = (FEC_DGOperatorRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGOperatorSetEntryPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGOperatorSetEntryPoint" "', argument " "1"" of type '" "FEC_DGOperatorRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DGOperatorSetEntryPoint(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGOperatorGetEntryPoint_cstr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGOperatorRef arg1 = (FEC_DGOperatorRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGOperatorGetEntryPoint_cstr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGOperatorGetEntryPoint_cstr" "', argument " "1"" of type '" "FEC_DGOperatorRef""'"); 
  }
  {
    try {
      result = (char *)FEC_DGOperatorGetEntryPoint_cstr(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGOperatorSetMainThreadOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGOperatorRef arg1 = (FEC_DGOperatorRef) 0 ;
  int arg2 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGOperatorSetMainThreadOnly",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGOperatorSetMainThreadOnly" "', argument " "1"" of type '" "FEC_DGOperatorRef""'"); 
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DGOperatorSetMainThreadOnly" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      FEC_DGOperatorSetMainThreadOnly(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGOperatorGetMainThreadOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGOperatorRef arg1 = (FEC_DGOperatorRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGOperatorGetMainThreadOnly",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGOperatorGetMainThreadOnly" "', argument " "1"" of type '" "FEC_DGOperatorRef""'"); 
  }
  {
    try {
      result = (int)FEC_DGOperatorGetMainThreadOnly(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitWithDGOperatorGetDiagnostics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  FEC_DGOperatorRef arg2 = (FEC_DGOperatorRef) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitWithDGOperatorGetDiagnostics",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitWithDGOperatorGetDiagnostics" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantInitWithDGOperatorGetDiagnostics" "', argument " "2"" of type '" "FEC_DGOperatorRef""'"); 
  }
  {
    try {
      FEC_VariantInitWithDGOperatorGetDiagnostics(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGOperatorExportKL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGOperatorRef arg1 = (FEC_DGOperatorRef) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DGOperatorExportKL",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGOperatorExportKL" "', argument " "1"" of type '" "FEC_DGOperatorRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DGOperatorExportKL" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      FEC_DGOperatorExportKL(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGOperatorImportKL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGOperatorRef arg1 = (FEC_DGOperatorRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGOperatorImportKL",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGOperatorImportKL" "', argument " "1"" of type '" "FEC_DGOperatorRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DGOperatorImportKL(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGNodeCreate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DGNodeRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGNodeCreate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGNodeCreate" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_DGNodeRef)FEC_DGNodeCreate(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGNodeAppendBinding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGNodeRef arg1 = (FEC_DGNodeRef) 0 ;
  FEC_DGBindingRef arg2 = (FEC_DGBindingRef) 0 ;
  int res1 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGNodeAppendBinding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGNodeAppendBinding" "', argument " "1"" of type '" "FEC_DGNodeRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_DGNodeAppendBinding" "', argument " "2"" of type '" "FEC_DGBindingRef""'"); 
  }
  {
    try {
      FEC_DGNodeAppendBinding(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGNodeGetBindingList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGNodeRef arg1 = (FEC_DGNodeRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_DGBindingListRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGNodeGetBindingList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGNodeGetBindingList" "', argument " "1"" of type '" "FEC_DGNodeRef""'"); 
  }
  {
    try {
      result = (FEC_DGBindingListRef)FEC_DGNodeGetBindingList(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGNodeEvaluate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_LockType arg1 ;
  FEC_DGNodeRef arg2 = (FEC_DGNodeRef) 0 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGNodeEvaluate",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FEC_DGNodeEvaluate" "', argument " "1"" of type '" "FEC_LockType""'");
  } 
  arg1 = static_cast< FEC_LockType >(val1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_DGNodeEvaluate" "', argument " "2"" of type '" "FEC_DGNodeRef""'"); 
  }
  {
    try {
      FEC_DGNodeEvaluate(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGNodeSetDependency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGNodeRef arg1 = (FEC_DGNodeRef) 0 ;
  char *arg2 = (char *) 0 ;
  FEC_DGNodeRef arg3 = (FEC_DGNodeRef) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DGNodeSetDependency",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGNodeSetDependency" "', argument " "1"" of type '" "FEC_DGNodeRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_DGNodeSetDependency" "', argument " "3"" of type '" "FEC_DGNodeRef""'"); 
  }
  {
    try {
      FEC_DGNodeSetDependency(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGNodeRemoveDependency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGNodeRef arg1 = (FEC_DGNodeRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGNodeRemoveDependency",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGNodeRemoveDependency" "', argument " "1"" of type '" "FEC_DGNodeRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DGNodeRemoveDependency(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGNodeGetDependencies_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGNodeRef arg1 = (FEC_DGNodeRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGNodeGetDependencies_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGNodeGetDependencies_Variant" "', argument " "1"" of type '" "FEC_DGNodeRef""'"); 
  }
  {
    try {
      result = FEC_DGNodeGetDependencies_Variant(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FEC_Variant(static_cast< const FEC_Variant& >(result))), SWIGTYPE_p_FEC_Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGNodeGetDependency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGNodeRef arg1 = (FEC_DGNodeRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DGNodeRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGNodeGetDependency",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGNodeGetDependency" "', argument " "1"" of type '" "FEC_DGNodeRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_DGNodeRef)FEC_DGNodeGetDependency(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGNodeSetDirty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGNodeRef arg1 = (FEC_DGNodeRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGNodeSetDirty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGNodeSetDirty" "', argument " "1"" of type '" "FEC_DGNodeRef""'"); 
  }
  {
    try {
      FEC_DGNodeSetDirty(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGBindingListAppend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGBindingListRef arg1 = (FEC_DGBindingListRef) 0 ;
  FEC_DGBindingRef arg2 = (FEC_DGBindingRef) 0 ;
  int res1 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGBindingListAppend",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGBindingListAppend" "', argument " "1"" of type '" "FEC_DGBindingListRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_DGBindingListAppend" "', argument " "2"" of type '" "FEC_DGBindingRef""'"); 
  }
  {
    try {
      FEC_DGBindingListAppend(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGBindingListInsert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGBindingListRef arg1 = (FEC_DGBindingListRef) 0 ;
  FEC_DGBindingRef arg2 = (FEC_DGBindingRef) 0 ;
  uint32_t arg3 ;
  int res1 ;
  int res2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DGBindingListInsert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGBindingListInsert" "', argument " "1"" of type '" "FEC_DGBindingListRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_DGBindingListInsert" "', argument " "2"" of type '" "FEC_DGBindingRef""'"); 
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_DGBindingListInsert" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      FEC_DGBindingListInsert(arg1,arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGBindingListRemove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGBindingListRef arg1 = (FEC_DGBindingListRef) 0 ;
  uint32_t arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGBindingListRemove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGBindingListRemove" "', argument " "1"" of type '" "FEC_DGBindingListRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DGBindingListRemove" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      FEC_DGBindingListRemove(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGBindingListGetBinding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGBindingListRef arg1 = (FEC_DGBindingListRef) 0 ;
  uint32_t arg2 ;
  int res1 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DGBindingRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGBindingListGetBinding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGBindingListGetBinding" "', argument " "1"" of type '" "FEC_DGBindingListRef""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FEC_DGBindingListGetBinding" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (FEC_DGBindingRef)FEC_DGBindingListGetBinding(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGBindingListGetLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGBindingListRef arg1 = (FEC_DGBindingListRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGBindingListGetLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGBindingListGetLength" "', argument " "1"" of type '" "FEC_DGBindingListRef""'"); 
  }
  {
    try {
      result = (uint32_t)FEC_DGBindingListGetLength(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventCreate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DGEventRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGEventCreate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventCreate" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_DGEventRef)FEC_DGEventCreate(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventRemoveEventHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventRef arg1 = (FEC_DGEventRef) 0 ;
  FEC_DGEventHandlerRef arg2 = (FEC_DGEventHandlerRef) 0 ;
  int res1 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGEventRemoveEventHandler",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventRemoveEventHandler" "', argument " "1"" of type '" "FEC_DGEventRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_DGEventRemoveEventHandler" "', argument " "2"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  {
    try {
      FEC_DGEventRemoveEventHandler(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventAppendEventHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventRef arg1 = (FEC_DGEventRef) 0 ;
  FEC_DGEventHandlerRef arg2 = (FEC_DGEventHandlerRef) 0 ;
  int res1 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGEventAppendEventHandler",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventAppendEventHandler" "', argument " "1"" of type '" "FEC_DGEventRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_DGEventAppendEventHandler" "', argument " "2"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  {
    try {
      FEC_DGEventAppendEventHandler(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventFire(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventRef arg1 = (FEC_DGEventRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGEventFire",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventFire" "', argument " "1"" of type '" "FEC_DGEventRef""'"); 
  }
  {
    try {
      FEC_DGEventFire(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventSetSelectType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventRef arg1 = (FEC_DGEventRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGEventSetSelectType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventSetSelectType" "', argument " "1"" of type '" "FEC_DGEventRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DGEventSetSelectType(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventGetSelectType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventRef arg1 = (FEC_DGEventRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGEventGetSelectType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventGetSelectType" "', argument " "1"" of type '" "FEC_DGEventRef""'"); 
  }
  {
    try {
      result = (char *)FEC_DGEventGetSelectType(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_VariantInitWithDGEventSelect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventRef arg1 = (FEC_DGEventRef) 0 ;
  FEC_Variant *arg2 = (FEC_Variant *) 0 ;
  int res1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_VariantInitWithDGEventSelect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_VariantInitWithDGEventSelect" "', argument " "1"" of type '" "FEC_DGEventRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_VariantInitWithDGEventSelect" "', argument " "2"" of type '" "FEC_Variant *""'"); 
  }
  arg2 = reinterpret_cast< FEC_Variant * >(argp2);
  {
    try {
      FEC_VariantInitWithDGEventSelect(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventGetEventHandlers_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventRef arg1 = (FEC_DGEventRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGEventGetEventHandlers_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventGetEventHandlers_Variant" "', argument " "1"" of type '" "FEC_DGEventRef""'"); 
  }
  {
    try {
      result = FEC_DGEventGetEventHandlers_Variant(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FEC_Variant(static_cast< const FEC_Variant& >(result))), SWIGTYPE_p_FEC_Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventHandlerCreate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DGEventHandlerRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGEventHandlerCreate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventHandlerCreate" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_DGEventHandlerRef)FEC_DGEventHandlerCreate(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventHandlerAppendChildEventHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventHandlerRef arg1 = (FEC_DGEventHandlerRef) 0 ;
  FEC_DGEventHandlerRef arg2 = (FEC_DGEventHandlerRef) 0 ;
  int res1 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGEventHandlerAppendChildEventHandler",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventHandlerAppendChildEventHandler" "', argument " "1"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_DGEventHandlerAppendChildEventHandler" "', argument " "2"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  {
    try {
      FEC_DGEventHandlerAppendChildEventHandler(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventHandlerRemoveChildEventHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventHandlerRef arg1 = (FEC_DGEventHandlerRef) 0 ;
  FEC_DGEventHandlerRef arg2 = (FEC_DGEventHandlerRef) 0 ;
  int res1 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGEventHandlerRemoveChildEventHandler",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventHandlerRemoveChildEventHandler" "', argument " "1"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_DGEventHandlerRemoveChildEventHandler" "', argument " "2"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  {
    try {
      FEC_DGEventHandlerRemoveChildEventHandler(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventHandlerAppendPreDescendBinding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventHandlerRef arg1 = (FEC_DGEventHandlerRef) 0 ;
  FEC_DGBindingRef arg2 = (FEC_DGBindingRef) 0 ;
  int res1 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGEventHandlerAppendPreDescendBinding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventHandlerAppendPreDescendBinding" "', argument " "1"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_DGEventHandlerAppendPreDescendBinding" "', argument " "2"" of type '" "FEC_DGBindingRef""'"); 
  }
  {
    try {
      FEC_DGEventHandlerAppendPreDescendBinding(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventHandlerGetPreDescendBindingList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventHandlerRef arg1 = (FEC_DGEventHandlerRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_DGBindingListRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGEventHandlerGetPreDescendBindingList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventHandlerGetPreDescendBindingList" "', argument " "1"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  {
    try {
      result = (FEC_DGBindingListRef)FEC_DGEventHandlerGetPreDescendBindingList(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventHandlerAppendPostDescendBinding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventHandlerRef arg1 = (FEC_DGEventHandlerRef) 0 ;
  FEC_DGBindingRef arg2 = (FEC_DGBindingRef) 0 ;
  int res1 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGEventHandlerAppendPostDescendBinding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventHandlerAppendPostDescendBinding" "', argument " "1"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_DGEventHandlerAppendPostDescendBinding" "', argument " "2"" of type '" "FEC_DGBindingRef""'"); 
  }
  {
    try {
      FEC_DGEventHandlerAppendPostDescendBinding(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventHandlerGetPostDescendBindingList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventHandlerRef arg1 = (FEC_DGEventHandlerRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_DGBindingListRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGEventHandlerGetPostDescendBindingList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventHandlerGetPostDescendBindingList" "', argument " "1"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  {
    try {
      result = (FEC_DGBindingListRef)FEC_DGEventHandlerGetPostDescendBindingList(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventHandlerSetScopeName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventHandlerRef arg1 = (FEC_DGEventHandlerRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGEventHandlerSetScopeName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventHandlerSetScopeName" "', argument " "1"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DGEventHandlerSetScopeName(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventHandlerGetScopeName_cstr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventHandlerRef arg1 = (FEC_DGEventHandlerRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGEventHandlerGetScopeName_cstr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventHandlerGetScopeName_cstr" "', argument " "1"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  {
    try {
      result = (char *)FEC_DGEventHandlerGetScopeName_cstr(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventHandlerSetScope(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventHandlerRef arg1 = (FEC_DGEventHandlerRef) 0 ;
  char *arg2 = (char *) 0 ;
  FEC_DGNodeRef arg3 = (FEC_DGNodeRef) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DGEventHandlerSetScope",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventHandlerSetScope" "', argument " "1"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_DGEventHandlerSetScope" "', argument " "3"" of type '" "FEC_DGNodeRef""'"); 
  }
  {
    try {
      FEC_DGEventHandlerSetScope(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventHandlerRemoveScope(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventHandlerRef arg1 = (FEC_DGEventHandlerRef) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEC_DGEventHandlerRemoveScope",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventHandlerRemoveScope" "', argument " "1"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      FEC_DGEventHandlerRemoveScope(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventHandlerSetSelector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventHandlerRef arg1 = (FEC_DGEventHandlerRef) 0 ;
  char *arg2 = (char *) 0 ;
  FEC_DGBindingRef arg3 = (FEC_DGBindingRef) 0 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_DGEventHandlerSetSelector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventHandlerSetSelector" "', argument " "1"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_DGEventHandlerSetSelector" "', argument " "3"" of type '" "FEC_DGBindingRef""'"); 
  }
  {
    try {
      FEC_DGEventHandlerSetSelector(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventHandlerGetChildEventHandlers_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventHandlerRef arg1 = (FEC_DGEventHandlerRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGEventHandlerGetChildEventHandlers_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventHandlerGetChildEventHandlers_Variant" "', argument " "1"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  {
    try {
      result = FEC_DGEventHandlerGetChildEventHandlers_Variant(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FEC_Variant(static_cast< const FEC_Variant& >(result))), SWIGTYPE_p_FEC_Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_DGEventHandlerGetScopes_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DGEventHandlerRef arg1 = (FEC_DGEventHandlerRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FEC_Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FEC_DGEventHandlerGetScopes_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_DGEventHandlerGetScopes_Variant" "', argument " "1"" of type '" "FEC_DGEventHandlerRef""'"); 
  }
  {
    try {
      result = FEC_DGEventHandlerGetScopes_Variant(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FEC_Variant(static_cast< const FEC_Variant& >(result))), SWIGTYPE_p_FEC_Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_GetKLJSONAST(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FEC_GetKLJSONAST",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_GetKLJSONAST" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FEC_GetKLJSONAST" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (FEC_RTValRef)FEC_GetKLJSONAST(arg1,(char const *)arg2,(char const *)arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_KLTokenStreamCreate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ClientRef arg1 = (FEC_ClientRef) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FEC_KLTokenStreamRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_KLTokenStreamCreate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_KLTokenStreamCreate" "', argument " "1"" of type '" "FEC_ClientRef""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FEC_KLTokenStreamCreate" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = (FEC_KLTokenStreamRef)FEC_KLTokenStreamCreate(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_KLTokenStreamGetNext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_KLTokenStreamRef arg1 = (FEC_KLTokenStreamRef) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  int res1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FEC_KLTokenType result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FEC_KLTokenStreamGetNext",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEC_KLTokenStreamGetNext" "', argument " "1"" of type '" "FEC_KLTokenStreamRef""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEC_KLTokenStreamGetNext" "', argument " "2"" of type '" "uint32_t *""'"); 
  }
  arg2 = reinterpret_cast< uint32_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FEC_KLTokenStreamGetNext" "', argument " "3"" of type '" "uint32_t *""'"); 
  }
  arg3 = reinterpret_cast< uint32_t * >(argp3);
  {
    try {
      result = (FEC_KLTokenType)FEC_KLTokenStreamGetNext(arg1,arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEC_GetFabricDir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":FEC_GetFabricDir")) SWIG_fail;
  {
    try {
      result = (char *)FEC_GetFabricDir();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_LockType_Shared_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LockType_Shared is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_LockType_Shared_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FabricCore::LockType_Shared));
  return pyobj;
}


SWIGINTERN int Swig_var_LockType_Exclusive_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LockType_Exclusive is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_LockType_Exclusive_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FabricCore::LockType_Exclusive));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":Initialize")) SWIG_fail;
  {
    try {
      FabricCore::Initialize();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Finalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":Finalize")) SWIG_fail;
  {
    try {
      FabricCore::Finalize();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetVersionMaj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":GetVersionMaj")) SWIG_fail;
  {
    try {
      result = (uint8_t)FabricCore::GetVersionMaj();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetVersionMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":GetVersionMin")) SWIG_fail;
  {
    try {
      result = (uint8_t)FabricCore::GetVersionMin();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetVersionRev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":GetVersionRev")) SWIG_fail;
  {
    try {
      result = (uint8_t)FabricCore::GetVersionRev();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetVersionStr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GetVersionStr")) SWIG_fail;
  {
    try {
      result = (char *)FabricCore::GetVersionStr();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Exception__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Exception *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Exception",&obj0)) SWIG_fail;
  {
    if (PyString_Check(obj0) || obj0 == Py_None) {
      res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
    }
    else if (PyUnicode_Check(obj0)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj0);
      alloc1 = SWIG_NEWOBJ;
      res1 = SWIG_AsCharPtrAndSize(uniobj, &buf1, NULL, &alloc1);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1),
        "Error converting string or unicode argument to char *");
    }
    arg1 = buf1;
  }
  {
    try {
      result = (FabricCore::Exception *)new FabricCore::Exception((char const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Exception, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Exception__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::Exception *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Exception",&obj0,&obj1)) SWIG_fail;
  {
    if (PyString_Check(obj0) || obj0 == Py_None) {
      res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
    }
    else if (PyUnicode_Check(obj0)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj0);
      alloc1 = SWIG_NEWOBJ;
      res1 = SWIG_AsCharPtrAndSize(uniobj, &buf1, NULL, &alloc1);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1),
        "Error converting string or unicode argument to char *");
    }
    arg1 = buf1;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Exception" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (FabricCore::Exception *)new FabricCore::Exception((char const *)arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Exception, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Exception__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Exception *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Exception *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Exception",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Exception,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Exception" "', argument " "1"" of type '" "FabricCore::Exception const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Exception" "', argument " "1"" of type '" "FabricCore::Exception const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Exception * >(argp1);
  {
    try {
      result = (FabricCore::Exception *)new FabricCore::Exception((FabricCore::Exception const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Exception, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Exception(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Exception, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Exception__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Exception__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Exception__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Exception'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::Exception(char const *)\n"
    "    FabricCore::Exception(char const *,uint32_t)\n"
    "    FabricCore::Exception(FabricCore::Exception const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Exception(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Exception *arg1 = (FabricCore::Exception *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Exception",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Exception, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Exception" "', argument " "1"" of type '" "FabricCore::Exception *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Exception * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exception_getDescData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Exception *arg1 = (FabricCore::Exception *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Exception_getDescData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Exception, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exception_getDescData" "', argument " "1"" of type '" "FabricCore::Exception const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Exception * >(argp1);
  {
    try {
      result = (char *)((FabricCore::Exception const *)arg1)->getDescData();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exception_getDescLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Exception *arg1 = (FabricCore::Exception *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Exception_getDescLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Exception, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exception_getDescLength" "', argument " "1"" of type '" "FabricCore::Exception const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Exception * >(argp1);
  {
    try {
      result = (uint32_t)((FabricCore::Exception const *)arg1)->getDescLength();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exception_getDesc_cstr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Exception *arg1 = (FabricCore::Exception *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Exception_getDesc_cstr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Exception, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exception_getDesc_cstr" "', argument " "1"" of type '" "FabricCore::Exception const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Exception * >(argp1);
  {
    try {
      result = (char *)((FabricCore::Exception const *)arg1)->getDesc_cstr();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exception_getDesc_stl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Exception *arg1 = (FabricCore::Exception *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Exception_getDesc_stl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Exception, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exception_getDesc_stl" "', argument " "1"" of type '" "FabricCore::Exception const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Exception * >(argp1);
  {
    try {
      result = ((FabricCore::Exception const *)arg1)->getDesc_stl();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exception_ClearLastException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":Exception_ClearLastException")) SWIG_fail;
  {
    try {
      FabricCore::Exception::ClearLastException();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exception_MaybeThrowLastException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":Exception_MaybeThrowLastException")) SWIG_fail;
  {
    try {
      FabricCore::Exception::MaybeThrowLastException();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exception_Throw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Exception_Throw",&obj0,&obj1)) SWIG_fail;
  {
    if (PyString_Check(obj0) || obj0 == Py_None) {
      res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
    }
    else if (PyUnicode_Check(obj0)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj0);
      alloc1 = SWIG_NEWOBJ;
      res1 = SWIG_AsCharPtrAndSize(uniobj, &buf1, NULL, &alloc1);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1),
        "Error converting string or unicode argument to char *");
    }
    arg1 = buf1;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Exception_Throw" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      FabricCore::Exception::Throw((char const *)arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exception_Throw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Exception_Throw",&obj0)) SWIG_fail;
  {
    if (PyString_Check(obj0) || obj0 == Py_None) {
      res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
    }
    else if (PyUnicode_Check(obj0)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj0);
      alloc1 = SWIG_NEWOBJ;
      res1 = SWIG_AsCharPtrAndSize(uniobj, &buf1, NULL, &alloc1);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1),
        "Error converting string or unicode argument to char *");
    }
    arg1 = buf1;
  }
  {
    try {
      FabricCore::Exception::Throw((char const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exception_Throw__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Exception_Throw",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exception_Throw" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Exception_Throw" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      FabricCore::Exception::Throw((std::string const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exception_Throw(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Exception_Throw__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Exception_Throw__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Exception_Throw__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Exception_Throw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Throw(char const *,uint32_t)\n"
    "    Throw(char const *)\n"
    "    FabricCore::Exception::Throw(std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *Exception_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__Exception, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_EnableDebug(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EnableDebug",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EnableDebug" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    try {
      FabricCore::EnableDebug(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Variant__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Variant")) SWIG_fail;
  {
    try {
      result = (FabricCore::Variant *)new FabricCore::Variant();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Variant__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_Variant *arg1 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Variant" "', argument " "1"" of type '" "FEC_Variant *""'"); 
  }
  arg1 = reinterpret_cast< FEC_Variant * >(argp1);
  {
    try {
      result = (FabricCore::Variant *)new FabricCore::Variant(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Variant__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Variant,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Variant" "', argument " "1"" of type '" "FabricCore::Variant const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Variant" "', argument " "1"" of type '" "FabricCore::Variant const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (FabricCore::Variant *)new FabricCore::Variant((FabricCore::Variant const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Variant(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Variant__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FEC_Variant, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Variant__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Variant, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Variant__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Variant'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::Variant()\n"
    "    FabricCore::Variant(FEC_Variant *)\n"
    "    FabricCore::Variant(FabricCore::Variant const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getFECVariant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_Variant *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getFECVariant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getFECVariant" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (FEC_Variant *)((FabricCore::Variant const *)arg1)->getFECVariant();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FEC_Variant, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  FabricCore::Variant *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_clone",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_clone" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__Variant,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Variant_clone" "', argument " "2"" of type '" "FabricCore::Variant const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variant_clone" "', argument " "2"" of type '" "FabricCore::Variant const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::Variant * >(argp2);
  {
    try {
      (arg1)->clone((FabricCore::Variant const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_take__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  FEC_Variant *arg2 = (FEC_Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_take",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_take" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_Variant, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Variant_take" "', argument " "2"" of type '" "FEC_Variant *""'"); 
  }
  arg2 = reinterpret_cast< FEC_Variant * >(argp2);
  {
    try {
      (arg1)->take(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_take__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  FabricCore::Variant *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_take",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_take" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__Variant,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Variant_take" "', argument " "2"" of type '" "FabricCore::Variant &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variant_take" "', argument " "2"" of type '" "FabricCore::Variant &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::Variant * >(argp2);
  {
    try {
      (arg1)->take(*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_take(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Variant, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FEC_Variant, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Variant_take__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Variant, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FabricCore__Variant, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Variant_take__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Variant_take'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    take(FabricCore::Variant *,FEC_Variant *)\n"
    "    take(FabricCore::Variant *,FabricCore::Variant &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Variant" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateNull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)":Variant_CreateNull")) SWIG_fail;
  {
    try {
      result = FabricCore::Variant::CreateNull();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_isNull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_isNull",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_isNull" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Variant const *)arg1)->isNull();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateBoolean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateBoolean",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Variant_CreateBoolean" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    try {
      result = FabricCore::Variant::CreateBoolean(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_isBoolean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_isBoolean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_isBoolean" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Variant const *)arg1)->isBoolean();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getBoolean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getBoolean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getBoolean" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Variant const *)arg1)->getBoolean();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setBoolean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_setBoolean",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setBoolean" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_setBoolean" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setBoolean(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateUInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint8_t arg1 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateUInt8",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Variant_CreateUInt8" "', argument " "1"" of type '" "uint8_t""'");
  } 
  arg1 = static_cast< uint8_t >(val1);
  {
    try {
      result = FabricCore::Variant::CreateUInt8(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_isUInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_isUInt8",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_isUInt8" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Variant const *)arg1)->isUInt8();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getUInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getUInt8",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getUInt8" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (uint8_t)((FabricCore::Variant const *)arg1)->getUInt8();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setUInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_setUInt8",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setUInt8" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_setUInt8" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  {
    try {
      (arg1)->setUInt8(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateSInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int8_t arg1 ;
  signed char val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateSInt8",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_signed_SS_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Variant_CreateSInt8" "', argument " "1"" of type '" "int8_t""'");
  } 
  arg1 = static_cast< int8_t >(val1);
  {
    try {
      result = FabricCore::Variant::CreateSInt8(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_isSInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_isSInt8",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_isSInt8" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Variant const *)arg1)->isSInt8();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getSInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getSInt8",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getSInt8" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (int8_t)((FabricCore::Variant const *)arg1)->getSInt8();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setSInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  int8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_setSInt8",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setSInt8" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_setSInt8" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = static_cast< int8_t >(val2);
  {
    try {
      (arg1)->setSInt8(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateUInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint16_t arg1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateUInt16",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Variant_CreateUInt16" "', argument " "1"" of type '" "uint16_t""'");
  } 
  arg1 = static_cast< uint16_t >(val1);
  {
    try {
      result = FabricCore::Variant::CreateUInt16(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_isUInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_isUInt16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_isUInt16" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Variant const *)arg1)->isUInt16();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getUInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getUInt16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getUInt16" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (uint16_t)((FabricCore::Variant const *)arg1)->getUInt16();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setUInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_setUInt16",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setUInt16" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_setUInt16" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->setUInt16(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateSInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int16_t arg1 ;
  short val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateSInt16",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Variant_CreateSInt16" "', argument " "1"" of type '" "int16_t""'");
  } 
  arg1 = static_cast< int16_t >(val1);
  {
    try {
      result = FabricCore::Variant::CreateSInt16(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_isSInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_isSInt16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_isSInt16" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Variant const *)arg1)->isSInt16();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getSInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getSInt16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getSInt16" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (int16_t)((FabricCore::Variant const *)arg1)->getSInt16();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setSInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_setSInt16",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setSInt16" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_setSInt16" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  {
    try {
      (arg1)->setSInt16(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateUInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateUInt32",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Variant_CreateUInt32" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  {
    try {
      result = FabricCore::Variant::CreateUInt32(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_isUInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_isUInt32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_isUInt32" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Variant const *)arg1)->isUInt32();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getUInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getUInt32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getUInt32" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (uint32_t)((FabricCore::Variant const *)arg1)->getUInt32();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setUInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_setUInt32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setUInt32" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_setUInt32" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      (arg1)->setUInt32(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateSInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int32_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateSInt32",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Variant_CreateSInt32" "', argument " "1"" of type '" "int32_t""'");
  } 
  arg1 = static_cast< int32_t >(val1);
  {
    try {
      result = FabricCore::Variant::CreateSInt32(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_isSInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_isSInt32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_isSInt32" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Variant const *)arg1)->isSInt32();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getSInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getSInt32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getSInt32" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (int32_t)((FabricCore::Variant const *)arg1)->getSInt32();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setSInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_setSInt32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setSInt32" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_setSInt32" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  {
    try {
      (arg1)->setSInt32(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateUInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint64_t arg1 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateUInt64",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Variant_CreateUInt64" "', argument " "1"" of type '" "uint64_t""'");
  } 
  arg1 = static_cast< uint64_t >(val1);
  {
    try {
      result = FabricCore::Variant::CreateUInt64(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_isUInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_isUInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_isUInt64" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Variant const *)arg1)->isUInt64();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getUInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getUInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getUInt64" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (uint64_t)((FabricCore::Variant const *)arg1)->getUInt64();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setUInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_setUInt64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setUInt64" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_setUInt64" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  {
    try {
      (arg1)->setUInt64(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateSInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int64_t arg1 ;
  long long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateSInt64",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Variant_CreateSInt64" "', argument " "1"" of type '" "int64_t""'");
  } 
  arg1 = static_cast< int64_t >(val1);
  {
    try {
      result = FabricCore::Variant::CreateSInt64(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_isSInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_isSInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_isSInt64" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Variant const *)arg1)->isSInt64();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getSInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getSInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getSInt64" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (int64_t)((FabricCore::Variant const *)arg1)->getSInt64();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setSInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_setSInt64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setSInt64" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_setSInt64" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->setSInt64(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateFloat32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateFloat32",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Variant_CreateFloat32" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    try {
      result = FabricCore::Variant::CreateFloat32(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_isFloat32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_isFloat32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_isFloat32" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Variant const *)arg1)->isFloat32();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getFloat32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getFloat32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getFloat32" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (float)((FabricCore::Variant const *)arg1)->getFloat32();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setFloat32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_setFloat32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setFloat32" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_setFloat32" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->setFloat32(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateFloat64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateFloat64",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Variant_CreateFloat64" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = FabricCore::Variant::CreateFloat64(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_isFloat64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_isFloat64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_isFloat64" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Variant const *)arg1)->isFloat64();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getFloat64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getFloat64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getFloat64" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (double)((FabricCore::Variant const *)arg1)->getFloat64();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setFloat64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_setFloat64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setFloat64" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_setFloat64" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setFloat64(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_CreateString",&obj0,&obj1)) SWIG_fail;
  {
    if (PyString_Check(obj0) || obj0 == Py_None) {
      res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
    }
    else if (PyUnicode_Check(obj0)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj0);
      alloc1 = SWIG_NEWOBJ;
      res1 = SWIG_AsCharPtrAndSize(uniobj, &buf1, NULL, &alloc1);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1),
        "Error converting string or unicode argument to char *");
    }
    arg1 = buf1;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_CreateString" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = FabricCore::Variant::CreateString((char const *)arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateString_Take__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_CreateString_Take",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_CreateString_Take" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_CreateString_Take" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = FabricCore::Variant::CreateString_Take(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateString",&obj0)) SWIG_fail;
  {
    if (PyString_Check(obj0) || obj0 == Py_None) {
      res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
    }
    else if (PyUnicode_Check(obj0)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj0);
      alloc1 = SWIG_NEWOBJ;
      res1 = SWIG_AsCharPtrAndSize(uniobj, &buf1, NULL, &alloc1);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1),
        "Error converting string or unicode argument to char *");
    }
    arg1 = buf1;
  }
  {
    try {
      result = FabricCore::Variant::CreateString((char const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateString_Take__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateString_Take",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_CreateString_Take" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = FabricCore::Variant::CreateString_Take(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateString_Take(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Variant_CreateString_Take__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Variant_CreateString_Take__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Variant_CreateString_Take'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CreateString_Take(char *,uint32_t)\n"
    "    FabricCore::Variant::CreateString_Take(char *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateString",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_CreateString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variant_CreateString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = FabricCore::Variant::CreateString((std::string const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Variant_CreateString__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Variant_CreateString__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Variant_CreateString__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Variant_CreateString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CreateString(char const *,uint32_t)\n"
    "    CreateString(char const *)\n"
    "    FabricCore::Variant::CreateString(std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_isString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_isString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_isString" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Variant const *)arg1)->isString();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getStringData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getStringData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getStringData" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (char *)((FabricCore::Variant const *)arg1)->getStringData();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getStringLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getStringLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getStringLength" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (uint32_t)((FabricCore::Variant const *)arg1)->getStringLength();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getString_cstr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getString_cstr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getString_cstr" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (char *)((FabricCore::Variant const *)arg1)->getString_cstr();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getString_stl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getString_stl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getString_stl" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = ((FabricCore::Variant const *)arg1)->getString_stl();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Variant_setString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setString" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Variant_setString" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      (arg1)->setString((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_setString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setString" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->setString((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_setString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setString" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Variant_setString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variant_setString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setString((std::string const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Variant, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Variant_setString__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Variant, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Variant_setString__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Variant, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Variant_setString__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Variant_setString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setString(FabricCore::Variant *,char const *,uint32_t)\n"
    "    setString(FabricCore::Variant *,char const *)\n"
    "    setString(FabricCore::Variant *,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateArray__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateArray",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Variant_CreateArray" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  {
    try {
      result = FabricCore::Variant::CreateArray(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateArray__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)":Variant_CreateArray")) SWIG_fail;
  {
    try {
      result = FabricCore::Variant::CreateArray();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateArray(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_Variant_CreateArray__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Variant_CreateArray__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Variant_CreateArray'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CreateArray(uint32_t)\n"
    "    FabricCore::Variant::CreateArray()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_isArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_isArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_isArray" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Variant const *)arg1)->isArray();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getArraySize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getArraySize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getArraySize" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (uint32_t)((FabricCore::Variant const *)arg1)->getArraySize();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getArrayElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::Variant *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_getArrayElement",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getArrayElement" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_getArrayElement" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (FabricCore::Variant *)((FabricCore::Variant const *)arg1)->getArrayElement(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_arrayAppend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  FabricCore::Variant *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_arrayAppend",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_arrayAppend" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__Variant,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Variant_arrayAppend" "', argument " "2"" of type '" "FabricCore::Variant const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variant_arrayAppend" "', argument " "2"" of type '" "FabricCore::Variant const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::Variant * >(argp2);
  {
    try {
      (arg1)->arrayAppend((FabricCore::Variant const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_arrayAppendTake(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  FabricCore::Variant *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_arrayAppendTake",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_arrayAppendTake" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__Variant,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Variant_arrayAppendTake" "', argument " "2"" of type '" "FabricCore::Variant &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variant_arrayAppendTake" "', argument " "2"" of type '" "FabricCore::Variant &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::Variant * >(argp2);
  {
    try {
      (arg1)->arrayAppendTake(*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setElementCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  uint32_t arg2 ;
  FabricCore::Variant *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Variant_setElementCopy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setElementCopy" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_setElementCopy" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__Variant,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Variant_setElementCopy" "', argument " "3"" of type '" "FabricCore::Variant const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variant_setElementCopy" "', argument " "3"" of type '" "FabricCore::Variant const &""'"); 
  }
  arg3 = reinterpret_cast< FabricCore::Variant * >(argp3);
  {
    try {
      (arg1)->setElementCopy(arg2,(FabricCore::Variant const &)*arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setElementTake(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  uint32_t arg2 ;
  FabricCore::Variant *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Variant_setElementTake",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setElementTake" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_setElementTake" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__Variant,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Variant_setElementTake" "', argument " "3"" of type '" "FabricCore::Variant &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variant_setElementTake" "', argument " "3"" of type '" "FabricCore::Variant &""'"); 
  }
  arg3 = reinterpret_cast< FabricCore::Variant * >(argp3);
  {
    try {
      (arg1)->setElementTake(arg2,*arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateDict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)":Variant_CreateDict")) SWIG_fail;
  {
    try {
      result = FabricCore::Variant::CreateDict();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_isDict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_isDict",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_isDict" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Variant const *)arg1)->isDict();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getDictValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  FabricCore::Variant *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::Variant *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_getDictValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getDictValue" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__Variant,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Variant_getDictValue" "', argument " "2"" of type '" "FabricCore::Variant const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variant_getDictValue" "', argument " "2"" of type '" "FabricCore::Variant const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::Variant * >(argp2);
  {
    try {
      result = (FabricCore::Variant *)((FabricCore::Variant const *)arg1)->getDictValue((FabricCore::Variant const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getDictValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::Variant *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Variant_getDictValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getDictValue" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Variant_getDictValue" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = (FabricCore::Variant *)((FabricCore::Variant const *)arg1)->getDictValue((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getDictValue__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::Variant *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_getDictValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getDictValue" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FabricCore::Variant *)((FabricCore::Variant const *)arg1)->getDictValue((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getDictValue(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Variant, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FabricCore__Variant, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Variant_getDictValue__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Variant, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Variant_getDictValue__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Variant, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Variant_getDictValue__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Variant_getDictValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getDictValue(FabricCore::Variant const *,FabricCore::Variant const &)\n"
    "    getDictValue(FabricCore::Variant const *,char const *,uint32_t)\n"
    "    getDictValue(FabricCore::Variant const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setDictValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  FabricCore::Variant *arg2 = 0 ;
  FabricCore::Variant *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Variant_setDictValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setDictValue" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__Variant,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Variant_setDictValue" "', argument " "2"" of type '" "FabricCore::Variant const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variant_setDictValue" "', argument " "2"" of type '" "FabricCore::Variant const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::Variant * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__Variant,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Variant_setDictValue" "', argument " "3"" of type '" "FabricCore::Variant const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variant_setDictValue" "', argument " "3"" of type '" "FabricCore::Variant const &""'"); 
  }
  arg3 = reinterpret_cast< FabricCore::Variant * >(argp3);
  {
    try {
      (arg1)->setDictValue((FabricCore::Variant const &)*arg2,(FabricCore::Variant const &)*arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setDictValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  char *arg2 = (char *) 0 ;
  FabricCore::Variant *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Variant_setDictValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_setDictValue" "', argument " "1"" of type '" "FabricCore::Variant *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__Variant,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Variant_setDictValue" "', argument " "3"" of type '" "FabricCore::Variant const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variant_setDictValue" "', argument " "3"" of type '" "FabricCore::Variant const &""'"); 
  }
  arg3 = reinterpret_cast< FabricCore::Variant * >(argp3);
  {
    try {
      (arg1)->setDictValue((char const *)arg2,(FabricCore::Variant const &)*arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_setDictValue(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Variant, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FabricCore__Variant, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_FabricCore__Variant, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Variant_setDictValue__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Variant, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_FabricCore__Variant, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Variant_setDictValue__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Variant_setDictValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setDictValue(FabricCore::Variant *,FabricCore::Variant const &,FabricCore::Variant const &)\n"
    "    setDictValue(FabricCore::Variant *,char const *,FabricCore::Variant const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getDesc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_getDesc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getDesc" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_getDesc" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = ((FabricCore::Variant const *)arg1)->getDesc(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getDesc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getDesc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getDesc" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = ((FabricCore::Variant const *)arg1)->getDesc();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getDesc(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Variant, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Variant_getDesc__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Variant, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Variant_getDesc__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Variant_getDesc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getDesc(FabricCore::Variant const *,bool)\n"
    "    getDesc(FabricCore::Variant const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getDesc_stl__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_getDesc_stl",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getDesc_stl" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_getDesc_stl" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = ((FabricCore::Variant const *)arg1)->getDesc_stl(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getDesc_stl__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getDesc_stl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getDesc_stl" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = ((FabricCore::Variant const *)arg1)->getDesc_stl();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getDesc_stl(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Variant, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Variant_getDesc_stl__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Variant, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Variant_getDesc_stl__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Variant_getDesc_stl'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getDesc_stl(FabricCore::Variant const *,bool)\n"
    "    getDesc_stl(FabricCore::Variant const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateFromJSON__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variant_CreateFromJSON",&obj0,&obj1)) SWIG_fail;
  {
    if (PyString_Check(obj0) || obj0 == Py_None) {
      res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
    }
    else if (PyUnicode_Check(obj0)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj0);
      alloc1 = SWIG_NEWOBJ;
      res1 = SWIG_AsCharPtrAndSize(uniobj, &buf1, NULL, &alloc1);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1),
        "Error converting string or unicode argument to char *");
    }
    arg1 = buf1;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Variant_CreateFromJSON" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = FabricCore::Variant::CreateFromJSON((char const *)arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateFromJSON__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateFromJSON",&obj0)) SWIG_fail;
  {
    if (PyString_Check(obj0) || obj0 == Py_None) {
      res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
    }
    else if (PyUnicode_Check(obj0)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj0);
      alloc1 = SWIG_NEWOBJ;
      res1 = SWIG_AsCharPtrAndSize(uniobj, &buf1, NULL, &alloc1);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1),
        "Error converting string or unicode argument to char *");
    }
    arg1 = buf1;
  }
  {
    try {
      result = FabricCore::Variant::CreateFromJSON((char const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateFromJSON__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_CreateFromJSON",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_CreateFromJSON" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variant_CreateFromJSON" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = FabricCore::Variant::CreateFromJSON((std::string const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_CreateFromJSON(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Variant_CreateFromJSON__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Variant_CreateFromJSON__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Variant_CreateFromJSON__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Variant_CreateFromJSON'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CreateFromJSON(char const *,uint32_t)\n"
    "    CreateFromJSON(char const *)\n"
    "    FabricCore::Variant::CreateFromJSON(std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getJSONEncoding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getJSONEncoding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getJSONEncoding" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = ((FabricCore::Variant const *)arg1)->getJSONEncoding();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variant_getJSONEncoding_stl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variant_getJSONEncoding_stl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variant_getJSONEncoding_stl" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = ((FabricCore::Variant const *)arg1)->getJSONEncoding_stl();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Variant_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__Variant, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_KLTool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KLTool",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "KLTool" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KLTool" "', argument " "2"" of type '" "char const *const *""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  {
    try {
      result = (int)FabricCore::KLTool(arg1,(char const *const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KL2EDK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KL2EDK",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "KL2EDK" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KL2EDK" "', argument " "2"" of type '" "char const *const *""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  {
    try {
      result = (int)FabricCore::KL2EDK(arg1,(char const *const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KLExport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KLExport",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "KLExport" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KLExport" "', argument " "2"" of type '" "char const *const *""'"); 
  }
  arg2 = reinterpret_cast< char ** >(argp2);
  {
    try {
      result = (int)FabricCore::KLExport(arg1,(char const *const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ref__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Ref *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Ref")) SWIG_fail;
  {
    try {
      result = (FabricCore::Ref *)new FabricCore::Ref();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Ref, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ref__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Ref *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Ref *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Ref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Ref,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Ref" "', argument " "1"" of type '" "FabricCore::Ref const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ref" "', argument " "1"" of type '" "FabricCore::Ref const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Ref * >(argp1);
  {
    try {
      result = (FabricCore::Ref *)new FabricCore::Ref((FabricCore::Ref const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Ref, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ref(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Ref__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Ref, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ref__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Ref'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::Ref()\n"
    "    FabricCore::Ref(FabricCore::Ref const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Ref *arg1 = (FabricCore::Ref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Ref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Ref, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Ref" "', argument " "1"" of type '" "FabricCore::Ref *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Ref * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ref_getFECRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Ref *arg1 = (FabricCore::Ref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_Ref result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ref_getFECRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Ref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ref_getFECRef" "', argument " "1"" of type '" "FabricCore::Ref const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Ref * >(argp1);
  {
    try {
      result = (FEC_Ref)((FabricCore::Ref const *)arg1)->getFECRef();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ref_takeFECRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Ref *arg1 = (FabricCore::Ref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_Ref result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ref_takeFECRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Ref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ref_takeFECRef" "', argument " "1"" of type '" "FabricCore::Ref *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Ref * >(argp1);
  {
    try {
      result = (FEC_Ref)(arg1)->takeFECRef();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ref_invalidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Ref *arg1 = (FabricCore::Ref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ref_invalidate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Ref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ref_invalidate" "', argument " "1"" of type '" "FabricCore::Ref *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Ref * >(argp1);
  {
    try {
      (arg1)->invalidate();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ref_isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Ref *arg1 = (FabricCore::Ref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ref_isValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Ref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ref_isValid" "', argument " "1"" of type '" "FabricCore::Ref const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Ref * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Ref const *)arg1)->isValid();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ref___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Ref *arg1 = (FabricCore::Ref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Ref___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Ref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ref___nonzero__" "', argument " "1"" of type '" "FabricCore::Ref const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Ref * >(argp1);
  {
    try {
      result = (bool)((FabricCore::Ref const *)arg1)->operator bool();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Ref_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__Ref, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_String__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_String")) SWIG_fail;
  {
    try {
      result = (FabricCore::String *)new FabricCore::String();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_String__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_String",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__String,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_String" "', argument " "1"" of type '" "FabricCore::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_String" "', argument " "1"" of type '" "FabricCore::String const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::String * >(argp1);
  {
    try {
      result = (FabricCore::String *)new FabricCore::String((FabricCore::String const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_String(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_String__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_String__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_String'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::String()\n"
    "    FabricCore::String(FabricCore::String const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_String_getCStr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::String *arg1 = (FabricCore::String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:String_getCStr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "String_getCStr" "', argument " "1"" of type '" "FabricCore::String const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::String * >(argp1);
  {
    try {
      result = (char *)((FabricCore::String const *)arg1)->getCStr();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_String_getSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::String *arg1 = (FabricCore::String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:String_getSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "String_getSize" "', argument " "1"" of type '" "FabricCore::String const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::String * >(argp1);
  {
    try {
      result = (uint32_t)((FabricCore::String const *)arg1)->getSize();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_String_getCStrAndSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::String *arg1 = (FabricCore::String *) 0 ;
  char **arg2 = 0 ;
  uint32_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:String_getCStrAndSize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "String_getCStrAndSize" "', argument " "1"" of type '" "FabricCore::String const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::String * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "String_getCStrAndSize" "', argument " "2"" of type '" "char const *&""'");
  }
  arg2 = &buf2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "String_getCStrAndSize" "', argument " "3"" of type '" "uint32_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "String_getCStrAndSize" "', argument " "3"" of type '" "uint32_t &""'"); 
  }
  arg3 = reinterpret_cast< uint32_t * >(argp3);
  {
    try {
      ((FabricCore::String const *)arg1)->getCStrAndSize((char const *&)*arg2,*arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_String_append__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::String *arg1 = (FabricCore::String *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:String_append",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "String_append" "', argument " "1"" of type '" "FabricCore::String *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::String * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "String_append" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      (arg1)->append((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_String_append__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::String *arg1 = (FabricCore::String *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:String_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "String_append" "', argument " "1"" of type '" "FabricCore::String *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::String * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->append((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_String_append(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_String_append__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_String_append__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'String_append'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    append(FabricCore::String *,char const *,uint32_t)\n"
    "    append(FabricCore::String *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_String_getCString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::String *arg1 = (FabricCore::String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:String_getCString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "String_getCString" "', argument " "1"" of type '" "FabricCore::String const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::String * >(argp1);
  {
    try {
      result = (char *)((FabricCore::String const *)arg1)->getCString();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_String_getLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::String *arg1 = (FabricCore::String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:String_getLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "String_getLength" "', argument " "1"" of type '" "FabricCore::String const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::String * >(argp1);
  {
    try {
      result = (uint32_t)((FabricCore::String const *)arg1)->getLength();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_String_getStringDataAndLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::String *arg1 = (FabricCore::String *) 0 ;
  char **arg2 = 0 ;
  uint32_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:String_getStringDataAndLength",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "String_getStringDataAndLength" "', argument " "1"" of type '" "FabricCore::String const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::String * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "String_getStringDataAndLength" "', argument " "2"" of type '" "char const *&""'");
  }
  arg2 = &buf2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "String_getStringDataAndLength" "', argument " "3"" of type '" "uint32_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "String_getStringDataAndLength" "', argument " "3"" of type '" "uint32_t &""'"); 
  }
  arg3 = reinterpret_cast< uint32_t * >(argp3);
  {
    try {
      ((FabricCore::String const *)arg1)->getStringDataAndLength((char const *&)*arg2,*arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_String(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::String *arg1 = (FabricCore::String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_String",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__String, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_String" "', argument " "1"" of type '" "FabricCore::String *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::String * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *String_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__String, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_DFGPortType_In_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DFGPortType_In is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DFGPortType_In_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FabricCore::DFGPortType_In));
  return pyobj;
}


SWIGINTERN int Swig_var_DFGPortType_IO_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DFGPortType_IO is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DFGPortType_IO_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FabricCore::DFGPortType_IO));
  return pyobj;
}


SWIGINTERN int Swig_var_DFGPortType_Out_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DFGPortType_Out is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DFGPortType_Out_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FabricCore::DFGPortType_Out));
  return pyobj;
}


SWIGINTERN int Swig_var_DFGExecType_Graph_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DFGExecType_Graph is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DFGExecType_Graph_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FabricCore::DFGExecType_Graph));
  return pyobj;
}


SWIGINTERN int Swig_var_DFGExecType_Func_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DFGExecType_Func is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DFGExecType_Func_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FabricCore::DFGExecType_Func));
  return pyobj;
}


SWIGINTERN int Swig_var_DFGNodeType_Inst_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DFGNodeType_Inst is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DFGNodeType_Inst_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FabricCore::DFGNodeType_Inst));
  return pyobj;
}


SWIGINTERN int Swig_var_DFGNodeType_Get_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DFGNodeType_Get is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DFGNodeType_Get_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FabricCore::DFGNodeType_Get));
  return pyobj;
}


SWIGINTERN int Swig_var_DFGNodeType_Set_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DFGNodeType_Set is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DFGNodeType_Set_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FabricCore::DFGNodeType_Set));
  return pyobj;
}


SWIGINTERN int Swig_var_DFGNodeType_Var_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DFGNodeType_Var is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DFGNodeType_Var_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FabricCore::DFGNodeType_Var));
  return pyobj;
}


SWIGINTERN int Swig_var_DFGNodeType_User_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DFGNodeType_User is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DFGNodeType_User_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FabricCore::DFGNodeType_User));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_DFGView__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGView *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DFGView")) SWIG_fail;
  {
    try {
      result = (FabricCore::DFGView *)new FabricCore::DFGView();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DFGView, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DFGView__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGView *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DFGView *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DFGView",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__DFGView,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DFGView" "', argument " "1"" of type '" "FabricCore::DFGView const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DFGView" "', argument " "1"" of type '" "FabricCore::DFGView const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGView * >(argp1);
  {
    try {
      result = (FabricCore::DFGView *)new FabricCore::DFGView((FabricCore::DFGView const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DFGView, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DFGView(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DFGView__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__DFGView, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DFGView__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DFGView'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::DFGView()\n"
    "    FabricCore::DFGView(FabricCore::DFGView const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DFGView(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGView *arg1 = (FabricCore::DFGView *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DFGView",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGView, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DFGView" "', argument " "1"" of type '" "FabricCore::DFGView *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGView * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGView_getFECDFGViewRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGView *arg1 = (FabricCore::DFGView *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_DFGViewRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGView_getFECDFGViewRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGView, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGView_getFECDFGViewRef" "', argument " "1"" of type '" "FabricCore::DFGView const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGView * >(argp1);
  {
    try {
      result = (FEC_DFGViewRef)((FabricCore::DFGView const *)arg1)->getFECDFGViewRef();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DFGView_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__DFGView, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DFGExec_getFECDFGExecRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_DFGExecRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_getFECDFGExecRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getFECDFGExecRef" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (FEC_DFGExecRef)((FabricCore::DFGExec const *)arg1)->getFECDFGExecRef();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DFGExec__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DFGExec")) SWIG_fail;
  {
    try {
      result = (FabricCore::DFGExec *)new FabricCore::DFGExec();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DFGExec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DFGExec__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DFGExec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DFGExec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__DFGExec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DFGExec" "', argument " "1"" of type '" "FabricCore::DFGExec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DFGExec" "', argument " "1"" of type '" "FabricCore::DFGExec const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (FabricCore::DFGExec *)new FabricCore::DFGExec((FabricCore::DFGExec const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DFGExec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DFGExec(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DFGExec__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DFGExec__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DFGExec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::DFGExec()\n"
    "    FabricCore::DFGExec(FabricCore::DFGExec const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DFGExec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DFGExec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DFGExec" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DFGExecType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_getType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getType" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (FabricCore::DFGExecType)((FabricCore::DFGExec const *)arg1)->getType();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getNodeType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DFGNodeType result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getNodeType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getNodeType" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FabricCore::DFGNodeType)((FabricCore::DFGExec const *)arg1)->getNodeType((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getHost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DFGHost result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_getHost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getHost" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = ((FabricCore::DFGExec const *)arg1)->getHost();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGHost(static_cast< const FabricCore::DFGHost& >(result))), SWIGTYPE_p_FabricCore__DFGHost, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getSubExec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DFGExec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getSubExec",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getSubExec" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = ((FabricCore::DFGExec const *)arg1)->getSubExec((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGExec(static_cast< const FabricCore::DFGExec& >(result))), SWIGTYPE_p_FabricCore__DFGExec, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getErrorCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_getErrorCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getErrorCount" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (unsigned int)((FabricCore::DFGExec const *)arg1)->getErrorCount();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getError",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getError" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_getError" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (char *)((FabricCore::DFGExec const *)arg1)->getError(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExtDeps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_getExtDeps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getExtDeps" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = ((FabricCore::DFGExec const *)arg1)->getExtDeps();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExtDepCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_getExtDepCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getExtDepCount" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (unsigned int)((FabricCore::DFGExec const *)arg1)->getExtDepCount();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExtDepName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getExtDepName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getExtDepName" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_getExtDepName" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (char *)((FabricCore::DFGExec const *)arg1)->getExtDepName(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExtDepVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getExtDepVersion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getExtDepVersion" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_getExtDepVersion" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((FabricCore::DFGExec const *)arg1)->getExtDepVersion(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_haveExecPort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_haveExecPort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_haveExecPort" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (bool)((FabricCore::DFGExec const *)arg1)->haveExecPort((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExecPortCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_getExecPortCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getExecPortCount" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (unsigned int)((FabricCore::DFGExec const *)arg1)->getExecPortCount();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExecPortName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getExecPortName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getExecPortName" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_getExecPortName" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (char *)((FabricCore::DFGExec const *)arg1)->getExecPortName(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getNodeCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_getNodeCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getNodeCount" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (unsigned int)((FabricCore::DFGExec const *)arg1)->getNodeCount();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getNodeName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getNodeName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getNodeName" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_getNodeName" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (char *)((FabricCore::DFGExec const *)arg1)->getNodeName(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getNodeType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DFGNodeType result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getNodeType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getNodeType" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_getNodeType" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (FabricCore::DFGNodeType)((FabricCore::DFGExec const *)arg1)->getNodeType(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getNodeType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DFGExec_getNodeType__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DFGExec_getNodeType__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_getNodeType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getNodeType(FabricCore::DFGExec const *,char const *)\n"
    "    getNodeType(FabricCore::DFGExec const *,unsigned int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getInstExec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DFGExec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getInstExec",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getInstExec" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_getInstExec" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((FabricCore::DFGExec const *)arg1)->getInstExec(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGExec(static_cast< const FabricCore::DFGExec& >(result))), SWIGTYPE_p_FabricCore__DFGExec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addDebugNodePort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_addDebugNodePort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_addDebugNodePort" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->addDebugNodePort((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_removeDebugNodePort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_removeDebugNodePort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_removeDebugNodePort" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->removeDebugNodePort((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getDesc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_getDesc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getDesc" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (arg1)->getDesc();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExecPortDesc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getExecPortDesc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getExecPortDesc" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (arg1)->getExecPortDesc((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getNodeDesc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getNodeDesc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getNodeDesc" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (arg1)->getNodeDesc((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getNodePortDesc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getNodePortDesc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getNodePortDesc" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (arg1)->getNodePortDesc((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_isExecPortResolvedType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_isExecPortResolvedType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_isExecPortResolvedType" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_isExecPortResolvedType" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (bool)(arg1)->isExecPortResolvedType(arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExecPortResolvedType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getExecPortResolvedType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getExecPortResolvedType" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_getExecPortResolvedType" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (char *)(arg1)->getExecPortResolvedType(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExecPortResolvedType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getExecPortResolvedType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getExecPortResolvedType" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)(arg1)->getExecPortResolvedType((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExecPortResolvedType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DFGExec_getExecPortResolvedType__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DFGExec_getExecPortResolvedType__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_getExecPortResolvedType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getExecPortResolvedType(FabricCore::DFGExec *,unsigned int)\n"
    "    getExecPortResolvedType(FabricCore::DFGExec *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getNodePortResolvedType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getNodePortResolvedType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getNodePortResolvedType" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)(arg1)->getNodePortResolvedType((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_exportJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_exportJSON",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_exportJSON" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (arg1)->exportJSON();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addInstFromPreset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_addInstFromPreset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_addInstFromPreset" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)(arg1)->addInstFromPreset((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addInstWithNewGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_addInstWithNewGraph",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_addInstWithNewGraph" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)(arg1)->addInstWithNewGraph((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addInstWithNewGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_addInstWithNewGraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_addInstWithNewGraph" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (char *)(arg1)->addInstWithNewGraph();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addInstWithNewGraph(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DFGExec_addInstWithNewGraph__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DFGExec_addInstWithNewGraph__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_addInstWithNewGraph'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addInstWithNewGraph(FabricCore::DFGExec *,char const *)\n"
    "    addInstWithNewGraph(FabricCore::DFGExec *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addInstWithNewFunc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_addInstWithNewFunc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_addInstWithNewFunc" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)(arg1)->addInstWithNewFunc((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addInstWithNewFunc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_addInstWithNewFunc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_addInstWithNewFunc" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (char *)(arg1)->addInstWithNewFunc();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addInstWithNewFunc(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DFGExec_addInstWithNewFunc__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DFGExec_addInstWithNewFunc__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_addInstWithNewFunc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addInstWithNewFunc(FabricCore::DFGExec *,char const *)\n"
    "    addInstWithNewFunc(FabricCore::DFGExec *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addInstFromJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_addInstFromJSON",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_addInstFromJSON" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)(arg1)->addInstFromJSON((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addVar__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGExec_addVar",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_addVar" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    try {
      result = (char *)(arg1)->addVar((char const *)arg2,(char const *)arg3,(char const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addVar__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_addVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_addVar" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (char *)(arg1)->addVar((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addVar(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DFGExec_addVar__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DFGExec_addVar__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_addVar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addVar(FabricCore::DFGExec *,char const *,char const *,char const *)\n"
    "    addVar(FabricCore::DFGExec *,char const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addGet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_addGet",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_addGet" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (char *)(arg1)->addGet((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_addSet",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_addSet" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (char *)(arg1)->addSet((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getVarValue_RTVal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getVarValue_RTVal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getVarValue_RTVal" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (arg1)->getVarValue((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setVarValue_RTVal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  FabricCore::RTVal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_setVarValue_RTVal",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setVarValue_RTVal" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DFGExec_setVarValue_RTVal" "', argument " "3"" of type '" "FabricCore::RTVal""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DFGExec_setVarValue_RTVal" "', argument " "3"" of type '" "FabricCore::RTVal""'");
    } else {
      FabricCore::RTVal * temp = reinterpret_cast< FabricCore::RTVal * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->setVarValue((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getRefVarPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getRefVarPath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getRefVarPath" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)(arg1)->getRefVarPath((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setRefVarPath__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGExec_setRefVarPath",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setRefVarPath" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DFGExec_setRefVarPath" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->setRefVarPath((char const *)arg2,(char const *)arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setRefVarPath__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_setRefVarPath",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setRefVarPath" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      (arg1)->setRefVarPath((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setRefVarPath(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DFGExec_setRefVarPath__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DFGExec_setRefVarPath__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_setRefVarPath'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setRefVarPath(FabricCore::DFGExec *,char const *,char const *,bool)\n"
    "    setRefVarPath(FabricCore::DFGExec *,char const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_addUser",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_addUser" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)(arg1)->addUser((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addExtDep__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_addExtDep",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_addExtDep" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      (arg1)->addExtDep((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addExtDep__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_addExtDep",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_addExtDep" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->addExtDep((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addExtDep(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DFGExec_addExtDep__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DFGExec_addExtDep__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_addExtDep'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addExtDep(FabricCore::DFGExec *,char const *,char const *)\n"
    "    addExtDep(FabricCore::DFGExec *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setExtDeps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  uint32_t arg2 ;
  char **arg3 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_setExtDeps",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setExtDeps" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    int i;
    if (!PyList_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expecting a list");
      return NULL;
    }
    arg2 = PyList_Size(obj1);
    arg3 = (char **) alloca((arg2+1)*sizeof(char *));
    for (i = 0; i < arg2; i++) {
      PyObject *s = PyList_GetItem(obj1,i);
      if (!PyString_Check(s) && !PyUnicode_Check(s)) {
        PyErr_SetString(PyExc_ValueError, "List items must be strings");
        return NULL;
      }
      arg3[i] = PyString_AsString(s);
    }
    arg3[i] = 0;
  }
  {
    try {
      (arg1)->setExtDeps(arg2,(char const **)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_removeExtDep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_removeExtDep",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_removeExtDep" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->removeExtDep((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addExecPort__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  FEC_DFGPortType arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGExec_addExecPort",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_addExecPort" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DFGExec_addExecPort" "', argument " "3"" of type '" "FEC_DFGPortType""'");
  } 
  arg3 = static_cast< FEC_DFGPortType >(val3);
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    try {
      result = (char *)(arg1)->addExecPort((char const *)arg2,arg3,(char const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addExecPort__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  FEC_DFGPortType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_addExecPort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_addExecPort" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DFGExec_addExecPort" "', argument " "3"" of type '" "FEC_DFGPortType""'");
  } 
  arg3 = static_cast< FEC_DFGPortType >(val3);
  {
    try {
      result = (char *)(arg1)->addExecPort((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_addExecPort(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DFGExec_addExecPort__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DFGExec_addExecPort__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_addExecPort'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addExecPort(FabricCore::DFGExec *,char const *,FEC_DFGPortType,char const *)\n"
    "    addExecPort(FabricCore::DFGExec *,char const *,FEC_DFGPortType)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_reorderExecPorts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_reorderExecPorts",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_reorderExecPorts" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (!PyList_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expecting a list");
      return NULL;
    }
    arg2 = PyList_Size(obj1);
    arg3 = (unsigned *)alloca( arg2 * sizeof(unsigned) );
    for ( int i = 0; i < arg2; i++ )
    {
      PyObject * pyObj = PyList_GetItem(obj1,i);
      if ( !PyInt_Check( pyObj ) )
      {
        PyErr_SetString(PyExc_ValueError, "List items must be integers");
        return NULL;
      }
      arg3[i] = PyInt_AsLong( pyObj );
    }
  }
  {
    try {
      (arg1)->reorderExecPorts(arg2,(unsigned int const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getCacheRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_DFGCacheRule result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_getCacheRule",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getCacheRule" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (FEC_DFGCacheRule)((FabricCore::DFGExec const *)arg1)->getCacheRule();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setCacheRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  FEC_DFGCacheRule arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_setCacheRule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setCacheRule" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_setCacheRule" "', argument " "2"" of type '" "FEC_DFGCacheRule""'");
  } 
  arg2 = static_cast< FEC_DFGCacheRule >(val2);
  {
    try {
      (arg1)->setCacheRule(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getInstCacheRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FEC_DFGCacheRule result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getInstCacheRule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getInstCacheRule" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FEC_DFGCacheRule)((FabricCore::DFGExec const *)arg1)->getInstCacheRule((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setInstCacheRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  FEC_DFGCacheRule arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_setInstCacheRule",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setInstCacheRule" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DFGExec_setInstCacheRule" "', argument " "3"" of type '" "FEC_DFGCacheRule""'");
  } 
  arg3 = static_cast< FEC_DFGCacheRule >(val3);
  {
    try {
      (arg1)->setInstCacheRule((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_isConnectedTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_isConnectedTo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_isConnectedTo" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (bool)((FabricCore::DFGExec const *)arg1)->isConnectedTo((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_hasSrcPort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_hasSrcPort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_hasSrcPort" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (bool)((FabricCore::DFGExec const *)arg1)->hasSrcPort((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_hasDstPorts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_hasDstPorts",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_hasDstPorts" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (bool)((FabricCore::DFGExec const *)arg1)->hasDstPorts((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_canConnectTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGExec_canConnectTo",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_canConnectTo" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    try {
      result = ((FabricCore::DFGExec const *)arg1)->canConnectTo((char const *)arg2,(char const *)arg3,(char const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_connectTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_connectTo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_connectTo" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      (arg1)->connectTo((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_disconnectFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_disconnectFrom",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_disconnectFrom" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      (arg1)->disconnectFrom((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_disconnectFromAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_disconnectFromAll",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_disconnectFromAll" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->disconnectFromAll((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_attachPresetFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGExec_attachPresetFile",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_attachPresetFile" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DFGExec_attachPresetFile" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (char *)(arg1)->attachPresetFile((char const *)arg2,(char const *)arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_renameExecPort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_renameExecPort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_renameExecPort" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (char *)(arg1)->renameExecPort((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_renameNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_renameNode",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_renameNode" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (char *)(arg1)->renameNode((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getTitle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_getTitle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getTitle" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (char *)(arg1)->getTitle();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setTitle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_setTitle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setTitle" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->setTitle((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_setVersion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setVersion" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->setVersion((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getInstTitle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getInstTitle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getInstTitle" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_getInstTitle" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (char *)(arg1)->getInstTitle(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getInstTitle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getInstTitle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getInstTitle" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)(arg1)->getInstTitle((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getInstTitle(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DFGExec_getInstTitle__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DFGExec_getInstTitle__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_getInstTitle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getInstTitle(FabricCore::DFGExec *,unsigned int)\n"
    "    getInstTitle(FabricCore::DFGExec *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setInstTitle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_setInstTitle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setInstTitle" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_setInstTitle" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      (arg1)->setInstTitle(arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setInstTitle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_setInstTitle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setInstTitle" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      (arg1)->setInstTitle((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setInstTitle(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DFGExec_setInstTitle__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DFGExec_setInstTitle__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_setInstTitle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setInstTitle(FabricCore::DFGExec *,unsigned int,char const *)\n"
    "    setInstTitle(FabricCore::DFGExec *,char const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getNodePortType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DFGPortType result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getNodePortType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getNodePortType" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FabricCore::DFGPortType)(arg1)->getNodePortType((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExecPortType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DFGPortType result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getExecPortType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getExecPortType" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_getExecPortType" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (FabricCore::DFGPortType)(arg1)->getExecPortType(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExecPortType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DFGPortType result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getExecPortType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getExecPortType" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FabricCore::DFGPortType)(arg1)->getExecPortType((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExecPortType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DFGExec_getExecPortType__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DFGExec_getExecPortType__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_getExecPortType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getExecPortType(FabricCore::DFGExec *,unsigned int)\n"
    "    getExecPortType(FabricCore::DFGExec *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setExecPortType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  FabricCore::DFGPortType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_setExecPortType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setExecPortType" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DFGExec_setExecPortType" "', argument " "3"" of type '" "FabricCore::DFGPortType""'");
  } 
  arg3 = static_cast< FabricCore::DFGPortType >(val3);
  {
    try {
      (arg1)->setExecPortType((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_getCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getCode" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (char *)(arg1)->getCode();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_setCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setCode" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->setCode((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getMetadata",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getMetadata" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)((FabricCore::DFGExec const *)arg1)->getMetadata((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExecPortMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_getExecPortMetadata",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getExecPortMetadata" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (char *)(arg1)->getExecPortMetadata((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getNodeMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_getNodeMetadata",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getNodeMetadata" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (char *)(arg1)->getNodeMetadata((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getNodePortMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_getNodePortMetadata",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getNodePortMetadata" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (char *)(arg1)->getNodePortMetadata((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setMetadata__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DFGExec_setMetadata",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setMetadata" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DFGExec_setMetadata" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DFGExec_setMetadata" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      (arg1)->setMetadata((char const *)arg2,(char const *)arg3,arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setMetadata__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGExec_setMetadata",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setMetadata" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DFGExec_setMetadata" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->setMetadata((char const *)arg2,(char const *)arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setMetadata__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_setMetadata",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setMetadata" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      (arg1)->setMetadata((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setMetadata(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DFGExec_setMetadata__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DFGExec_setMetadata__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_DFGExec_setMetadata__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_setMetadata'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setMetadata(FabricCore::DFGExec *,char const *,char const *,bool,bool)\n"
    "    setMetadata(FabricCore::DFGExec *,char const *,char const *,bool)\n"
    "    setMetadata(FabricCore::DFGExec *,char const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setExecPortMetadata__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:DFGExec_setExecPortMetadata",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setExecPortMetadata" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DFGExec_setExecPortMetadata" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "DFGExec_setExecPortMetadata" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    try {
      (arg1)->setExecPortMetadata((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setExecPortMetadata__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DFGExec_setExecPortMetadata",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setExecPortMetadata" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DFGExec_setExecPortMetadata" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      (arg1)->setExecPortMetadata((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setExecPortMetadata__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGExec_setExecPortMetadata",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setExecPortMetadata" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    try {
      (arg1)->setExecPortMetadata((char const *)arg2,(char const *)arg3,(char const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setExecPortMetadata(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DFGExec_setExecPortMetadata__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_DFGExec_setExecPortMetadata__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_DFGExec_setExecPortMetadata__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_setExecPortMetadata'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setExecPortMetadata(FabricCore::DFGExec *,char const *,char const *,char const *,bool,bool)\n"
    "    setExecPortMetadata(FabricCore::DFGExec *,char const *,char const *,char const *,bool)\n"
    "    setExecPortMetadata(FabricCore::DFGExec *,char const *,char const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setNodeMetadata__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:DFGExec_setNodeMetadata",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setNodeMetadata" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DFGExec_setNodeMetadata" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "DFGExec_setNodeMetadata" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    try {
      (arg1)->setNodeMetadata((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setNodeMetadata__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DFGExec_setNodeMetadata",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setNodeMetadata" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DFGExec_setNodeMetadata" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      (arg1)->setNodeMetadata((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setNodeMetadata__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGExec_setNodeMetadata",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setNodeMetadata" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    try {
      (arg1)->setNodeMetadata((char const *)arg2,(char const *)arg3,(char const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setNodeMetadata(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DFGExec_setNodeMetadata__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_DFGExec_setNodeMetadata__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_DFGExec_setNodeMetadata__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_setNodeMetadata'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setNodeMetadata(FabricCore::DFGExec *,char const *,char const *,char const *,bool,bool)\n"
    "    setNodeMetadata(FabricCore::DFGExec *,char const *,char const *,char const *,bool)\n"
    "    setNodeMetadata(FabricCore::DFGExec *,char const *,char const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setNodePortMetadata__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:DFGExec_setNodePortMetadata",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setNodePortMetadata" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DFGExec_setNodePortMetadata" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "DFGExec_setNodePortMetadata" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    try {
      (arg1)->setNodePortMetadata((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setNodePortMetadata__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DFGExec_setNodePortMetadata",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setNodePortMetadata" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DFGExec_setNodePortMetadata" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      (arg1)->setNodePortMetadata((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setNodePortMetadata__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGExec_setNodePortMetadata",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setNodePortMetadata" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    try {
      (arg1)->setNodePortMetadata((char const *)arg2,(char const *)arg3,(char const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setNodePortMetadata(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DFGExec_setNodePortMetadata__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_DFGExec_setNodePortMetadata__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_DFGExec_setNodePortMetadata__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_setNodePortMetadata'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setNodePortMetadata(FabricCore::DFGExec *,char const *,char const *,char const *,bool,bool)\n"
    "    setNodePortMetadata(FabricCore::DFGExec *,char const *,char const *,char const *,bool)\n"
    "    setNodePortMetadata(FabricCore::DFGExec *,char const *,char const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setPortDefaultValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  FabricCore::RTVal arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGExec_setPortDefaultValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setPortDefaultValue" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DFGExec_setPortDefaultValue" "', argument " "3"" of type '" "FabricCore::RTVal""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DFGExec_setPortDefaultValue" "', argument " "3"" of type '" "FabricCore::RTVal""'");
    } else {
      FabricCore::RTVal * temp = reinterpret_cast< FabricCore::RTVal * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DFGExec_setPortDefaultValue" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->setPortDefaultValue((char const *)arg2,arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setPortDefaultValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  FabricCore::RTVal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_setPortDefaultValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setPortDefaultValue" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DFGExec_setPortDefaultValue" "', argument " "3"" of type '" "FabricCore::RTVal""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DFGExec_setPortDefaultValue" "', argument " "3"" of type '" "FabricCore::RTVal""'");
    } else {
      FabricCore::RTVal * temp = reinterpret_cast< FabricCore::RTVal * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->setPortDefaultValue((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getImportPathname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_getImportPathname",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getImportPathname" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (char *)(arg1)->getImportPathname();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setImportPathname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_setImportPathname",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setImportPathname" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->setImportPathname((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_bind__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DFGBinding result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_bind",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_bind" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_bind" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (arg1)->bind(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGBinding(static_cast< const FabricCore::DFGBinding& >(result))), SWIGTYPE_p_FabricCore__DFGBinding, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_bind__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DFGBinding result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_bind",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_bind" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (arg1)->bind();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGBinding(static_cast< const FabricCore::DFGBinding& >(result))), SWIGTYPE_p_FabricCore__DFGBinding, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_removeExecPort__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_removeExecPort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_removeExecPort" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->removeExecPort((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_removeExecPort__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_removeExecPort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_removeExecPort" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_removeExecPort" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (arg1)->removeExecPort(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_removeExecPort(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DFGExec_removeExecPort__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DFGExec_removeExecPort__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_removeExecPort'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    removeExecPort(FabricCore::DFGExec *,char const *)\n"
    "    removeExecPort(FabricCore::DFGExec *,unsigned int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_removeNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_removeNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_removeNode" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->removeNode((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_createView__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  FabricCore::DFGNotificationCallback arg2 = (FabricCore::DFGNotificationCallback) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::DFGView result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_createView",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_createView" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "DFGExec_createView" "', argument " "2"" of type '" "FabricCore::DFGNotificationCallback""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DFGExec_createView" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      result = (arg1)->createView(arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGView(static_cast< const FabricCore::DFGView& >(result))), SWIGTYPE_p_FabricCore__DFGView, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExecPortTypeSpec__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getExecPortTypeSpec",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getExecPortTypeSpec" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_getExecPortTypeSpec" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (char *)(arg1)->getExecPortTypeSpec(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExecPortTypeSpec__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getExecPortTypeSpec",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getExecPortTypeSpec" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)(arg1)->getExecPortTypeSpec((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExecPortTypeSpec(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DFGExec_getExecPortTypeSpec__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DFGExec_getExecPortTypeSpec__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_getExecPortTypeSpec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getExecPortTypeSpec(FabricCore::DFGExec *,unsigned int)\n"
    "    getExecPortTypeSpec(FabricCore::DFGExec *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setExecPortTypeSpec__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_setExecPortTypeSpec",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setExecPortTypeSpec" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_setExecPortTypeSpec" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      (arg1)->setExecPortTypeSpec(arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setExecPortTypeSpec__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_setExecPortTypeSpec",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setExecPortTypeSpec" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      (arg1)->setExecPortTypeSpec((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setExecPortTypeSpec(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DFGExec_setExecPortTypeSpec__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DFGExec_setExecPortTypeSpec__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_setExecPortTypeSpec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setExecPortTypeSpec(FabricCore::DFGExec *,unsigned int,char const *)\n"
    "    setExecPortTypeSpec(FabricCore::DFGExec *,char const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExecPortName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getExecPortName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getExecPortName" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_getExecPortName" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (char *)(arg1)->getExecPortName(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExecPortName__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getExecPortName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getExecPortName" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)(arg1)->getExecPortName((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getExecPortName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DFGExec_getExecPortName__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DFGExec_getExecPortName__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DFGExec_getExecPortName__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_getExecPortName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getExecPortName(FabricCore::DFGExec const *,unsigned int)\n"
    "    getExecPortName(FabricCore::DFGExec *,unsigned int)\n"
    "    getExecPortName(FabricCore::DFGExec *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getNodePortCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getNodePortCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getNodePortCount" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (unsigned int)(arg1)->getNodePortCount((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getNodePortName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_getNodePortName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getNodePortName" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGExec_getNodePortName" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DFGExec_getNodePortName" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (char *)(arg1)->getNodePortName(arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getNodePortName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_getNodePortName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getNodePortName" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DFGExec_getNodePortName" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (char *)(arg1)->getNodePortName((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getNodePortName__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getNodePortName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getNodePortName" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)(arg1)->getNodePortName((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getNodePortName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DFGExec_getNodePortName__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DFGExec_getNodePortName__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DFGExec_getNodePortName__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_getNodePortName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getNodePortName(FabricCore::DFGExec *,unsigned int,unsigned int)\n"
    "    getNodePortName(FabricCore::DFGExec *,char const *,unsigned int)\n"
    "    getNodePortName(FabricCore::DFGExec *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_exportNodesJSON__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  uint32_t arg2 ;
  char **arg3 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_exportNodesJSON",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_exportNodesJSON" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    int i;
    if (!PyList_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expecting a list");
      return NULL;
    }
    arg2 = PyList_Size(obj1);
    arg3 = (char **) alloca((arg2+1)*sizeof(char *));
    for (i = 0; i < arg2; i++) {
      PyObject *s = PyList_GetItem(obj1,i);
      if (!PyString_Check(s) && !PyUnicode_Check(s)) {
        PyErr_SetString(PyExc_ValueError, "List items must be strings");
        return NULL;
      }
      arg3[i] = PyString_AsString(s);
    }
    arg3[i] = 0;
  }
  {
    try {
      result = (arg1)->exportNodesJSON(arg2,(char const *const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_importNodesJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_importNodesJSON",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_importNodesJSON" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (arg1)->importNodesJSON((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_implodeNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  char **arg4 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_implodeNodes",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_implodeNodes" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    int i;
    if (!PyList_Check(obj2)) {
      PyErr_SetString(PyExc_ValueError, "Expecting a list");
      return NULL;
    }
    arg3 = PyList_Size(obj2);
    arg4 = (char **) alloca((arg3+1)*sizeof(char *));
    for (i = 0; i < arg3; i++) {
      PyObject *s = PyList_GetItem(obj2,i);
      if (!PyString_Check(s) && !PyUnicode_Check(s)) {
        PyErr_SetString(PyExc_ValueError, "List items must be strings");
        return NULL;
      }
      arg4[i] = PyString_AsString(s);
    }
    arg4[i] = 0;
  }
  {
    try {
      result = (char *)(arg1)->implodeNodes((char const *)arg2,arg3,(char const *const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_explodeNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_explodeNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_explodeNode" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (arg1)->explodeNode((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getPresetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_getPresetName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getPresetName" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (char *)((FabricCore::DFGExec const *)arg1)->getPresetName();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getPresetGUID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_getPresetGUID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getPresetGUID" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = ((FabricCore::DFGExec const *)arg1)->getPresetGUID();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setPresetGUID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_setPresetGUID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setPresetGUID" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      ((FabricCore::DFGExec const *)arg1)->setPresetGUID((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getOrigPresetGUID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_getOrigPresetGUID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getOrigPresetGUID" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = ((FabricCore::DFGExec const *)arg1)->getOrigPresetGUID();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_editWouldSplitFromPreset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_editWouldSplitFromPreset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_editWouldSplitFromPreset" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      result = (bool)((FabricCore::DFGExec const *)arg1)->editWouldSplitFromPreset();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_maybeSplitFromPreset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGExec_maybeSplitFromPreset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_maybeSplitFromPreset" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  {
    try {
      ((FabricCore::DFGExec const *)arg1)->maybeSplitFromPreset();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_exportNodesJSON__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_exportNodesJSON",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_exportNodesJSON" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  arg2 = obj1;
  result = (PyObject *)FabricCore_DFGExec_exportNodesJSON__SWIG_1(arg1,arg2);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_exportNodesJSON__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_exportNodesJSON",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_exportNodesJSON" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  arg2 = obj1;
  arg3 = obj2;
  result = (PyObject *)FabricCore_DFGExec_exportNodesJSON__SWIG_2(arg1,arg2,arg3);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_exportNodesJSON(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_DFGExec_exportNodesJSON__SWIG_0(self, args);
        }
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_p_char, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DFGExec_exportNodesJSON__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_DFGExec_exportNodesJSON__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_DFGExec_exportNodesJSON__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_exportNodesJSON'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    exportNodesJSON(FabricCore::DFGExec *,uint32_t,char const *const *)\n"
    "    exportNodesJSON(FabricCore::DFGExec *,PyObject *)\n"
    "    exportNodesJSON(FabricCore::DFGExec *,PyObject *,PyObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_bind__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_bind",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_bind" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  arg2 = obj1;
  result = (PyObject *)FabricCore_DFGExec_bind__SWIG_2(arg1,arg2);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_bind(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DFGExec_bind__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DFGExec_bind__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_DFGExec_bind__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_bind'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bind(FabricCore::DFGExec *,uint32_t)\n"
    "    bind(FabricCore::DFGExec *)\n"
    "    bind(FabricCore::DFGExec *,PyObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getPortDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_getPortDefaultValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getPortDefaultValue" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  arg2 = obj1;
  arg3 = obj2;
  result = (PyObject *)FabricCore_DFGExec_getPortDefaultValue(arg1,arg2,arg3);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getInstPortResolvedDefaultValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_getInstPortResolvedDefaultValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getInstPortResolvedDefaultValue" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  arg2 = obj1;
  arg3 = obj2;
  result = (PyObject *)FabricCore_DFGExec_getInstPortResolvedDefaultValue(arg1,arg2,arg3);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setPortDefaultValue__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  PyObject *arg4 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGExec_setPortDefaultValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setPortDefaultValue" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  arg2 = obj1;
  arg3 = obj2;
  arg4 = obj3;
  result = (PyObject *)FabricCore_DFGExec_setPortDefaultValue__SWIG_2(arg1,arg2,arg3,arg4);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setPortDefaultValue__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGExec_setPortDefaultValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_setPortDefaultValue" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  arg2 = obj1;
  arg3 = obj2;
  result = (PyObject *)FabricCore_DFGExec_setPortDefaultValue__SWIG_3(arg1,arg2,arg3);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_setPortDefaultValue(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_FabricCore__RTVal, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DFGExec_setPortDefaultValue__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_DFGExec_setPortDefaultValue__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_FabricCore__RTVal, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DFGExec_setPortDefaultValue__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          _v = (argv[3] != 0);
          if (_v) {
            return _wrap_DFGExec_setPortDefaultValue__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_setPortDefaultValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setPortDefaultValue(FabricCore::DFGExec *,char const *,FabricCore::RTVal,bool)\n"
    "    setPortDefaultValue(FabricCore::DFGExec *,char const *,FabricCore::RTVal)\n"
    "    setPortDefaultValue(FabricCore::DFGExec *,PyObject *,PyObject *,PyObject *)\n"
    "    setPortDefaultValue(FabricCore::DFGExec *,PyObject *,PyObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_getDebugNodePortValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_getDebugNodePortValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_getDebugNodePortValue" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  arg2 = obj1;
  result = (PyObject *)FabricCore_DFGExec_getDebugNodePortValue(arg1,arg2);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_createView__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGExec_createView",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGExec_createView" "', argument " "1"" of type '" "FabricCore::DFGExec *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  arg2 = obj1;
  result = (PyObject *)FabricCore_DFGExec_createView__SWIG_1(arg1,arg2);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGExec_createView(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_DFGExec_createView__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGExec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_int__void);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DFGExec_createView__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGExec_createView'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    createView(FabricCore::DFGExec *,FabricCore::DFGNotificationCallback,void *)\n"
    "    createView(FabricCore::DFGExec *,PyObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *DFGExec_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__DFGExec, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DFGBinding_getFECDFGBindingRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_DFGBindingRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGBinding_getFECDFGBindingRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_getFECDFGBindingRef" "', argument " "1"" of type '" "FabricCore::DFGBinding const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    try {
      result = (FEC_DFGBindingRef)((FabricCore::DFGBinding const *)arg1)->getFECDFGBindingRef();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DFGBinding__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DFGBinding")) SWIG_fail;
  {
    try {
      result = (FabricCore::DFGBinding *)new FabricCore::DFGBinding();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DFGBinding, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DFGBinding__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DFGBinding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DFGBinding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__DFGBinding,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DFGBinding" "', argument " "1"" of type '" "FabricCore::DFGBinding const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DFGBinding" "', argument " "1"" of type '" "FabricCore::DFGBinding const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    try {
      result = (FabricCore::DFGBinding *)new FabricCore::DFGBinding((FabricCore::DFGBinding const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DFGBinding, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DFGBinding(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DFGBinding__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__DFGBinding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DFGBinding__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DFGBinding'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::DFGBinding()\n"
    "    FabricCore::DFGBinding(FabricCore::DFGBinding const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DFGBinding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DFGBinding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DFGBinding" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_getBindingID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGBinding_getBindingID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_getBindingID" "', argument " "1"" of type '" "FabricCore::DFGBinding const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    try {
      result = (uint32_t)((FabricCore::DFGBinding const *)arg1)->getBindingID();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_getHost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DFGHost result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGBinding_getHost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_getHost" "', argument " "1"" of type '" "FabricCore::DFGBinding const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    try {
      result = ((FabricCore::DFGBinding const *)arg1)->getHost();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGHost(static_cast< const FabricCore::DFGHost& >(result))), SWIGTYPE_p_FabricCore__DFGHost, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_getExec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DFGExec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGBinding_getExec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_getExec" "', argument " "1"" of type '" "FabricCore::DFGBinding const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    try {
      result = ((FabricCore::DFGBinding const *)arg1)->getExec();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGExec(static_cast< const FabricCore::DFGExec& >(result))), SWIGTYPE_p_FabricCore__DFGExec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setArgValue_lockType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  FabricCore::LockType arg2 ;
  unsigned int arg3 ;
  FabricCore::RTVal arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DFGBinding_setArgValue_lockType",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_setArgValue_lockType" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGBinding_setArgValue_lockType" "', argument " "2"" of type '" "FabricCore::LockType""'");
  } 
  arg2 = static_cast< FabricCore::LockType >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DFGBinding_setArgValue_lockType" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DFGBinding_setArgValue_lockType" "', argument " "4"" of type '" "FabricCore::RTVal""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DFGBinding_setArgValue_lockType" "', argument " "4"" of type '" "FabricCore::RTVal""'");
    } else {
      FabricCore::RTVal * temp = reinterpret_cast< FabricCore::RTVal * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DFGBinding_setArgValue_lockType" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      (arg1)->setArgValue_lockType(arg2,arg3,arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setArgValue_lockType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  FabricCore::LockType arg2 ;
  unsigned int arg3 ;
  FabricCore::RTVal arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGBinding_setArgValue_lockType",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_setArgValue_lockType" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGBinding_setArgValue_lockType" "', argument " "2"" of type '" "FabricCore::LockType""'");
  } 
  arg2 = static_cast< FabricCore::LockType >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DFGBinding_setArgValue_lockType" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DFGBinding_setArgValue_lockType" "', argument " "4"" of type '" "FabricCore::RTVal""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DFGBinding_setArgValue_lockType" "', argument " "4"" of type '" "FabricCore::RTVal""'");
    } else {
      FabricCore::RTVal * temp = reinterpret_cast< FabricCore::RTVal * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    try {
      (arg1)->setArgValue_lockType(arg2,arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setArgValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  unsigned int arg2 ;
  FabricCore::RTVal arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGBinding_setArgValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_setArgValue" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGBinding_setArgValue" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DFGBinding_setArgValue" "', argument " "3"" of type '" "FabricCore::RTVal""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DFGBinding_setArgValue" "', argument " "3"" of type '" "FabricCore::RTVal""'");
    } else {
      FabricCore::RTVal * temp = reinterpret_cast< FabricCore::RTVal * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DFGBinding_setArgValue" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->setArgValue(arg2,arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setArgValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  unsigned int arg2 ;
  FabricCore::RTVal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGBinding_setArgValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_setArgValue" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGBinding_setArgValue" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DFGBinding_setArgValue" "', argument " "3"" of type '" "FabricCore::RTVal""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DFGBinding_setArgValue" "', argument " "3"" of type '" "FabricCore::RTVal""'");
    } else {
      FabricCore::RTVal * temp = reinterpret_cast< FabricCore::RTVal * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->setArgValue(arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setArgValue_lockType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  FabricCore::LockType arg2 ;
  char *arg3 = (char *) 0 ;
  FabricCore::RTVal arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DFGBinding_setArgValue_lockType",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_setArgValue_lockType" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGBinding_setArgValue_lockType" "', argument " "2"" of type '" "FabricCore::LockType""'");
  } 
  arg2 = static_cast< FabricCore::LockType >(val2);
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DFGBinding_setArgValue_lockType" "', argument " "4"" of type '" "FabricCore::RTVal""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DFGBinding_setArgValue_lockType" "', argument " "4"" of type '" "FabricCore::RTVal""'");
    } else {
      FabricCore::RTVal * temp = reinterpret_cast< FabricCore::RTVal * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DFGBinding_setArgValue_lockType" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      (arg1)->setArgValue_lockType(arg2,(char const *)arg3,arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setArgValue_lockType__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  FabricCore::LockType arg2 ;
  char *arg3 = (char *) 0 ;
  FabricCore::RTVal arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGBinding_setArgValue_lockType",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_setArgValue_lockType" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGBinding_setArgValue_lockType" "', argument " "2"" of type '" "FabricCore::LockType""'");
  } 
  arg2 = static_cast< FabricCore::LockType >(val2);
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DFGBinding_setArgValue_lockType" "', argument " "4"" of type '" "FabricCore::RTVal""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DFGBinding_setArgValue_lockType" "', argument " "4"" of type '" "FabricCore::RTVal""'");
    } else {
      FabricCore::RTVal * temp = reinterpret_cast< FabricCore::RTVal * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    try {
      (arg1)->setArgValue_lockType(arg2,(char const *)arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setArgValue_lockType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGBinding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_FabricCore__RTVal, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DFGBinding_setArgValue_lockType__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGBinding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_FabricCore__RTVal, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DFGBinding_setArgValue_lockType__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGBinding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_FabricCore__RTVal, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_DFGBinding_setArgValue_lockType__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGBinding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_FabricCore__RTVal, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_DFGBinding_setArgValue_lockType__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGBinding_setArgValue_lockType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setArgValue_lockType(FabricCore::DFGBinding *,FabricCore::LockType,unsigned int,FabricCore::RTVal,bool)\n"
    "    setArgValue_lockType(FabricCore::DFGBinding *,FabricCore::LockType,unsigned int,FabricCore::RTVal)\n"
    "    setArgValue_lockType(FabricCore::DFGBinding *,FabricCore::LockType,char const *,FabricCore::RTVal,bool)\n"
    "    setArgValue_lockType(FabricCore::DFGBinding *,FabricCore::LockType,char const *,FabricCore::RTVal)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setArgValue__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  char *arg2 = (char *) 0 ;
  FabricCore::RTVal arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGBinding_setArgValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_setArgValue" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DFGBinding_setArgValue" "', argument " "3"" of type '" "FabricCore::RTVal""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DFGBinding_setArgValue" "', argument " "3"" of type '" "FabricCore::RTVal""'");
    } else {
      FabricCore::RTVal * temp = reinterpret_cast< FabricCore::RTVal * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DFGBinding_setArgValue" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->setArgValue((char const *)arg2,arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setArgValue__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  char *arg2 = (char *) 0 ;
  FabricCore::RTVal arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGBinding_setArgValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_setArgValue" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DFGBinding_setArgValue" "', argument " "3"" of type '" "FabricCore::RTVal""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DFGBinding_setArgValue" "', argument " "3"" of type '" "FabricCore::RTVal""'");
    } else {
      FabricCore::RTVal * temp = reinterpret_cast< FabricCore::RTVal * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->setArgValue((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_execute_lockType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  FabricCore::LockType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGBinding_execute_lockType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_execute_lockType" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGBinding_execute_lockType" "', argument " "2"" of type '" "FabricCore::LockType""'");
  } 
  arg2 = static_cast< FabricCore::LockType >(val2);
  {
    try {
      (arg1)->execute_lockType(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGBinding_execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_execute" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    try {
      (arg1)->execute();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setNotificationCallback__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  FabricCore::DFGNotificationCallback arg2 = (FabricCore::DFGNotificationCallback) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGBinding_setNotificationCallback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_setNotificationCallback" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "DFGBinding_setNotificationCallback" "', argument " "2"" of type '" "FabricCore::DFGNotificationCallback""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DFGBinding_setNotificationCallback" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      (arg1)->setNotificationCallback(arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_exportJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGBinding_exportJSON",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_exportJSON" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    try {
      result = (arg1)->exportJSON();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_deallocValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGBinding_deallocValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_deallocValues" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    try {
      (arg1)->deallocValues();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_getMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGBinding_getMetadata",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_getMetadata" "', argument " "1"" of type '" "FabricCore::DFGBinding const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)((FabricCore::DFGBinding const *)arg1)->getMetadata((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setMetadata__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGBinding_setMetadata",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_setMetadata" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DFGBinding_setMetadata" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->setMetadata((char const *)arg2,(char const *)arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setMetadata__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGBinding_setMetadata",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_setMetadata" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      (arg1)->setMetadata((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setMetadata(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGBinding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DFGBinding_setMetadata__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGBinding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DFGBinding_setMetadata__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGBinding_setMetadata'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setMetadata(FabricCore::DFGBinding *,char const *,char const *,bool)\n"
    "    setMetadata(FabricCore::DFGBinding *,char const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_getVars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGBinding_getVars",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_getVars" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    try {
      result = (arg1)->getVars();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_getVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGBinding_getVersion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_getVersion" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  {
    try {
      result = (uint32_t)(arg1)->getVersion();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_getArgValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGBinding_getArgValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_getArgValue" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  arg2 = obj1;
  result = (PyObject *)FabricCore_DFGBinding_getArgValue(arg1,arg2);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setArgValue__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  PyObject *arg4 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGBinding_setArgValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_setArgValue" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  arg2 = obj1;
  arg3 = obj2;
  arg4 = obj3;
  result = (PyObject *)FabricCore_DFGBinding_setArgValue__SWIG_4(arg1,arg2,arg3,arg4);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setArgValue__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGBinding_setArgValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_setArgValue" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  arg2 = obj1;
  arg3 = obj2;
  result = (PyObject *)FabricCore_DFGBinding_setArgValue__SWIG_5(arg1,arg2,arg3);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setArgValue(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGBinding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_FabricCore__RTVal, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DFGBinding_setArgValue__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGBinding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_FabricCore__RTVal, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DFGBinding_setArgValue__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGBinding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_DFGBinding_setArgValue__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGBinding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_FabricCore__RTVal, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DFGBinding_setArgValue__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGBinding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_FabricCore__RTVal, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DFGBinding_setArgValue__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGBinding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          _v = (argv[3] != 0);
          if (_v) {
            return _wrap_DFGBinding_setArgValue__SWIG_4(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGBinding_setArgValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setArgValue(FabricCore::DFGBinding *,unsigned int,FabricCore::RTVal,bool)\n"
    "    setArgValue(FabricCore::DFGBinding *,unsigned int,FabricCore::RTVal)\n"
    "    setArgValue(FabricCore::DFGBinding *,char const *,FabricCore::RTVal,bool)\n"
    "    setArgValue(FabricCore::DFGBinding *,char const *,FabricCore::RTVal)\n"
    "    setArgValue(FabricCore::DFGBinding *,PyObject *,PyObject *,PyObject *)\n"
    "    setArgValue(FabricCore::DFGBinding *,PyObject *,PyObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setNotificationCallback__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGBinding_setNotificationCallback",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGBinding_setNotificationCallback" "', argument " "1"" of type '" "FabricCore::DFGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  arg2 = obj1;
  result = (PyObject *)FabricCore_DFGBinding_setNotificationCallback__SWIG_1(arg1,arg2);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGBinding_setNotificationCallback(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGBinding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_DFGBinding_setNotificationCallback__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGBinding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_int__void);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DFGBinding_setNotificationCallback__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGBinding_setNotificationCallback'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setNotificationCallback(FabricCore::DFGBinding *,FabricCore::DFGNotificationCallback,void *)\n"
    "    setNotificationCallback(FabricCore::DFGBinding *,PyObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *DFGBinding_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__DFGBinding, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Context__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Context")) SWIG_fail;
  {
    try {
      result = (FabricCore::Context *)new FabricCore::Context();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Context, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Context__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_ContextRef arg1 = (FEC_ContextRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FabricCore::Context *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Context",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Context" "', argument " "1"" of type '" "FEC_ContextRef""'"); 
  }
  {
    try {
      result = (FabricCore::Context *)new FabricCore::Context(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Context, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Context__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Context *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Context",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Context" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Context" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    try {
      result = (FabricCore::Context *)new FabricCore::Context((FabricCore::Context const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Context, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Context(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Context__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Context__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *ptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &ptr, 0, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Context__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Context'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::Context()\n"
    "    FabricCore::Context(FEC_ContextRef)\n"
    "    FabricCore::Context(FabricCore::Context const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_getFECContextRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = (FabricCore::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_ContextRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Context_getFECContextRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_getFECContextRef" "', argument " "1"" of type '" "FabricCore::Context const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    try {
      result = (FEC_ContextRef)((FabricCore::Context const *)arg1)->getFECContextRef();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Context_getHost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = (FabricCore::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DFGHost result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Context_getHost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Context_getHost" "', argument " "1"" of type '" "FabricCore::Context const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    try {
      result = ((FabricCore::Context const *)arg1)->getHost();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGHost(static_cast< const FabricCore::DFGHost& >(result))), SWIGTYPE_p_FabricCore__DFGHost, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Context(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = (FabricCore::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Context",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Context, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Context" "', argument " "1"" of type '" "FabricCore::Context *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Context_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__Context, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DFGHost__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_DFGHostRef arg1 = (FEC_DFGHostRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FabricCore::DFGHost *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DFGHost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DFGHost" "', argument " "1"" of type '" "FEC_DFGHostRef""'"); 
  }
  {
    try {
      result = (FabricCore::DFGHost *)new FabricCore::DFGHost(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DFGHost, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_getFECDFGHostRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_DFGHostRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGHost_getFECDFGHostRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_getFECDFGHostRef" "', argument " "1"" of type '" "FabricCore::DFGHost const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    try {
      result = (FEC_DFGHostRef)((FabricCore::DFGHost const *)arg1)->getFECDFGHostRef();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DFGHost__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DFGHost")) SWIG_fail;
  {
    try {
      result = (FabricCore::DFGHost *)new FabricCore::DFGHost();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DFGHost, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DFGHost__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DFGHost *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DFGHost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__DFGHost,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DFGHost" "', argument " "1"" of type '" "FabricCore::DFGHost const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DFGHost" "', argument " "1"" of type '" "FabricCore::DFGHost const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    try {
      result = (FabricCore::DFGHost *)new FabricCore::DFGHost((FabricCore::DFGHost const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DFGHost, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DFGHost(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DFGHost__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__DFGHost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DFGHost__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *ptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &ptr, 0, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DFGHost__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DFGHost'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::DFGHost(FEC_DFGHostRef)\n"
    "    FabricCore::DFGHost()\n"
    "    FabricCore::DFGHost(FabricCore::DFGHost const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DFGHost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DFGHost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DFGHost" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_getContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Context result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGHost_getContext",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_getContext" "', argument " "1"" of type '" "FabricCore::DFGHost const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    try {
      result = ((FabricCore::DFGHost const *)arg1)->getContext();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Context(static_cast< const FabricCore::Context& >(result))), SWIGTYPE_p_FabricCore__Context, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_maybeUndo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGHost_maybeUndo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_maybeUndo" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    try {
      result = (bool)(arg1)->maybeUndo();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_maybeRedo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGHost_maybeRedo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_maybeRedo" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    try {
      result = (bool)(arg1)->maybeRedo();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_flushUndoRedo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGHost_flushUndoRedo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_flushUndoRedo" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    try {
      (arg1)->flushUndoRedo();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_getPresetImportPathname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGHost_getPresetImportPathname",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_getPresetImportPathname" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)(arg1)->getPresetImportPathname((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_getPresetDesc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGHost_getPresetDesc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_getPresetDesc" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (arg1)->getPresetDesc((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_addPresetDir__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGHost_addPresetDir",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_addPresetDir" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    try {
      result = (char *)(arg1)->addPresetDir((char const *)arg2,(char const *)arg3,(char const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_addPresetDir__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGHost_addPresetDir",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_addPresetDir" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (char *)(arg1)->addPresetDir((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_addPresetDir(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGHost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DFGHost_addPresetDir__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGHost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DFGHost_addPresetDir__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGHost_addPresetDir'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addPresetDir(FabricCore::DFGHost *,char const *,char const *,char const *)\n"
    "    addPresetDir(FabricCore::DFGHost *,char const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_importPresetFileJSON__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DFGHost_importPresetFileJSON",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_importPresetFileJSON" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    if (PyString_Check(obj4) || obj4 == Py_None) {
      res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
    }
    else if (PyUnicode_Check(obj4)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj4);
      alloc5 = SWIG_NEWOBJ;
      res5 = SWIG_AsCharPtrAndSize(uniobj, &buf5, NULL, &alloc5);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5),
        "Error converting string or unicode argument to char *");
    }
    arg5 = buf5;
  }
  {
    try {
      result = (char *)(arg1)->importPresetFileJSON((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_importPresetFileJSON__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DFGHost_importPresetFileJSON",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_importPresetFileJSON" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    try {
      result = (char *)(arg1)->importPresetFileJSON((char const *)arg2,(char const *)arg3,(char const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_importPresetFileJSON(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGHost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DFGHost_importPresetFileJSON__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGHost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_DFGHost_importPresetFileJSON__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGHost_importPresetFileJSON'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    importPresetFileJSON(FabricCore::DFGHost *,char const *,char const *,char const *,char const *)\n"
    "    importPresetFileJSON(FabricCore::DFGHost *,char const *,char const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_exportPresetJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGHost_exportPresetJSON",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_exportPresetJSON" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (arg1)->exportPresetJSON((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_removePreset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGHost_removePreset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_removePreset" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->removePreset((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_createNewUnboundGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DFGExec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGHost_createNewUnboundGraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_createNewUnboundGraph" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    try {
      result = (arg1)->createNewUnboundGraph();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGExec(static_cast< const FabricCore::DFGExec& >(result))), SWIGTYPE_p_FabricCore__DFGExec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_createNewUnboundExecFromJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DFGExec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGHost_createNewUnboundExecFromJSON",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_createNewUnboundExecFromJSON" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (arg1)->createNewUnboundExecFromJSON((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGExec(static_cast< const FabricCore::DFGExec& >(result))), SWIGTYPE_p_FabricCore__DFGExec, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_createNewUnboundFunc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DFGExec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGHost_createNewUnboundFunc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_createNewUnboundFunc" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    try {
      result = (arg1)->createNewUnboundFunc();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGExec(static_cast< const FabricCore::DFGExec& >(result))), SWIGTYPE_p_FabricCore__DFGExec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_createBindingToNewGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DFGBinding result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGHost_createBindingToNewGraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_createBindingToNewGraph" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    try {
      result = (arg1)->createBindingToNewGraph();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGBinding(static_cast< const FabricCore::DFGBinding& >(result))), SWIGTYPE_p_FabricCore__DFGBinding, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_createBindingToNewFunc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DFGBinding result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGHost_createBindingToNewFunc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_createBindingToNewFunc" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    try {
      result = (arg1)->createBindingToNewFunc();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGBinding(static_cast< const FabricCore::DFGBinding& >(result))), SWIGTYPE_p_FabricCore__DFGBinding, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_createBindingFromJSON__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::DFGBinding result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGHost_createBindingFromJSON",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_createBindingFromJSON" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DFGHost_createBindingFromJSON" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = (arg1)->createBindingFromJSON((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGBinding(static_cast< const FabricCore::DFGBinding& >(result))), SWIGTYPE_p_FabricCore__DFGBinding, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_createBindingFromJSON__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DFGBinding result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGHost_createBindingFromJSON",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_createBindingFromJSON" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (arg1)->createBindingFromJSON((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGBinding(static_cast< const FabricCore::DFGBinding& >(result))), SWIGTYPE_p_FabricCore__DFGBinding, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_createBindingFromJSON(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGHost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DFGHost_createBindingFromJSON__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGHost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DFGHost_createBindingFromJSON__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGHost_createBindingFromJSON'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    createBindingFromJSON(FabricCore::DFGHost *,char const *,uint32_t)\n"
    "    createBindingFromJSON(FabricCore::DFGHost *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_createBindingToPreset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::DFGBinding result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGHost_createBindingToPreset",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_createBindingToPreset" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DFGHost_createBindingToPreset" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = (arg1)->createBindingToPreset((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGBinding(static_cast< const FabricCore::DFGBinding& >(result))), SWIGTYPE_p_FabricCore__DFGBinding, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_createBindingToPreset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DFGBinding result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGHost_createBindingToPreset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_createBindingToPreset" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (arg1)->createBindingToPreset((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGBinding(static_cast< const FabricCore::DFGBinding& >(result))), SWIGTYPE_p_FabricCore__DFGBinding, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_getBindingForID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DFGBinding result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DFGHost_getBindingForID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_getBindingForID" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DFGHost_getBindingForID" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (arg1)->getBindingForID(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGBinding(static_cast< const FabricCore::DFGBinding& >(result))), SWIGTYPE_p_FabricCore__DFGBinding, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_blockComps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGHost_blockComps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_blockComps" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    try {
      (arg1)->blockComps();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_unblockComps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DFGHost_unblockComps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_unblockComps" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  {
    try {
      (arg1)->unblockComps();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_createBindingToPreset__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGHost_createBindingToPreset",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_createBindingToPreset" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  arg2 = obj1;
  arg3 = obj2;
  result = (PyObject *)FabricCore_DFGHost_createBindingToPreset__SWIG_2(arg1,arg2,arg3);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_createBindingToPreset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGHost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DFGHost_createBindingToPreset__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGHost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DFGHost_createBindingToPreset__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__DFGHost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_DFGHost_createBindingToPreset__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DFGHost_createBindingToPreset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    createBindingToPreset(FabricCore::DFGHost *,char const *,uint32_t)\n"
    "    createBindingToPreset(FabricCore::DFGHost *,char const *)\n"
    "    createBindingToPreset(FabricCore::DFGHost *,PyObject *,PyObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFGHost_createBindingToExecutableFromJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DFGHost_createBindingToExecutableFromJSON",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFGHost_createBindingToExecutableFromJSON" "', argument " "1"" of type '" "FabricCore::DFGHost *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  arg2 = obj1;
  arg3 = obj2;
  result = (PyObject *)FabricCore_DFGHost_createBindingToExecutableFromJSON(arg1,arg2,arg3);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DFGHost_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__DFGHost, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ClientOptimizationType_Background_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClientOptimizationType_Background is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ClientOptimizationType_Background_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(FabricCore::ClientOptimizationType_Background));
  return pyobj;
}


SWIGINTERN int Swig_var_ClientOptimizationType_Synchronous_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClientOptimizationType_Synchronous is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ClientOptimizationType_Synchronous_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(FabricCore::ClientOptimizationType_Synchronous));
  return pyobj;
}


SWIGINTERN int Swig_var_ClientOptimizationType_None_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClientOptimizationType_None is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ClientOptimizationType_None_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(FabricCore::ClientOptimizationType_None));
  return pyobj;
}


SWIGINTERN int Swig_var_ClientLicenseType_Compute_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClientLicenseType_Compute is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ClientLicenseType_Compute_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(FabricCore::ClientLicenseType_Compute));
  return pyobj;
}


SWIGINTERN int Swig_var_ClientLicenseType_Interactive_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClientLicenseType_Interactive is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ClientLicenseType_Interactive_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(FabricCore::ClientLicenseType_Interactive));
  return pyobj;
}


SWIGINTERN int Swig_var_ClientLicenseType_Developer_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClientLicenseType_Developer is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ClientLicenseType_Developer_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(FabricCore::ClientLicenseType_Developer));
  return pyobj;
}


SWIGINTERN int Swig_var_RTValCodecResult_Reject_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RTValCodecResult_Reject is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RTValCodecResult_Reject_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FabricCore::RTValCodecResult_Reject));
  return pyobj;
}


SWIGINTERN int Swig_var_RTValCodecResult_Accept_Pending_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RTValCodecResult_Accept_Pending is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RTValCodecResult_Accept_Pending_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FabricCore::RTValCodecResult_Accept_Pending));
  return pyobj;
}


SWIGINTERN int Swig_var_RTValCodecResult_Accept_Complete_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RTValCodecResult_Accept_Complete is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RTValCodecResult_Accept_Complete_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FabricCore::RTValCodecResult_Accept_Complete));
  return pyobj;
}


SWIGINTERN int Swig_var_RTValCodecContext_BindingArgument_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RTValCodecContext_BindingArgument is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RTValCodecContext_BindingArgument_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FabricCore::RTValCodecContext_BindingArgument));
  return pyobj;
}


SWIGINTERN int Swig_var_RTValCodecContext_DefaultValue_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RTValCodecContext_DefaultValue is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RTValCodecContext_DefaultValue_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FabricCore::RTValCodecContext_DefaultValue));
  return pyobj;
}


SWIGINTERN int Swig_var_ReportSource_NONE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ReportSource_NONE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ReportSource_NONE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FabricCore::ReportSource_NONE));
  return pyobj;
}


SWIGINTERN int Swig_var_ReportSource_System_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ReportSource_System is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ReportSource_System_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FabricCore::ReportSource_System));
  return pyobj;
}


SWIGINTERN int Swig_var_ReportSource_User_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ReportSource_User is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ReportSource_User_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FabricCore::ReportSource_User));
  return pyobj;
}


SWIGINTERN int Swig_var_ReportSource_ALL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ReportSource_ALL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ReportSource_ALL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FabricCore::ReportSource_ALL));
  return pyobj;
}


SWIGINTERN int Swig_var_ReportLevel_Error_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ReportLevel_Error is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ReportLevel_Error_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FabricCore::ReportLevel_Error));
  return pyobj;
}


SWIGINTERN int Swig_var_ReportLevel_Warning_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ReportLevel_Warning is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ReportLevel_Warning_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FabricCore::ReportLevel_Warning));
  return pyobj;
}


SWIGINTERN int Swig_var_ReportLevel_Info_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ReportLevel_Info is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ReportLevel_Info_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FabricCore::ReportLevel_Info));
  return pyobj;
}


SWIGINTERN int Swig_var_ReportLevel_Debug_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ReportLevel_Debug is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ReportLevel_Debug_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(FabricCore::ReportLevel_Debug));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Client__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Client")) SWIG_fail;
  {
    try {
      result = (FabricCore::Client *)new FabricCore::Client();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Client, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Client__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client::ReportCallback arg1 = (FabricCore::Client::ReportCallback) 0 ;
  void *arg2 = (void *) 0 ;
  char *arg3 = (char *) 0 ;
  int res2 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::Client *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Client",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int res = SWIG_ConvertFunctionPtr(obj0, (void**)(&arg1), SWIGTYPE_p_f_p_void_unsigned_char_unsigned_char_p_q_const__char_unsigned_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_Client" "', argument " "1"" of type '" "FabricCore::Client::ReportCallback""'"); 
    }
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Client" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = (FabricCore::Client *)new FabricCore::Client(arg1,arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Client, SWIG_POINTER_NEW |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_getFECClientRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_ClientRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_getFECClientRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_getFECClientRef" "', argument " "1"" of type '" "FabricCore::Client const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      result = (FEC_ClientRef)((FabricCore::Client const *)arg1)->getFECClientRef();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_Create__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client::ReportCallback arg1 = (FabricCore::Client::ReportCallback) 0 ;
  void *arg2 = (void *) 0 ;
  char *arg3 = (char *) 0 ;
  int res2 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::Client result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Client_Create",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int res = SWIG_ConvertFunctionPtr(obj0, (void**)(&arg1), SWIGTYPE_p_f_p_void_unsigned_char_unsigned_char_p_q_const__char_unsigned_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "Client_Create" "', argument " "1"" of type '" "FabricCore::Client::ReportCallback""'"); 
    }
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Client_Create" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = FabricCore::Client::Create(arg1,arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Client(static_cast< const FabricCore::Client& >(result))), SWIGTYPE_p_FabricCore__Client, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Client__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Client *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Client",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Client" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Client" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      result = (FabricCore::Client *)new FabricCore::Client((FabricCore::Client const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__Client, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Client(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Client__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Client__SWIG_3(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    void *ptr = 0;
    int res = SWIG_ConvertFunctionPtr(argv[0], &ptr, SWIGTYPE_p_f_p_void_unsigned_char_unsigned_char_p_q_const__char_unsigned_int__void);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Client__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Client'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::Client()\n"
    "    FabricCore::Client(FabricCore::Client::ReportCallback,void *,char const *)\n"
    "    FabricCore::Client(FabricCore::Client const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_getContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Context result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_getContext",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_getContext" "', argument " "1"" of type '" "FabricCore::Client const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      result = ((FabricCore::Client const *)arg1)->getContext();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Context(static_cast< const FabricCore::Context& >(result))), SWIGTYPE_p_FabricCore__Context, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_setReportCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  FabricCore::Client::ReportCallback arg2 = (FabricCore::Client::ReportCallback) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Client_setReportCallback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_setReportCallback" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_void_unsigned_char_unsigned_char_p_q_const__char_unsigned_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "Client_setReportCallback" "', argument " "2"" of type '" "FabricCore::Client::ReportCallback""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Client_setReportCallback" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      (arg1)->setReportCallback(arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_getReportSourceMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::ReportSource result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_getReportSourceMask",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_getReportSourceMask" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      result = (FabricCore::ReportSource)(arg1)->getReportSourceMask();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_getReportLevelMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::ReportLevel result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_getReportLevelMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_getReportLevelMax" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      result = (FabricCore::ReportLevel)(arg1)->getReportLevelMax();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_setReportSourceMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  FabricCore::ReportSource arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Client_setReportSourceMask",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_setReportSourceMask" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Client_setReportSourceMask" "', argument " "2"" of type '" "FabricCore::ReportSource""'");
  } 
  arg2 = static_cast< FabricCore::ReportSource >(val2);
  {
    try {
      (arg1)->setReportSourceMask(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_setReportLevelMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  FabricCore::ReportLevel arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Client_setReportLevelMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_setReportLevelMax" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Client_setReportLevelMax" "', argument " "2"" of type '" "FabricCore::ReportLevel""'");
  } 
  arg2 = static_cast< FabricCore::ReportLevel >(val2);
  {
    try {
      (arg1)->setReportLevelMax(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_disableRuntimeLogging(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_disableRuntimeLogging",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_disableRuntimeLogging" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      (arg1)->disableRuntimeLogging();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_enableRuntimeLogging(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_enableRuntimeLogging",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_enableRuntimeLogging" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      (arg1)->enableRuntimeLogging();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_getContextID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_getContextID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_getContextID" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      result = (char *)(arg1)->getContextID();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_getMemoryUsage_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_getMemoryUsage_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_getMemoryUsage_Variant" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      result = (arg1)->getMemoryUsage_Variant();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_startInstrumentation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_startInstrumentation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_startInstrumentation" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      (arg1)->startInstrumentation();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_stopInstrumentation_Variant__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Client_stopInstrumentation_Variant",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_stopInstrumentation_Variant" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (arg1)->stopInstrumentation_Variant((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_stopInstrumentation_Variant__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_stopInstrumentation_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_stopInstrumentation_Variant" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      result = (arg1)->stopInstrumentation_Variant();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_stopInstrumentation_Variant(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Client_stopInstrumentation_Variant__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Client_stopInstrumentation_Variant__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Client_stopInstrumentation_Variant'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stopInstrumentation_Variant(FabricCore::Client *,char const *)\n"
    "    stopInstrumentation_Variant(FabricCore::Client *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_setLogWarnings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Client_setLogWarnings",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_setLogWarnings" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Client_setLogWarnings" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setLogWarnings(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_loadExtension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Client_loadExtension",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_loadExtension" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Client_loadExtension" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->loadExtension((char const *)arg2,(char const *)arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_exportExtension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Client_exportExtension",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_exportExtension" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Client_exportExtension" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->exportExtension((char const *)arg2,(char const *)arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_setStatusCallback__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  FabricCore::Client::StatusCallback arg2 = (FabricCore::Client::StatusCallback) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Client_setStatusCallback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_setStatusCallback" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_int_p_q_const__char_unsigned_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "Client_setStatusCallback" "', argument " "2"" of type '" "FabricCore::Client::StatusCallback""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Client_setStatusCallback" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      (arg1)->setStatusCallback(arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_getStatusUserdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_getStatusUserdata",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_getStatusUserdata" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      result = (void *)(arg1)->getStatusUserdata();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_setSlowOperationCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  FabricCore::Client::SlowOperationCallback arg2 = (FabricCore::Client::SlowOperationCallback) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Client_setSlowOperationCallback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_setSlowOperationCallback" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "Client_setSlowOperationCallback" "', argument " "2"" of type '" "FabricCore::Client::SlowOperationCallback""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Client_setSlowOperationCallback" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      (arg1)->setSlowOperationCallback(arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_queueStatusMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Client_queueStatusMessage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_queueStatusMessage" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      (arg1)->queueStatusMessage((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_enableBackgroundTasks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_enableBackgroundTasks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_enableBackgroundTasks" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      (arg1)->enableBackgroundTasks();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_isBackgroundOptimizationInProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_isBackgroundOptimizationInProgress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_isBackgroundOptimizationInProgress" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      result = (bool)(arg1)->isBackgroundOptimizationInProgress();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_adoptCurrentGLContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_adoptCurrentGLContext",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_adoptCurrentGLContext" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      (arg1)->adoptCurrentGLContext();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_idle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_idle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_idle" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      (arg1)->idle();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_supportsGPUCompute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_supportsGPUCompute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_supportsGPUCompute" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      result = (bool)(arg1)->supportsGPUCompute();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_getDFGHost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DFGHost result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_getDFGHost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_getDFGHost" "', argument " "1"" of type '" "FabricCore::Client const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      result = ((FabricCore::Client const *)arg1)->getDFGHost();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DFGHost(static_cast< const FabricCore::DFGHost& >(result))), SWIGTYPE_p_FabricCore__DFGHost, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_validateLicense(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_validateLicense",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_validateLicense" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      result = (bool)(arg1)->validateLicense();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_hasCommercialLicense(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Client_hasCommercialLicense",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_hasCommercialLicense" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      result = (bool)(arg1)->hasCommercialLicense();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_computeMD5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::String result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Client_computeMD5",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_computeMD5" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (arg1)->computeMD5((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::String(static_cast< const FabricCore::String& >(result))), SWIGTYPE_p_FabricCore__String, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    char const *cStr;
    uint32_t size;
    (&result)->getCStrAndSize( cStr, size );
    resultobj = PyString_FromStringAndSize( cStr, size );
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_Create__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::Client result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Client_Create",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  arg2 = obj1;
  result = FabricCore_Client_Create__SWIG_1(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new FabricCore::Client(static_cast< const FabricCore::Client& >(result))), SWIGTYPE_p_FabricCore__Client, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_Create(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_Client_Create__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *ptr = 0;
    int res = SWIG_ConvertFunctionPtr(argv[0], &ptr, SWIGTYPE_p_f_p_void_unsigned_char_unsigned_char_p_q_const__char_unsigned_int__void);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Client_Create__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Client_Create'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Create(FabricCore::Client::ReportCallback,void *,char const *)\n"
    "    FabricCore_Client_Create__SWIG_1(PyObject *,PyObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_setStatusCallback__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Client_setStatusCallback",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Client_setStatusCallback" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  arg2 = obj1;
  result = (PyObject *)FabricCore_Client_setStatusCallback__SWIG_1(arg1,arg2);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Client_setStatusCallback(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_Client_setStatusCallback__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_int_p_q_const__char_unsigned_int__void);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Client_setStatusCallback__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Client_setStatusCallback'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setStatusCallback(FabricCore::Client *,FabricCore::Client::StatusCallback,void *)\n"
    "    setStatusCallback(FabricCore::Client *,PyObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Client(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = (FabricCore::Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Client",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Client, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Client" "', argument " "1"" of type '" "FabricCore::Client *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Client_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__Client, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SetStandaloneLicense(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetStandaloneLicense",&obj0)) SWIG_fail;
  {
    if (PyString_Check(obj0) || obj0 == Py_None) {
      res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
    }
    else if (PyUnicode_Check(obj0)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj0);
      alloc1 = SWIG_NEWOBJ;
      res1 = SWIG_AsCharPtrAndSize(uniobj, &buf1, NULL, &alloc1);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1),
        "Error converting string or unicode argument to char *");
    }
    arg1 = buf1;
  }
  {
    try {
      FabricCore::SetStandaloneLicense((char const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypes_Variant__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetRegisteredTypes_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRegisteredTypes_Variant" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetRegisteredTypes_Variant" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    try {
      result = FabricCore::GetRegisteredTypes_Variant((FabricCore::Context const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetAggregateMemberInfo_Variant__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetAggregateMemberInfo_Variant",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetAggregateMemberInfo_Variant" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetAggregateMemberInfo_Variant" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = FabricCore::GetAggregateMemberInfo_Variant((FabricCore::Context const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeSize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetRegisteredTypeSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRegisteredTypeSize" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetRegisteredTypeSize" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (uint32_t)FabricCore::GetRegisteredTypeSize((FabricCore::Context const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeIsShallow__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetRegisteredTypeIsShallow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRegisteredTypeIsShallow" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetRegisteredTypeIsShallow" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (bool)FabricCore::GetRegisteredTypeIsShallow((FabricCore::Context const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeIsStruct__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetRegisteredTypeIsStruct",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRegisteredTypeIsStruct" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetRegisteredTypeIsStruct" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (bool)FabricCore::GetRegisteredTypeIsStruct((FabricCore::Context const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeIsObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetRegisteredTypeIsObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRegisteredTypeIsObject" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetRegisteredTypeIsObject" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (bool)FabricCore::GetRegisteredTypeIsObject((FabricCore::Context const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeIsInterface__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetRegisteredTypeIsInterface",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRegisteredTypeIsInterface" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetRegisteredTypeIsInterface" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (bool)FabricCore::GetRegisteredTypeIsInterface((FabricCore::Context const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeExtName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetRegisteredTypeExtName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRegisteredTypeExtName" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetRegisteredTypeExtName" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FabricCore::GetRegisteredTypeExtName((FabricCore::Context const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypes_Variant__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GetRegisteredTypes_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRegisteredTypes_Variant" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetRegisteredTypes_Variant" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      result = FabricCore::GetRegisteredTypes_Variant((FabricCore::Client const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypes_Variant(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GetRegisteredTypes_Variant__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GetRegisteredTypes_Variant__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GetRegisteredTypes_Variant'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::GetRegisteredTypes_Variant(FabricCore::Context const &)\n"
    "    FabricCore::GetRegisteredTypes_Variant(FabricCore::Client const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetAggregateMemberInfo_Variant__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetAggregateMemberInfo_Variant",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetAggregateMemberInfo_Variant" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetAggregateMemberInfo_Variant" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = FabricCore::GetAggregateMemberInfo_Variant((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetAggregateMemberInfo_Variant(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetAggregateMemberInfo_Variant__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetAggregateMemberInfo_Variant__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GetAggregateMemberInfo_Variant'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::GetAggregateMemberInfo_Variant(FabricCore::Context const &,char const *)\n"
    "    FabricCore::GetAggregateMemberInfo_Variant(FabricCore::Client const &,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeSize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetRegisteredTypeSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRegisteredTypeSize" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetRegisteredTypeSize" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (uint32_t)FabricCore::GetRegisteredTypeSize((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeSize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetRegisteredTypeSize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetRegisteredTypeSize__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GetRegisteredTypeSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::GetRegisteredTypeSize(FabricCore::Context const &,char const *)\n"
    "    FabricCore::GetRegisteredTypeSize(FabricCore::Client const &,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeIsShallow__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetRegisteredTypeIsShallow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRegisteredTypeIsShallow" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetRegisteredTypeIsShallow" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (bool)FabricCore::GetRegisteredTypeIsShallow((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeIsShallow(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetRegisteredTypeIsShallow__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetRegisteredTypeIsShallow__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GetRegisteredTypeIsShallow'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::GetRegisteredTypeIsShallow(FabricCore::Context const &,char const *)\n"
    "    FabricCore::GetRegisteredTypeIsShallow(FabricCore::Client const &,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeIsStruct__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetRegisteredTypeIsStruct",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRegisteredTypeIsStruct" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetRegisteredTypeIsStruct" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (bool)FabricCore::GetRegisteredTypeIsStruct((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeIsStruct(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetRegisteredTypeIsStruct__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetRegisteredTypeIsStruct__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GetRegisteredTypeIsStruct'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::GetRegisteredTypeIsStruct(FabricCore::Context const &,char const *)\n"
    "    FabricCore::GetRegisteredTypeIsStruct(FabricCore::Client const &,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeIsObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetRegisteredTypeIsObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRegisteredTypeIsObject" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetRegisteredTypeIsObject" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (bool)FabricCore::GetRegisteredTypeIsObject((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeIsObject(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetRegisteredTypeIsObject__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetRegisteredTypeIsObject__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GetRegisteredTypeIsObject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::GetRegisteredTypeIsObject(FabricCore::Context const &,char const *)\n"
    "    FabricCore::GetRegisteredTypeIsObject(FabricCore::Client const &,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeIsInterface__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetRegisteredTypeIsInterface",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRegisteredTypeIsInterface" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetRegisteredTypeIsInterface" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (bool)FabricCore::GetRegisteredTypeIsInterface((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeIsInterface(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetRegisteredTypeIsInterface__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetRegisteredTypeIsInterface__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GetRegisteredTypeIsInterface'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::GetRegisteredTypeIsInterface(FabricCore::Context const &,char const *)\n"
    "    FabricCore::GetRegisteredTypeIsInterface(FabricCore::Client const &,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeExtName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GetRegisteredTypeExtName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRegisteredTypeExtName" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetRegisteredTypeExtName" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)FabricCore::GetRegisteredTypeExtName((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetRegisteredTypeExtName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetRegisteredTypeExtName__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GetRegisteredTypeExtName__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GetRegisteredTypeExtName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::GetRegisteredTypeExtName(FabricCore::Context const &,char const *)\n"
    "    FabricCore::GetRegisteredTypeExtName(FabricCore::Client const &,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RTVal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RTVal")) SWIG_fail;
  {
    try {
      result = (FabricCore::RTVal *)new FabricCore::RTVal();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RTVal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_RTValRef arg1 = (FEC_RTValRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FabricCore::RTVal *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RTVal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RTVal" "', argument " "1"" of type '" "FEC_RTValRef""'"); 
  }
  {
    try {
      result = (FabricCore::RTVal *)new FabricCore::RTVal(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RTVal__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::RTVal *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RTVal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RTVal" "', argument " "1"" of type '" "FabricCore::RTVal const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RTVal" "', argument " "1"" of type '" "FabricCore::RTVal const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (FabricCore::RTVal *)new FabricCore::RTVal((FabricCore::RTVal const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RTVal(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RTVal__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__RTVal, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RTVal__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *ptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &ptr, 0, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RTVal__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_RTVal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::RTVal()\n"
    "    FabricCore::RTVal(FEC_RTValRef)\n"
    "    FabricCore::RTVal(FabricCore::RTVal const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getFECRTValRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getFECRTValRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getFECRTValRef" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (FEC_RTValRef)((FabricCore::RTVal const *)arg1)->getFECRTValRef();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_takeRTValFECRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_Ref result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_takeRTValFECRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_takeRTValFECRef" "', argument " "1"" of type '" "FabricCore::RTVal *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (FEC_Ref)(arg1)->takeRTValFECRef();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  FabricCore::RTVal *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_assign" "', argument " "1"" of type '" "FabricCore::RTVal *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RTVal_assign" "', argument " "2"" of type '" "FabricCore::RTVal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_assign" "', argument " "2"" of type '" "FabricCore::RTVal const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::RTVal * >(argp2);
  {
    try {
      (arg1)->assign((FabricCore::RTVal const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_Construct__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  FabricCore::RTVal *arg4 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RTVal_Construct",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_Construct" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_Construct" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RTVal_Construct" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RTVal_Construct" "', argument " "4"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg4 = reinterpret_cast< FabricCore::RTVal * >(argp4);
  {
    try {
      result = FabricCore::RTVal::Construct((FabricCore::Context const &)*arg1,(char const *)arg2,arg3,(FabricCore::RTVal const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_Construct__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  FabricCore::RTVal *arg4 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RTVal_Construct",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_Construct" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_Construct" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RTVal_Construct" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RTVal_Construct" "', argument " "4"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg4 = reinterpret_cast< FabricCore::RTVal * >(argp4);
  {
    try {
      result = FabricCore::RTVal::Construct((FabricCore::Client const &)*arg1,(char const *)arg2,arg3,(FabricCore::RTVal const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_Construct(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_FabricCore__RTVal, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RTVal_Construct__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_FabricCore__RTVal, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RTVal_Construct__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_Construct'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Construct(FabricCore::Context const &,char const *,uint32_t,FabricCore::RTVal const *)\n"
    "    FabricCore::RTVal::Construct(FabricCore::Client const &,char const *,uint32_t,FabricCore::RTVal const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructBoolean__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructBoolean",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructBoolean" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructBoolean" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructBoolean" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructBoolean((FabricCore::Context const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructBoolean__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructBoolean",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructBoolean" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructBoolean" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructBoolean" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructBoolean((FabricCore::Client const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructBoolean(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructBoolean__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructBoolean__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructBoolean'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructBoolean(FabricCore::Context const &,bool)\n"
    "    FabricCore::RTVal::ConstructBoolean(FabricCore::Client const &,bool)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructSInt8__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  int8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructSInt8",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructSInt8" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructSInt8" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructSInt8" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = static_cast< int8_t >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructSInt8((FabricCore::Context const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructSInt8__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  int8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructSInt8",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructSInt8" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructSInt8" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructSInt8" "', argument " "2"" of type '" "int8_t""'");
  } 
  arg2 = static_cast< int8_t >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructSInt8((FabricCore::Client const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructSInt8(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_signed_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructSInt8__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_signed_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructSInt8__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructSInt8'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructSInt8(FabricCore::Context const &,int8_t)\n"
    "    FabricCore::RTVal::ConstructSInt8(FabricCore::Client const &,int8_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructSInt16__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructSInt16",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructSInt16" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructSInt16" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructSInt16" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructSInt16((FabricCore::Context const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructSInt16__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructSInt16",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructSInt16" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructSInt16" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructSInt16" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructSInt16((FabricCore::Client const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructSInt16(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructSInt16__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructSInt16__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructSInt16'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructSInt16(FabricCore::Context const &,int16_t)\n"
    "    FabricCore::RTVal::ConstructSInt16(FabricCore::Client const &,int16_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructSInt32__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructSInt32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructSInt32" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructSInt32" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructSInt32" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructSInt32((FabricCore::Context const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructSInt32__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructSInt32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructSInt32" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructSInt32" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructSInt32" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructSInt32((FabricCore::Client const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructSInt32(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructSInt32__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructSInt32__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructSInt32'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructSInt32(FabricCore::Context const &,int32_t)\n"
    "    FabricCore::RTVal::ConstructSInt32(FabricCore::Client const &,int32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructSInt64__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructSInt64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructSInt64" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructSInt64" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructSInt64" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructSInt64((FabricCore::Context const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructSInt64__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructSInt64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructSInt64" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructSInt64" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructSInt64" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructSInt64((FabricCore::Client const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructSInt64(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructSInt64__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructSInt64__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructSInt64'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructSInt64(FabricCore::Context const &,int64_t)\n"
    "    FabricCore::RTVal::ConstructSInt64(FabricCore::Client const &,int64_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructUInt8__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructUInt8",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructUInt8" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructUInt8" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructUInt8" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructUInt8((FabricCore::Context const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructUInt8__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructUInt8",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructUInt8" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructUInt8" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructUInt8" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructUInt8((FabricCore::Client const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructUInt8(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructUInt8__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructUInt8__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructUInt8'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructUInt8(FabricCore::Context const &,uint8_t)\n"
    "    FabricCore::RTVal::ConstructUInt8(FabricCore::Client const &,uint8_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructUInt16__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructUInt16",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructUInt16" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructUInt16" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructUInt16" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructUInt16((FabricCore::Context const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructUInt16__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructUInt16",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructUInt16" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructUInt16" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructUInt16" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructUInt16((FabricCore::Client const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructUInt16(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructUInt16__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructUInt16__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructUInt16'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructUInt16(FabricCore::Context const &,uint16_t)\n"
    "    FabricCore::RTVal::ConstructUInt16(FabricCore::Client const &,uint16_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructUInt32__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructUInt32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructUInt32" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructUInt32" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructUInt32" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructUInt32((FabricCore::Context const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructUInt32__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructUInt32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructUInt32" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructUInt32" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructUInt32" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructUInt32((FabricCore::Client const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructUInt32(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructUInt32__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructUInt32__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructUInt32'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructUInt32(FabricCore::Context const &,uint32_t)\n"
    "    FabricCore::RTVal::ConstructUInt32(FabricCore::Client const &,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructUInt64__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructUInt64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructUInt64" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructUInt64" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructUInt64" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructUInt64((FabricCore::Context const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructUInt64__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructUInt64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructUInt64" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructUInt64" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructUInt64" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructUInt64((FabricCore::Client const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructUInt64(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructUInt64__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructUInt64__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructUInt64'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructUInt64(FabricCore::Context const &,uint64_t)\n"
    "    FabricCore::RTVal::ConstructUInt64(FabricCore::Client const &,uint64_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructFloat32__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructFloat32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructFloat32" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructFloat32" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructFloat32" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructFloat32((FabricCore::Context const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructFloat32__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructFloat32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructFloat32" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructFloat32" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructFloat32" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructFloat32((FabricCore::Client const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructFloat32(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructFloat32__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructFloat32__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructFloat32'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructFloat32(FabricCore::Context const &,float)\n"
    "    FabricCore::RTVal::ConstructFloat32(FabricCore::Client const &,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructFloat64__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructFloat64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructFloat64" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructFloat64" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructFloat64" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructFloat64((FabricCore::Context const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructFloat64__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructFloat64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructFloat64" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructFloat64" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_ConstructFloat64" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = FabricCore::RTVal::ConstructFloat64((FabricCore::Client const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructFloat64(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructFloat64__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RTVal_ConstructFloat64__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructFloat64'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructFloat64(FabricCore::Context const &,double)\n"
    "    FabricCore::RTVal::ConstructFloat64(FabricCore::Client const &,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RTVal_ConstructString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructString" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructString" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RTVal_ConstructString" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = FabricCore::RTVal::ConstructString((FabricCore::Context const &)*arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RTVal_ConstructString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructString" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructString" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RTVal_ConstructString" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = FabricCore::RTVal::ConstructString((FabricCore::Client const &)*arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructString" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructString" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = FabricCore::RTVal::ConstructString((FabricCore::Context const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructString__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructString" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructString" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = FabricCore::RTVal::ConstructString((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RTVal_ConstructString__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RTVal_ConstructString__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RTVal_ConstructString__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RTVal_ConstructString__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructString(FabricCore::Context const &,char const *,uint32_t)\n"
    "    ConstructString(FabricCore::Client const &,char const *,uint32_t)\n"
    "    ConstructString(FabricCore::Context const &,char const *)\n"
    "    FabricCore::RTVal::ConstructString(FabricCore::Client const &,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructData" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructData" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RTVal_ConstructData" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    try {
      result = FabricCore::RTVal::ConstructData((FabricCore::Context const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructData" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructData" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RTVal_ConstructData" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    try {
      result = FabricCore::RTVal::ConstructData((FabricCore::Client const &)*arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RTVal_ConstructData__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RTVal_ConstructData__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructData(FabricCore::Context const &,void *)\n"
    "    FabricCore::RTVal::ConstructData(FabricCore::Client const &,void *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructFixedArray__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RTVal_ConstructFixedArray",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructFixedArray" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructFixedArray" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RTVal_ConstructFixedArray" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = FabricCore::RTVal::ConstructFixedArray((FabricCore::Context const &)*arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructFixedArray__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RTVal_ConstructFixedArray",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructFixedArray" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructFixedArray" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RTVal_ConstructFixedArray" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = FabricCore::RTVal::ConstructFixedArray((FabricCore::Client const &)*arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructFixedArray(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RTVal_ConstructFixedArray__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RTVal_ConstructFixedArray__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructFixedArray'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructFixedArray(FabricCore::Context const &,char const *,uint32_t)\n"
    "    FabricCore::RTVal::ConstructFixedArray(FabricCore::Client const &,char const *,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructVariableArray__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructVariableArray",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructVariableArray" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructVariableArray" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = FabricCore::RTVal::ConstructVariableArray((FabricCore::Context const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructVariableArray__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_ConstructVariableArray",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructVariableArray" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructVariableArray" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = FabricCore::RTVal::ConstructVariableArray((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructVariableArray(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RTVal_ConstructVariableArray__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RTVal_ConstructVariableArray__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructVariableArray'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructVariableArray(FabricCore::Context const &,char const *)\n"
    "    FabricCore::RTVal::ConstructVariableArray(FabricCore::Client const &,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructExternalArray__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RTVal_ConstructExternalArray",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructExternalArray" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructExternalArray" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RTVal_ConstructExternalArray" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RTVal_ConstructExternalArray" "', argument " "4"" of type '" "void *""'"); 
  }
  {
    try {
      result = FabricCore::RTVal::ConstructExternalArray((FabricCore::Context const &)*arg1,(char const *)arg2,arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructExternalArray__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RTVal_ConstructExternalArray",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructExternalArray" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructExternalArray" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RTVal_ConstructExternalArray" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RTVal_ConstructExternalArray" "', argument " "4"" of type '" "void *""'"); 
  }
  {
    try {
      result = FabricCore::RTVal::ConstructExternalArray((FabricCore::Client const &)*arg1,(char const *)arg2,arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructExternalArray(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &ptr, 0, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RTVal_ConstructExternalArray__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &ptr, 0, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RTVal_ConstructExternalArray__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructExternalArray'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructExternalArray(FabricCore::Context const &,char const *,uint32_t,void *)\n"
    "    FabricCore::RTVal::ConstructExternalArray(FabricCore::Client const &,char const *,uint32_t,void *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructDict__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RTVal_ConstructDict",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructDict" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructDict" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = FabricCore::RTVal::ConstructDict((FabricCore::Context const &)*arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructDict__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RTVal_ConstructDict",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_ConstructDict" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_ConstructDict" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = FabricCore::RTVal::ConstructDict((FabricCore::Client const &)*arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_ConstructDict(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RTVal_ConstructDict__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RTVal_ConstructDict__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_ConstructDict'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstructDict(FabricCore::Context const &,char const *,char const *)\n"
    "    FabricCore::RTVal::ConstructDict(FabricCore::Client const &,char const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_Create__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  FabricCore::RTVal *arg4 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RTVal_Create",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_Create" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_Create" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RTVal_Create" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RTVal_Create" "', argument " "4"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg4 = reinterpret_cast< FabricCore::RTVal * >(argp4);
  {
    try {
      result = FabricCore::RTVal::Create((FabricCore::Context const &)*arg1,(char const *)arg2,arg3,(FabricCore::RTVal const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_Create__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  FabricCore::RTVal *arg4 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RTVal_Create",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_Create" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_Create" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RTVal_Create" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RTVal_Create" "', argument " "4"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg4 = reinterpret_cast< FabricCore::RTVal * >(argp4);
  {
    try {
      result = FabricCore::RTVal::Create((FabricCore::Client const &)*arg1,(char const *)arg2,arg3,(FabricCore::RTVal const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_Create(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_FabricCore__RTVal, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RTVal_Create__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_FabricCore__RTVal, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RTVal_Create__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_Create'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Create(FabricCore::Context const &,char const *,uint32_t,FabricCore::RTVal const *)\n"
    "    FabricCore::RTVal::Create(FabricCore::Client const &,char const *,uint32_t,FabricCore::RTVal const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getBoolean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getBoolean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getBoolean" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (bool)((FabricCore::RTVal const *)arg1)->getBoolean();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getUInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getUInt8",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getUInt8" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (uint8_t)((FabricCore::RTVal const *)arg1)->getUInt8();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getUInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getUInt16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getUInt16" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (uint16_t)((FabricCore::RTVal const *)arg1)->getUInt16();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getUInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getUInt32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getUInt32" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (uint32_t)((FabricCore::RTVal const *)arg1)->getUInt32();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getUInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getUInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getUInt64" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (uint64_t)((FabricCore::RTVal const *)arg1)->getUInt64();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getSInt8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getSInt8",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getSInt8" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (int8_t)((FabricCore::RTVal const *)arg1)->getSInt8();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getSInt16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getSInt16",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getSInt16" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (int16_t)((FabricCore::RTVal const *)arg1)->getSInt16();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getSInt32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getSInt32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getSInt32" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (int32_t)((FabricCore::RTVal const *)arg1)->getSInt32();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getSInt64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getSInt64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getSInt64" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (int64_t)((FabricCore::RTVal const *)arg1)->getSInt64();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getFloat32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getFloat32",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getFloat32" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (float)((FabricCore::RTVal const *)arg1)->getFloat32();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_setFloat32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_setFloat32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_setFloat32" "', argument " "1"" of type '" "FabricCore::RTVal *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_setFloat32" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->setFloat32(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getFloat64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getFloat64",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getFloat64" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (double)((FabricCore::RTVal const *)arg1)->getFloat64();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getStringCString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getStringCString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getStringCString" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (char *)((FabricCore::RTVal const *)arg1)->getStringCString();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getStringLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getStringLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getStringLength" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (uint32_t)((FabricCore::RTVal const *)arg1)->getStringLength();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getData" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (void *)((FabricCore::RTVal const *)arg1)->getData();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_setData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_setData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_setData" "', argument " "1"" of type '" "FabricCore::RTVal *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RTVal_setData" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    try {
      (arg1)->setData(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_maybeGetSimpleData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  FabricCore::RTVal::SimpleData *arg2 = (FabricCore::RTVal::SimpleData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_maybeGetSimpleData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_maybeGetSimpleData" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FEC_RTValSimpleData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RTVal_maybeGetSimpleData" "', argument " "2"" of type '" "FabricCore::RTVal::SimpleData *""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::RTVal::SimpleData * >(argp2);
  {
    try {
      result = (bool)((FabricCore::RTVal const *)arg1)->maybeGetSimpleData(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_isNullObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_isNullObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_isNullObject" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (bool)((FabricCore::RTVal const *)arg1)->isNullObject();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_isArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_isArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_isArray" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (bool)((FabricCore::RTVal const *)arg1)->isArray();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_isDict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_isDict",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_isDict" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (bool)((FabricCore::RTVal const *)arg1)->isDict();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_isStruct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_isStruct",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_isStruct" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (bool)((FabricCore::RTVal const *)arg1)->isStruct();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_isObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_isObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_isObject" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (bool)((FabricCore::RTVal const *)arg1)->isObject();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_isData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_isData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_isData" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (bool)((FabricCore::RTVal const *)arg1)->isData();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_isInterface(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_isInterface",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_isInterface" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (bool)((FabricCore::RTVal const *)arg1)->isInterface();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getArraySize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getArraySize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getArraySize" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (uint32_t)((FabricCore::RTVal const *)arg1)->getArraySize();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_setArraySize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_setArraySize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_setArraySize" "', argument " "1"" of type '" "FabricCore::RTVal *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_setArraySize" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      (arg1)->setArraySize(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getArrayElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_getArrayElement",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getArrayElement" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_getArrayElement" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((FabricCore::RTVal const *)arg1)->getArrayElement(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getArrayElementRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_getArrayElementRef",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getArrayElementRef" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_getArrayElementRef" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = ((FabricCore::RTVal const *)arg1)->getArrayElementRef(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_setArrayElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  uint32_t arg2 ;
  FabricCore::RTVal *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RTVal_setArrayElement",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_setArrayElement" "', argument " "1"" of type '" "FabricCore::RTVal *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RTVal_setArrayElement" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RTVal_setArrayElement" "', argument " "3"" of type '" "FabricCore::RTVal const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_setArrayElement" "', argument " "3"" of type '" "FabricCore::RTVal const &""'"); 
  }
  arg3 = reinterpret_cast< FabricCore::RTVal * >(argp3);
  {
    try {
      (arg1)->setArrayElement(arg2,(FabricCore::RTVal const &)*arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getDictSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getDictSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getDictSize" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (uint32_t)((FabricCore::RTVal const *)arg1)->getDictSize();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getDictKeys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getDictKeys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getDictKeys" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = ((FabricCore::RTVal const *)arg1)->getDictKeys();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getDictElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  FabricCore::RTVal *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_getDictElement",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getDictElement" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RTVal_getDictElement" "', argument " "2"" of type '" "FabricCore::RTVal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_getDictElement" "', argument " "2"" of type '" "FabricCore::RTVal const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::RTVal * >(argp2);
  {
    try {
      result = ((FabricCore::RTVal const *)arg1)->getDictElement((FabricCore::RTVal const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_setDictElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  FabricCore::RTVal *arg2 = 0 ;
  FabricCore::RTVal *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RTVal_setDictElement",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_setDictElement" "', argument " "1"" of type '" "FabricCore::RTVal *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RTVal_setDictElement" "', argument " "2"" of type '" "FabricCore::RTVal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_setDictElement" "', argument " "2"" of type '" "FabricCore::RTVal const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::RTVal * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RTVal_setDictElement" "', argument " "3"" of type '" "FabricCore::RTVal const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_setDictElement" "', argument " "3"" of type '" "FabricCore::RTVal const &""'"); 
  }
  arg3 = reinterpret_cast< FabricCore::RTVal * >(argp3);
  {
    try {
      (arg1)->setDictElement((FabricCore::RTVal const &)*arg2,(FabricCore::RTVal const &)*arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_maybeGetMember(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_maybeGetMember",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_maybeGetMember" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = ((FabricCore::RTVal const *)arg1)->maybeGetMember((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_maybeGetMemberRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_maybeGetMemberRef",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_maybeGetMemberRef" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = ((FabricCore::RTVal const *)arg1)->maybeGetMemberRef((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_setMember(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  char *arg2 = (char *) 0 ;
  FabricCore::RTVal *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RTVal_setMember",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_setMember" "', argument " "1"" of type '" "FabricCore::RTVal *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RTVal_setMember" "', argument " "3"" of type '" "FabricCore::RTVal const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_setMember" "', argument " "3"" of type '" "FabricCore::RTVal const &""'"); 
  }
  arg3 = reinterpret_cast< FabricCore::RTVal * >(argp3);
  {
    try {
      (arg1)->setMember((char const *)arg2,(FabricCore::RTVal const &)*arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_callMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32_t arg4 ;
  FabricCore::RTVal *arg5 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RTVal_callMethod",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_callMethod" "', argument " "1"" of type '" "FabricCore::RTVal *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RTVal_callMethod" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RTVal_callMethod" "', argument " "5"" of type '" "FabricCore::RTVal *""'"); 
  }
  arg5 = reinterpret_cast< FabricCore::RTVal * >(argp5);
  {
    try {
      result = (arg1)->callMethod((char const *)arg2,(char const *)arg3,arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_copy" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = ((FabricCore::RTVal const *)arg1)->copy();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_clone" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = ((FabricCore::RTVal const *)arg1)->clone();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getDesc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getDesc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getDesc" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = ((FabricCore::RTVal const *)arg1)->getDesc();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getTypeName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getTypeName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getTypeName" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = ((FabricCore::RTVal const *)arg1)->getTypeName();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getTypeNameCStr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getTypeNameCStr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getTypeNameCStr" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = (char *)((FabricCore::RTVal const *)arg1)->getTypeNameCStr();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_getJSON(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RTVal_getJSON",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_getJSON" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      result = ((FabricCore::RTVal const *)arg1)->getJSON();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_setJSON__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  FabricCore::RTVal *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_setJSON",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_setJSON" "', argument " "1"" of type '" "FabricCore::RTVal *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RTVal_setJSON" "', argument " "2"" of type '" "FabricCore::RTVal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_setJSON" "', argument " "2"" of type '" "FabricCore::RTVal const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::RTVal * >(argp2);
  {
    try {
      (arg1)->setJSON((FabricCore::RTVal const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_setJSON__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_setJSON",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_setJSON" "', argument " "1"" of type '" "FabricCore::RTVal *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->setJSON((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_setJSON(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__RTVal, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FabricCore__RTVal, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RTVal_setJSON__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FabricCore__RTVal, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RTVal_setJSON__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RTVal_setJSON'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setJSON(FabricCore::RTVal *,FabricCore::RTVal const &)\n"
    "    setJSON(FabricCore::RTVal *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_isExEQTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  FabricCore::RTVal *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_isExEQTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_isExEQTo" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RTVal_isExEQTo" "', argument " "2"" of type '" "FabricCore::RTVal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RTVal_isExEQTo" "', argument " "2"" of type '" "FabricCore::RTVal const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::RTVal * >(argp2);
  {
    try {
      result = (bool)((FabricCore::RTVal const *)arg1)->isExEQTo((FabricCore::RTVal const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTVal_hasType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTVal_hasType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTVal_hasType" "', argument " "1"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (bool)((FabricCore::RTVal const *)arg1)->hasType((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RTVal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::RTVal *arg1 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RTVal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RTVal" "', argument " "1"" of type '" "FabricCore::RTVal *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::RTVal * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RTVal_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__RTVal, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ConstructRTValFromJSON__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ConstructRTValFromJSON",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstructRTValFromJSON" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConstructRTValFromJSON" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = FabricCore::ConstructRTValFromJSON((FabricCore::Client const &)*arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstructRTValFromJSON__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ConstructRTValFromJSON",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Context,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstructRTValFromJSON" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConstructRTValFromJSON" "', argument " "1"" of type '" "FabricCore::Context const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      result = FabricCore::ConstructRTValFromJSON((FabricCore::Context const &)*arg1,(char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstructRTValFromJSON(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ConstructRTValFromJSON__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Context, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ConstructRTValFromJSON__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ConstructRTValFromJSON'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::ConstructRTValFromJSON(FabricCore::Client const &,char const *,char const *)\n"
    "    FabricCore::ConstructRTValFromJSON(FabricCore::Context const &,char const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KLTokenStream__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::KLTokenStream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_KLTokenStream")) SWIG_fail;
  {
    try {
      result = (FabricCore::KLTokenStream *)new FabricCore::KLTokenStream();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__KLTokenStream, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KLTokenStream__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FEC_KLTokenStreamRef arg1 = (FEC_KLTokenStreamRef) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  FabricCore::KLTokenStream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KLTokenStream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KLTokenStream" "', argument " "1"" of type '" "FEC_KLTokenStreamRef""'"); 
  }
  {
    try {
      result = (FabricCore::KLTokenStream *)new FabricCore::KLTokenStream(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__KLTokenStream, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KLTokenStream__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::KLTokenStream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::KLTokenStream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KLTokenStream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__KLTokenStream,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KLTokenStream" "', argument " "1"" of type '" "FabricCore::KLTokenStream const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KLTokenStream" "', argument " "1"" of type '" "FabricCore::KLTokenStream const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::KLTokenStream * >(argp1);
  {
    try {
      result = (FabricCore::KLTokenStream *)new FabricCore::KLTokenStream((FabricCore::KLTokenStream const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__KLTokenStream, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KLTokenStream(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_KLTokenStream__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__KLTokenStream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KLTokenStream__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *ptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &ptr, 0, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KLTokenStream__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_KLTokenStream'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::KLTokenStream()\n"
    "    FabricCore::KLTokenStream(FEC_KLTokenStreamRef)\n"
    "    FabricCore::KLTokenStream(FabricCore::KLTokenStream const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_KLTokenStream_getFECTokenStreamRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::KLTokenStream *arg1 = (FabricCore::KLTokenStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FEC_KLTokenStreamRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KLTokenStream_getFECTokenStreamRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__KLTokenStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KLTokenStream_getFECTokenStreamRef" "', argument " "1"" of type '" "FabricCore::KLTokenStream const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::KLTokenStream * >(argp1);
  {
    try {
      result = (FEC_KLTokenStreamRef)((FabricCore::KLTokenStream const *)arg1)->getFECTokenStreamRef();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KLTokenStream_Create(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::KLTokenStream result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:KLTokenStream_Create",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KLTokenStream_Create" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KLTokenStream_Create" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "KLTokenStream_Create" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = FabricCore::KLTokenStream::Create((FabricCore::Client const &)*arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::KLTokenStream(static_cast< const FabricCore::KLTokenStream& >(result))), SWIGTYPE_p_FabricCore__KLTokenStream, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KLTokenStream_getNext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::KLTokenStream *arg1 = (FabricCore::KLTokenStream *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::KLTokenType result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:KLTokenStream_getNext",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__KLTokenStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KLTokenStream_getNext" "', argument " "1"" of type '" "FabricCore::KLTokenStream *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::KLTokenStream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KLTokenStream_getNext" "', argument " "2"" of type '" "uint32_t *""'"); 
  }
  arg2 = reinterpret_cast< uint32_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KLTokenStream_getNext" "', argument " "3"" of type '" "uint32_t *""'"); 
  }
  arg3 = reinterpret_cast< uint32_t * >(argp3);
  {
    try {
      result = (FabricCore::KLTokenType)(arg1)->getNext(arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_KLTokenStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::KLTokenStream *arg1 = (FabricCore::KLTokenStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_KLTokenStream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__KLTokenStream, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KLTokenStream" "', argument " "1"" of type '" "FabricCore::KLTokenStream *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::KLTokenStream * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *KLTokenStream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__KLTokenStream, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_RegisterKLExtension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  uint32_t arg5 ;
  FabricCore::KLSourceFile *arg6 = (FabricCore::KLSourceFile *) 0 ;
  bool arg7 ;
  bool arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:RegisterKLExtension",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegisterKLExtension" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegisterKLExtension" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    if (!PyList_Check(obj4)) {
      PyErr_SetString(PyExc_ValueError, "Expecting a list");
      return NULL;
    }
    arg5 = PyList_Size(obj4);
    arg6 = (FabricCore::KLSourceFile *) alloca((arg5)*sizeof(FabricCore::KLSourceFile));
    for ( uint32_t i = 0; i < arg5; i++ ) {
      arg6[i].filenameCStr = NULL;
      arg6[i].sourceCodeCStr = NULL;
      
      PyObject *s = PyList_GetItem(obj4,i);
      if (PyDict_Check(s)) {
        PyObject *filename = PyDict_GetItemString(s, "filename");
        if (filename && (PyString_Check(filename) || PyUnicode_Check(filename))) {
          arg6[i].filenameCStr = PyString_AsString(filename);
          PyObject *sourceCode = PyDict_GetItemString(s, "sourceCode");
          if (sourceCode && (PyString_Check(sourceCode) || PyUnicode_Check(sourceCode))) {
            arg6[i].sourceCodeCStr = PyString_AsString(sourceCode);
            continue;
          }
          else PyErr_SetString(PyExc_ValueError, "'sourceCode' must be string");
        }
        else PyErr_SetString(PyExc_ValueError, "'filename' must be string");
      }
      else PyErr_SetString(PyExc_ValueError, "List items must be dictionaries");
      
      return NULL;
    }
  }
  ecode7 = SWIG_AsVal_bool(obj5, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RegisterKLExtension" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_bool(obj6, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RegisterKLExtension" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  {
    try {
      FabricCore::RegisterKLExtension((FabricCore::Client const &)*arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,(FEC_KLSourceFile const *)arg6,arg7,arg8);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGCompiledObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGCompiledObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DGCompiledObject")) SWIG_fail;
  {
    try {
      result = (FabricCore::DGCompiledObject *)new FabricCore::DGCompiledObject();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGCompiledObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGCompiledObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGCompiledObject *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DGCompiledObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DGCompiledObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__DGCompiledObject,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DGCompiledObject" "', argument " "1"" of type '" "FabricCore::DGCompiledObject const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DGCompiledObject" "', argument " "1"" of type '" "FabricCore::DGCompiledObject const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGCompiledObject * >(argp1);
  {
    try {
      result = (FabricCore::DGCompiledObject *)new FabricCore::DGCompiledObject((FabricCore::DGCompiledObject const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGCompiledObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGCompiledObject(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DGCompiledObject__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__DGCompiledObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DGCompiledObject__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DGCompiledObject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::DGCompiledObject()\n"
    "    FabricCore::DGCompiledObject(FabricCore::DGCompiledObject const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGCompiledObject_getContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGCompiledObject *arg1 = (FabricCore::DGCompiledObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Context result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGCompiledObject_getContext",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGCompiledObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGCompiledObject_getContext" "', argument " "1"" of type '" "FabricCore::DGCompiledObject const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGCompiledObject * >(argp1);
  {
    try {
      result = ((FabricCore::DGCompiledObject const *)arg1)->getContext();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Context(static_cast< const FabricCore::Context& >(result))), SWIGTYPE_p_FabricCore__Context, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGCompiledObject_getErrors_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGCompiledObject *arg1 = (FabricCore::DGCompiledObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGCompiledObject_getErrors_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGCompiledObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGCompiledObject_getErrors_Variant" "', argument " "1"" of type '" "FabricCore::DGCompiledObject *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGCompiledObject * >(argp1);
  {
    try {
      result = (arg1)->getErrors();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DGCompiledObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGCompiledObject *arg1 = (FabricCore::DGCompiledObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DGCompiledObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGCompiledObject, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DGCompiledObject" "', argument " "1"" of type '" "FabricCore::DGCompiledObject *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGCompiledObject * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DGCompiledObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__DGCompiledObject, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DGBinding__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGBinding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DGBinding")) SWIG_fail;
  {
    try {
      result = (FabricCore::DGBinding *)new FabricCore::DGBinding();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGBinding, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGBinding__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DGBinding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DGBinding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DGBinding" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DGBinding" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    try {
      result = (FabricCore::DGBinding *)new FabricCore::DGBinding((FabricCore::Client const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGBinding, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGBinding__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGOperator *arg1 = 0 ;
  uint32_t arg2 ;
  char **arg3 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DGBinding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DGBinding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__DGOperator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DGBinding" "', argument " "1"" of type '" "FabricCore::DGOperator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DGBinding" "', argument " "1"" of type '" "FabricCore::DGOperator const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGOperator * >(argp1);
  {
    int i;
    if (!PyList_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expecting a list");
      return NULL;
    }
    arg2 = PyList_Size(obj1);
    arg3 = (char **) alloca((arg2+1)*sizeof(char *));
    for (i = 0; i < arg2; i++) {
      PyObject *s = PyList_GetItem(obj1,i);
      if (!PyString_Check(s) && !PyUnicode_Check(s)) {
        PyErr_SetString(PyExc_ValueError, "List items must be strings");
        return NULL;
      }
      arg3[i] = PyString_AsString(s);
    }
    arg3[i] = 0;
  }
  {
    try {
      result = (FabricCore::DGBinding *)new FabricCore::DGBinding((FabricCore::DGOperator const &)*arg1,arg2,(char const **)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGBinding, SWIG_POINTER_NEW |  0 );
  {
    
  }
  return resultobj;
fail:
  {
    
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGBinding__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGBinding *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DGBinding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DGBinding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__DGBinding,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DGBinding" "', argument " "1"" of type '" "FabricCore::DGBinding const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DGBinding" "', argument " "1"" of type '" "FabricCore::DGBinding const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGBinding * >(argp1);
  {
    try {
      result = (FabricCore::DGBinding *)new FabricCore::DGBinding((FabricCore::DGBinding const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGBinding, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGBinding(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DGBinding__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DGBinding__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__DGBinding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DGBinding__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__DGOperator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_DGBinding__SWIG_3(self, args);
        }
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_p_char, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_DGBinding__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DGBinding'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::DGBinding()\n"
    "    FabricCore::DGBinding(FabricCore::Client const &)\n"
    "    FabricCore::DGBinding(FabricCore::DGOperator const &,uint32_t,char const **)\n"
    "    FabricCore::DGBinding(FabricCore::DGBinding const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGBinding_setOperator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGBinding *arg1 = (FabricCore::DGBinding *) 0 ;
  FabricCore::DGOperator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGBinding_setOperator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGBinding_setOperator" "', argument " "1"" of type '" "FabricCore::DGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGBinding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__DGOperator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DGBinding_setOperator" "', argument " "2"" of type '" "FabricCore::DGOperator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGBinding_setOperator" "', argument " "2"" of type '" "FabricCore::DGOperator const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::DGOperator * >(argp2);
  {
    try {
      (arg1)->setOperator((FabricCore::DGOperator const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGBinding_getOperator_needswrap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGBinding *arg1 = (FabricCore::DGBinding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DGOperator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGBinding_getOperator_needswrap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGBinding_getOperator_needswrap" "', argument " "1"" of type '" "FabricCore::DGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGBinding * >(argp1);
  {
    try {
      result = (arg1)->getOperator();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DGOperator(static_cast< const FabricCore::DGOperator& >(result))), SWIGTYPE_p_FabricCore__DGOperator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGBinding_setParameterLayout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGBinding *arg1 = (FabricCore::DGBinding *) 0 ;
  uint32_t arg2 ;
  char **arg3 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGBinding_setParameterLayout",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGBinding_setParameterLayout" "', argument " "1"" of type '" "FabricCore::DGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGBinding * >(argp1);
  {
    int i;
    if (!PyList_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expecting a list");
      return NULL;
    }
    arg2 = PyList_Size(obj1);
    arg3 = (char **) alloca((arg2+1)*sizeof(char *));
    for (i = 0; i < arg2; i++) {
      PyObject *s = PyList_GetItem(obj1,i);
      if (!PyString_Check(s) && !PyUnicode_Check(s)) {
        PyErr_SetString(PyExc_ValueError, "List items must be strings");
        return NULL;
      }
      arg3[i] = PyString_AsString(s);
    }
    arg3[i] = 0;
  }
  {
    try {
      (arg1)->setParameterLayout(arg2,(char const **)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    
  }
  return resultobj;
fail:
  {
    
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGBinding_getParameterLayout_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGBinding *arg1 = (FabricCore::DGBinding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGBinding_getParameterLayout_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGBinding_getParameterLayout_Variant" "', argument " "1"" of type '" "FabricCore::DGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGBinding * >(argp1);
  {
    try {
      result = (arg1)->getParameterLayout_Variant();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DGBinding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGBinding *arg1 = (FabricCore::DGBinding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DGBinding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGBinding, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DGBinding" "', argument " "1"" of type '" "FabricCore::DGBinding *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGBinding * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DGBinding_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__DGBinding, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DGBindingList__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGBindingList *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DGBindingList")) SWIG_fail;
  {
    try {
      result = (FabricCore::DGBindingList *)new FabricCore::DGBindingList();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGBindingList, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGBindingList__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGBindingList *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DGBindingList *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DGBindingList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__DGBindingList,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DGBindingList" "', argument " "1"" of type '" "FabricCore::DGBindingList const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DGBindingList" "', argument " "1"" of type '" "FabricCore::DGBindingList const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGBindingList * >(argp1);
  {
    try {
      result = (FabricCore::DGBindingList *)new FabricCore::DGBindingList((FabricCore::DGBindingList const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGBindingList, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGBindingList(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DGBindingList__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__DGBindingList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DGBindingList__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DGBindingList'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::DGBindingList()\n"
    "    FabricCore::DGBindingList(FabricCore::DGBindingList const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGBindingList_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGBindingList *arg1 = (FabricCore::DGBindingList *) 0 ;
  FabricCore::DGBinding *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGBindingList_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGBindingList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGBindingList_append" "', argument " "1"" of type '" "FabricCore::DGBindingList *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGBindingList * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__DGBinding,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DGBindingList_append" "', argument " "2"" of type '" "FabricCore::DGBinding const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGBindingList_append" "', argument " "2"" of type '" "FabricCore::DGBinding const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::DGBinding * >(argp2);
  {
    try {
      (arg1)->append((FabricCore::DGBinding const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGBindingList_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGBindingList *arg1 = (FabricCore::DGBindingList *) 0 ;
  FabricCore::DGBinding *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DGBindingList_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGBindingList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGBindingList_insert" "', argument " "1"" of type '" "FabricCore::DGBindingList *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGBindingList * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__DGBinding,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DGBindingList_insert" "', argument " "2"" of type '" "FabricCore::DGBinding const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGBindingList_insert" "', argument " "2"" of type '" "FabricCore::DGBinding const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::DGBinding * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DGBindingList_insert" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      (arg1)->insert((FabricCore::DGBinding const &)*arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGBindingList_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGBindingList *arg1 = (FabricCore::DGBindingList *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGBindingList_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGBindingList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGBindingList_remove" "', argument " "1"" of type '" "FabricCore::DGBindingList *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGBindingList * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DGBindingList_remove" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      (arg1)->remove(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGBindingList_getBinding_needswrap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGBindingList *arg1 = (FabricCore::DGBindingList *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DGBinding result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGBindingList_getBinding_needswrap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGBindingList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGBindingList_getBinding_needswrap" "', argument " "1"" of type '" "FabricCore::DGBindingList *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGBindingList * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DGBindingList_getBinding_needswrap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (arg1)->getBinding(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DGBinding(static_cast< const FabricCore::DGBinding& >(result))), SWIGTYPE_p_FabricCore__DGBinding, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGBindingList_getCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGBindingList *arg1 = (FabricCore::DGBindingList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGBindingList_getCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGBindingList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGBindingList_getCount" "', argument " "1"" of type '" "FabricCore::DGBindingList *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGBindingList * >(argp1);
  {
    try {
      result = (uint32_t)(arg1)->getCount();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DGBindingList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGBindingList *arg1 = (FabricCore::DGBindingList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DGBindingList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGBindingList, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DGBindingList" "', argument " "1"" of type '" "FabricCore::DGBindingList *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGBindingList * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DGBindingList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__DGBindingList, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DGNamedObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNamedObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DGNamedObject")) SWIG_fail;
  {
    try {
      result = (FabricCore::DGNamedObject *)new FabricCore::DGNamedObject();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGNamedObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGNamedObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNamedObject *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DGNamedObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DGNamedObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__DGNamedObject,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DGNamedObject" "', argument " "1"" of type '" "FabricCore::DGNamedObject const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DGNamedObject" "', argument " "1"" of type '" "FabricCore::DGNamedObject const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNamedObject * >(argp1);
  {
    try {
      result = (FabricCore::DGNamedObject *)new FabricCore::DGNamedObject((FabricCore::DGNamedObject const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGNamedObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGNamedObject(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DGNamedObject__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__DGNamedObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DGNamedObject__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DGNamedObject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::DGNamedObject()\n"
    "    FabricCore::DGNamedObject(FabricCore::DGNamedObject const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGNamedObject_destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNamedObject *arg1 = (FabricCore::DGNamedObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGNamedObject_destroy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGNamedObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGNamedObject_destroy" "', argument " "1"" of type '" "FabricCore::DGNamedObject *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNamedObject * >(argp1);
  {
    try {
      (arg1)->destroy();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGNamedObject_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNamedObject *arg1 = (FabricCore::DGNamedObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGNamedObject_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGNamedObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGNamedObject_getName" "', argument " "1"" of type '" "FabricCore::DGNamedObject const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNamedObject * >(argp1);
  {
    try {
      result = (char *)((FabricCore::DGNamedObject const *)arg1)->getName();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGNamedObject_getName_stl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNamedObject *arg1 = (FabricCore::DGNamedObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGNamedObject_getName_stl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGNamedObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGNamedObject_getName_stl" "', argument " "1"" of type '" "FabricCore::DGNamedObject const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNamedObject * >(argp1);
  {
    try {
      result = ((FabricCore::DGNamedObject const *)arg1)->getName_stl();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DGNamedObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNamedObject *arg1 = (FabricCore::DGNamedObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DGNamedObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGNamedObject, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DGNamedObject" "', argument " "1"" of type '" "FabricCore::DGNamedObject *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNamedObject * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DGNamedObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__DGNamedObject, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DGContainer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DGContainer")) SWIG_fail;
  {
    try {
      result = (FabricCore::DGContainer *)new FabricCore::DGContainer();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGContainer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGContainer__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DGContainer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DGContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__DGContainer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DGContainer" "', argument " "1"" of type '" "FabricCore::DGContainer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DGContainer" "', argument " "1"" of type '" "FabricCore::DGContainer const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    try {
      result = (FabricCore::DGContainer *)new FabricCore::DGContainer((FabricCore::DGContainer const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGContainer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGContainer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DGContainer__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__DGContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DGContainer__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DGContainer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::DGContainer()\n"
    "    FabricCore::DGContainer(FabricCore::DGContainer const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_addMember_nodefault(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DGContainer_addMember_nodefault",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_addMember_nodefault" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    try {
      (arg1)->addMember((char const *)arg2,(char const *)arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_addMember_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  FabricCore::Variant *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DGContainer_addMember_Variant",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_addMember_Variant" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_FabricCore__Variant,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DGContainer_addMember_Variant" "', argument " "4"" of type '" "FabricCore::Variant const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGContainer_addMember_Variant" "', argument " "4"" of type '" "FabricCore::Variant const &""'"); 
  }
  arg4 = reinterpret_cast< FabricCore::Variant * >(argp4);
  {
    try {
      (arg1)->addMember_Variant((char const *)arg2,(char const *)arg3,(FabricCore::Variant const &)*arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_removeMember(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGContainer_removeMember",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_removeMember" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->removeMember((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_getMembers_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGContainer_getMembers_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_getMembers_Variant" "', argument " "1"" of type '" "FabricCore::DGContainer const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    try {
      result = ((FabricCore::DGContainer const *)arg1)->getMembers_Variant();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_getMemberType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGContainer_getMemberType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_getMemberType" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)(arg1)->getMemberType((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_getMemberSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGContainer_getMemberSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_getMemberSize" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (uint32_t)(arg1)->getMemberSize((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_getMemberIsShallow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGContainer_getMemberIsShallow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_getMemberIsShallow" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (bool)(arg1)->getMemberIsShallow((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_getMemberDefaultData_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGContainer_getMemberDefaultData_Variant",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_getMemberDefaultData_Variant" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (arg1)->getMemberDefaultData_Variant((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGContainer_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_size" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    try {
      result = (uint32_t)(arg1)->getSize();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_resize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGContainer_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_resize" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DGContainer_resize" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      (arg1)->setSize(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_getMemberSliceData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  void *arg5 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DGContainer_getMemberSliceData",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_getMemberSliceData" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DGContainer_getMemberSliceData" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DGContainer_getMemberSliceData" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DGContainer_getMemberSliceData" "', argument " "5"" of type '" "void *""'"); 
  }
  {
    try {
      (arg1)->getMemberSliceData((char const *)arg2,arg3,arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_getMemberSliceArraySize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DGContainer_getMemberSliceArraySize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_getMemberSliceArraySize" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DGContainer_getMemberSliceArraySize" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = (uint32_t)(arg1)->getMemberSliceArraySize((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_getMemberSliceArrayData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  void *arg5 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DGContainer_getMemberSliceArrayData",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_getMemberSliceArrayData" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DGContainer_getMemberSliceArrayData" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DGContainer_getMemberSliceArrayData" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DGContainer_getMemberSliceArrayData" "', argument " "5"" of type '" "void *""'"); 
  }
  {
    try {
      (arg1)->getMemberSliceArrayData((char const *)arg2,arg3,arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_setMemberSliceData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  void *arg5 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DGContainer_setMemberSliceData",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_setMemberSliceData" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DGContainer_setMemberSliceData" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DGContainer_setMemberSliceData" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DGContainer_setMemberSliceData" "', argument " "5"" of type '" "void const *""'"); 
  }
  {
    try {
      (arg1)->setMemberSliceData((char const *)arg2,arg3,arg4,(void const *)arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_setMemberSliceArraySize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DGContainer_setMemberSliceArraySize",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_setMemberSliceArraySize" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DGContainer_setMemberSliceArraySize" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DGContainer_setMemberSliceArraySize" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  {
    try {
      (arg1)->setMemberSliceArraySize((char const *)arg2,arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_setMemberSliceArrayData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  void *arg5 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DGContainer_setMemberSliceArrayData",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_setMemberSliceArrayData" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DGContainer_setMemberSliceArrayData" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DGContainer_setMemberSliceArrayData" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DGContainer_setMemberSliceArrayData" "', argument " "5"" of type '" "void const *""'"); 
  }
  {
    try {
      (arg1)->setMemberSliceArrayData((char const *)arg2,arg3,arg4,(void const *)arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_getMemberAllSlicesData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DGContainer_getMemberAllSlicesData",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_getMemberAllSlicesData" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DGContainer_getMemberAllSlicesData" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DGContainer_getMemberAllSlicesData" "', argument " "4"" of type '" "void *""'"); 
  }
  {
    try {
      (arg1)->getMemberAllSlicesData((char const *)arg2,arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_setMemberAllSlicesData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DGContainer_setMemberAllSlicesData",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_setMemberAllSlicesData" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DGContainer_setMemberAllSlicesData" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DGContainer_setMemberAllSlicesData" "', argument " "4"" of type '" "void const *""'"); 
  }
  {
    try {
      (arg1)->setMemberAllSlicesData((char const *)arg2,arg3,(void const *)arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_getMemberSliceData_Float32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DGContainer_getMemberSliceData_Float32",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_getMemberSliceData_Float32" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DGContainer_getMemberSliceData_Float32" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = (float)(arg1)->getMemberSliceData_Float32((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_setMemberSliceData_Float32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DGContainer_setMemberSliceData_Float32",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_setMemberSliceData_Float32" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DGContainer_setMemberSliceData_Float32" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DGContainer_setMemberSliceData_Float32" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      (arg1)->setMemberSliceData_Float32((char const *)arg2,arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_getMemberSliceData_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DGContainer_getMemberSliceData_Variant",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_getMemberSliceData_Variant" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DGContainer_getMemberSliceData_Variant" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = (arg1)->getMemberSliceData_Variant((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_setMemberSliceData_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  FabricCore::Variant *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DGContainer_setMemberSliceData_Variant",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_setMemberSliceData_Variant" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DGContainer_setMemberSliceData_Variant" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_FabricCore__Variant,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DGContainer_setMemberSliceData_Variant" "', argument " "4"" of type '" "FabricCore::Variant const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGContainer_setMemberSliceData_Variant" "', argument " "4"" of type '" "FabricCore::Variant const &""'"); 
  }
  arg4 = reinterpret_cast< FabricCore::Variant * >(argp4);
  {
    try {
      (arg1)->setMemberSliceData_Variant((char const *)arg2,arg3,(FabricCore::Variant const &)*arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_setSliceData_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  uint32_t arg2 ;
  FabricCore::Variant *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DGContainer_setSliceData_Variant",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_setSliceData_Variant" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DGContainer_setSliceData_Variant" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__Variant,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DGContainer_setSliceData_Variant" "', argument " "3"" of type '" "FabricCore::Variant const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGContainer_setSliceData_Variant" "', argument " "3"" of type '" "FabricCore::Variant const &""'"); 
  }
  arg3 = reinterpret_cast< FabricCore::Variant * >(argp3);
  {
    try {
      (arg1)->setSliceData_Variant(arg2,(FabricCore::Variant const &)*arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_getMemberSliceValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DGContainer_getMemberSliceValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_getMemberSliceValue" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DGContainer_getMemberSliceValue" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = (arg1)->getMemberSliceValue((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_setMemberSliceValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  FabricCore::RTVal *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DGContainer_setMemberSliceValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_setMemberSliceValue" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DGContainer_setMemberSliceValue" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DGContainer_setMemberSliceValue" "', argument " "4"" of type '" "FabricCore::RTVal const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGContainer_setMemberSliceValue" "', argument " "4"" of type '" "FabricCore::RTVal const &""'"); 
  }
  arg4 = reinterpret_cast< FabricCore::RTVal * >(argp4);
  {
    try {
      (arg1)->setMemberSliceValue((char const *)arg2,arg3,(FabricCore::RTVal const &)*arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_getJSONStringValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGContainer_getJSONStringValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_getJSONStringValue" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    try {
      result = (arg1)->getJSONStringValue();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGContainer_setJSONStringValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  FabricCore::RTVal *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGContainer_setJSONStringValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGContainer_setJSONStringValue" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__RTVal,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DGContainer_setJSONStringValue" "', argument " "2"" of type '" "FabricCore::RTVal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGContainer_setJSONStringValue" "', argument " "2"" of type '" "FabricCore::RTVal const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::RTVal * >(argp2);
  {
    try {
      (arg1)->setJSONStringValue((FabricCore::RTVal const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DGContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGContainer *arg1 = (FabricCore::DGContainer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DGContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGContainer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DGContainer" "', argument " "1"" of type '" "FabricCore::DGContainer *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGContainer * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DGContainer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__DGContainer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DGNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DGNode")) SWIG_fail;
  {
    try {
      result = (FabricCore::DGNode *)new FabricCore::DGNode();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGNode__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DGNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DGNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DGNode" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DGNode" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FabricCore::DGNode *)new FabricCore::DGNode((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGNode, SWIG_POINTER_NEW |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGNode__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNode *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DGNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DGNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__DGNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DGNode" "', argument " "1"" of type '" "FabricCore::DGNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DGNode" "', argument " "1"" of type '" "FabricCore::DGNode const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNode * >(argp1);
  {
    try {
      result = (FabricCore::DGNode *)new FabricCore::DGNode((FabricCore::DGNode const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGNode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DGNode__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__DGNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DGNode__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DGNode__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DGNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::DGNode()\n"
    "    FabricCore::DGNode(FabricCore::Client const &,char const *)\n"
    "    FabricCore::DGNode(FabricCore::DGNode const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGNode_evaluate_lockType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNode *arg1 = (FabricCore::DGNode *) 0 ;
  FabricCore::LockType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGNode_evaluate_lockType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGNode_evaluate_lockType" "', argument " "1"" of type '" "FabricCore::DGNode *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNode * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DGNode_evaluate_lockType" "', argument " "2"" of type '" "FabricCore::LockType""'");
  } 
  arg2 = static_cast< FabricCore::LockType >(val2);
  {
    try {
      (arg1)->evaluate_lockType(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGNode_evaluate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNode *arg1 = (FabricCore::DGNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGNode_evaluate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGNode_evaluate" "', argument " "1"" of type '" "FabricCore::DGNode *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNode * >(argp1);
  {
    try {
      (arg1)->evaluate();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGNode_evaluate_noLock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNode *arg1 = (FabricCore::DGNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGNode_evaluate_noLock",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGNode_evaluate_noLock" "', argument " "1"" of type '" "FabricCore::DGNode *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNode * >(argp1);
  {
    try {
      (arg1)->evaluate_noLock();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGNode_setDependency_real(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNode *arg1 = (FabricCore::DGNode *) 0 ;
  char *arg2 = (char *) 0 ;
  FabricCore::DGNode *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DGNode_setDependency_real",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGNode_setDependency_real" "', argument " "1"" of type '" "FabricCore::DGNode *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNode * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__DGNode,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DGNode_setDependency_real" "', argument " "3"" of type '" "FabricCore::DGNode const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGNode_setDependency_real" "', argument " "3"" of type '" "FabricCore::DGNode const &""'"); 
  }
  arg3 = reinterpret_cast< FabricCore::DGNode * >(argp3);
  {
    try {
      (arg1)->setDependency((char const *)arg2,(FabricCore::DGNode const &)*arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGNode_removeDependency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNode *arg1 = (FabricCore::DGNode *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGNode_removeDependency",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGNode_removeDependency" "', argument " "1"" of type '" "FabricCore::DGNode *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNode * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->removeDependency((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGNode_appendBinding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNode *arg1 = (FabricCore::DGNode *) 0 ;
  FabricCore::DGBinding *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGNode_appendBinding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGNode_appendBinding" "', argument " "1"" of type '" "FabricCore::DGNode *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__DGBinding,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DGNode_appendBinding" "', argument " "2"" of type '" "FabricCore::DGBinding const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGNode_appendBinding" "', argument " "2"" of type '" "FabricCore::DGBinding const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::DGBinding * >(argp2);
  {
    try {
      (arg1)->appendBinding((FabricCore::DGBinding const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGNode_getBindingList_needswrap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNode *arg1 = (FabricCore::DGNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DGBindingList result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGNode_getBindingList_needswrap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGNode_getBindingList_needswrap" "', argument " "1"" of type '" "FabricCore::DGNode *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNode * >(argp1);
  {
    try {
      result = (arg1)->getBindingList();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DGBindingList(static_cast< const FabricCore::DGBindingList& >(result))), SWIGTYPE_p_FabricCore__DGBindingList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGNode_getDependencies_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNode *arg1 = (FabricCore::DGNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGNode_getDependencies_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGNode_getDependencies_Variant" "', argument " "1"" of type '" "FabricCore::DGNode *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNode * >(argp1);
  {
    try {
      result = (arg1)->getDependencies_Variant();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGNode_getDependency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNode *arg1 = (FabricCore::DGNode *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DGNode result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGNode_getDependency",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGNode_getDependency" "', argument " "1"" of type '" "FabricCore::DGNode *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNode * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (arg1)->getDependency((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DGNode(static_cast< const FabricCore::DGNode& >(result))), SWIGTYPE_p_FabricCore__DGNode, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGNode_setDirty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNode *arg1 = (FabricCore::DGNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGNode_setDirty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGNode_setDirty" "', argument " "1"" of type '" "FabricCore::DGNode *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNode * >(argp1);
  {
    try {
      (arg1)->setDirty();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGNode_GetByName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DGNode result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGNode_GetByName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGNode_GetByName" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGNode_GetByName" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = FabricCore::DGNode::GetByName((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DGNode(static_cast< const FabricCore::DGNode& >(result))), SWIGTYPE_p_FabricCore__DGNode, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DGNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGNode *arg1 = (FabricCore::DGNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DGNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DGNode" "', argument " "1"" of type '" "FabricCore::DGNode *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGNode * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DGNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__DGNode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DGOperator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DGOperator")) SWIG_fail;
  {
    try {
      result = (FabricCore::DGOperator *)new FabricCore::DGOperator();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGOperator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGOperator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  FabricCore::DGOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_DGOperator",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DGOperator" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DGOperator" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  {
    if (PyString_Check(obj4) || obj4 == Py_None) {
      res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
    }
    else if (PyUnicode_Check(obj4)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj4);
      alloc5 = SWIG_NEWOBJ;
      res5 = SWIG_AsCharPtrAndSize(uniobj, &buf5, NULL, &alloc5);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5),
        "Error converting string or unicode argument to char *");
    }
    arg5 = buf5;
  }
  {
    try {
      result = (FabricCore::DGOperator *)new FabricCore::DGOperator((FabricCore::Client const &)*arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGOperator, SWIG_POINTER_NEW |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGOperator__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DGOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DGOperator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DGOperator" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DGOperator" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FabricCore::DGOperator *)new FabricCore::DGOperator((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGOperator, SWIG_POINTER_NEW |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGOperator__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGOperator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DGOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DGOperator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__DGOperator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DGOperator" "', argument " "1"" of type '" "FabricCore::DGOperator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DGOperator" "', argument " "1"" of type '" "FabricCore::DGOperator const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGOperator * >(argp1);
  {
    try {
      result = (FabricCore::DGOperator *)new FabricCore::DGOperator((FabricCore::DGOperator const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGOperator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGOperator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DGOperator__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__DGOperator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DGOperator__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DGOperator__SWIG_3(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_DGOperator__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DGOperator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::DGOperator()\n"
    "    FabricCore::DGOperator(FabricCore::Client const &,char const *,char const *,char const *,char const *)\n"
    "    FabricCore::DGOperator(FabricCore::Client const &,char const *)\n"
    "    FabricCore::DGOperator(FabricCore::DGOperator const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGOperator_setFilename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGOperator *arg1 = (FabricCore::DGOperator *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGOperator_setFilename",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGOperator_setFilename" "', argument " "1"" of type '" "FabricCore::DGOperator *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGOperator * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->setFilename((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGOperator_getFilename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGOperator *arg1 = (FabricCore::DGOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGOperator_getFilename",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGOperator_getFilename" "', argument " "1"" of type '" "FabricCore::DGOperator *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGOperator * >(argp1);
  {
    try {
      result = (char *)(arg1)->getFilename();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGOperator_setSourceCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGOperator *arg1 = (FabricCore::DGOperator *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGOperator_setSourceCode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGOperator_setSourceCode" "', argument " "1"" of type '" "FabricCore::DGOperator *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGOperator * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->setSourceCode((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGOperator_getSourceCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGOperator *arg1 = (FabricCore::DGOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGOperator_getSourceCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGOperator_getSourceCode" "', argument " "1"" of type '" "FabricCore::DGOperator *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGOperator * >(argp1);
  {
    try {
      result = (char *)(arg1)->getSourceCode();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGOperator_setEntryPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGOperator *arg1 = (FabricCore::DGOperator *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGOperator_setEntryPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGOperator_setEntryPoint" "', argument " "1"" of type '" "FabricCore::DGOperator *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGOperator * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->setEntryPoint((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGOperator_getEntryPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGOperator *arg1 = (FabricCore::DGOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGOperator_getEntryPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGOperator_getEntryPoint" "', argument " "1"" of type '" "FabricCore::DGOperator *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGOperator * >(argp1);
  {
    try {
      result = (char *)(arg1)->getEntryPoint();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGOperator_setMainThreadOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGOperator *arg1 = (FabricCore::DGOperator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGOperator_setMainThreadOnly",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGOperator_setMainThreadOnly" "', argument " "1"" of type '" "FabricCore::DGOperator *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGOperator * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DGOperator_setMainThreadOnly" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setMainThreadOnly(arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGOperator_getMainThreadOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGOperator *arg1 = (FabricCore::DGOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGOperator_getMainThreadOnly",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGOperator_getMainThreadOnly" "', argument " "1"" of type '" "FabricCore::DGOperator *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGOperator * >(argp1);
  {
    try {
      result = (bool)(arg1)->getMainThreadOnly();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGOperator_getDiagnostics_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGOperator *arg1 = (FabricCore::DGOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGOperator_getDiagnostics_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGOperator_getDiagnostics_Variant" "', argument " "1"" of type '" "FabricCore::DGOperator *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGOperator * >(argp1);
  {
    try {
      result = (arg1)->getDiagnostics();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGOperator_exportKL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGOperator *arg1 = (FabricCore::DGOperator *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DGOperator_exportKL",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGOperator_exportKL" "', argument " "1"" of type '" "FabricCore::DGOperator *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGOperator * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DGOperator_exportKL" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->exportKL((char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGOperator_importKL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGOperator *arg1 = (FabricCore::DGOperator *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGOperator_importKL",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGOperator_importKL" "', argument " "1"" of type '" "FabricCore::DGOperator *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGOperator * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->importKL((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGOperator_GetByName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DGOperator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGOperator_GetByName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGOperator_GetByName" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGOperator_GetByName" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = FabricCore::DGOperator::GetByName((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DGOperator(static_cast< const FabricCore::DGOperator& >(result))), SWIGTYPE_p_FabricCore__DGOperator, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DGOperator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGOperator *arg1 = (FabricCore::DGOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DGOperator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGOperator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DGOperator" "', argument " "1"" of type '" "FabricCore::DGOperator *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGOperator * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DGOperator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__DGOperator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DGEventHandler__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEventHandler *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DGEventHandler")) SWIG_fail;
  {
    try {
      result = (FabricCore::DGEventHandler *)new FabricCore::DGEventHandler();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGEventHandler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGEventHandler__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DGEventHandler *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DGEventHandler",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DGEventHandler" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DGEventHandler" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FabricCore::DGEventHandler *)new FabricCore::DGEventHandler((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGEventHandler, SWIG_POINTER_NEW |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGEventHandler__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEventHandler *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DGEventHandler *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DGEventHandler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__DGEventHandler,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DGEventHandler" "', argument " "1"" of type '" "FabricCore::DGEventHandler const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DGEventHandler" "', argument " "1"" of type '" "FabricCore::DGEventHandler const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEventHandler * >(argp1);
  {
    try {
      result = (FabricCore::DGEventHandler *)new FabricCore::DGEventHandler((FabricCore::DGEventHandler const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGEventHandler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGEventHandler(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DGEventHandler__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__DGEventHandler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DGEventHandler__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DGEventHandler__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DGEventHandler'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::DGEventHandler()\n"
    "    FabricCore::DGEventHandler(FabricCore::Client const &,char const *)\n"
    "    FabricCore::DGEventHandler(FabricCore::DGEventHandler const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEventHandler_appendChildEventHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEventHandler *arg1 = (FabricCore::DGEventHandler *) 0 ;
  FabricCore::DGEventHandler *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGEventHandler_appendChildEventHandler",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEventHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEventHandler_appendChildEventHandler" "', argument " "1"" of type '" "FabricCore::DGEventHandler *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEventHandler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__DGEventHandler,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DGEventHandler_appendChildEventHandler" "', argument " "2"" of type '" "FabricCore::DGEventHandler const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGEventHandler_appendChildEventHandler" "', argument " "2"" of type '" "FabricCore::DGEventHandler const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::DGEventHandler * >(argp2);
  {
    try {
      (arg1)->appendChildEventHandler((FabricCore::DGEventHandler const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEventHandler_removeChildEventHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEventHandler *arg1 = (FabricCore::DGEventHandler *) 0 ;
  FabricCore::DGEventHandler *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGEventHandler_removeChildEventHandler",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEventHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEventHandler_removeChildEventHandler" "', argument " "1"" of type '" "FabricCore::DGEventHandler *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEventHandler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__DGEventHandler,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DGEventHandler_removeChildEventHandler" "', argument " "2"" of type '" "FabricCore::DGEventHandler const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGEventHandler_removeChildEventHandler" "', argument " "2"" of type '" "FabricCore::DGEventHandler const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::DGEventHandler * >(argp2);
  {
    try {
      (arg1)->removeChildEventHandler((FabricCore::DGEventHandler const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEventHandler_appendPreDescendBinding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEventHandler *arg1 = (FabricCore::DGEventHandler *) 0 ;
  FabricCore::DGBinding *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGEventHandler_appendPreDescendBinding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEventHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEventHandler_appendPreDescendBinding" "', argument " "1"" of type '" "FabricCore::DGEventHandler *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEventHandler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__DGBinding,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DGEventHandler_appendPreDescendBinding" "', argument " "2"" of type '" "FabricCore::DGBinding const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGEventHandler_appendPreDescendBinding" "', argument " "2"" of type '" "FabricCore::DGBinding const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::DGBinding * >(argp2);
  {
    try {
      (arg1)->appendPreDescendBinding((FabricCore::DGBinding const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEventHandler_getPreDescendBindingList_needswrap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEventHandler *arg1 = (FabricCore::DGEventHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DGBindingList result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGEventHandler_getPreDescendBindingList_needswrap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEventHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEventHandler_getPreDescendBindingList_needswrap" "', argument " "1"" of type '" "FabricCore::DGEventHandler *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEventHandler * >(argp1);
  {
    try {
      result = (arg1)->getPreDescendBindingList();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DGBindingList(static_cast< const FabricCore::DGBindingList& >(result))), SWIGTYPE_p_FabricCore__DGBindingList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEventHandler_appendPostDescendBinding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEventHandler *arg1 = (FabricCore::DGEventHandler *) 0 ;
  FabricCore::DGBinding *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGEventHandler_appendPostDescendBinding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEventHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEventHandler_appendPostDescendBinding" "', argument " "1"" of type '" "FabricCore::DGEventHandler *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEventHandler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__DGBinding,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DGEventHandler_appendPostDescendBinding" "', argument " "2"" of type '" "FabricCore::DGBinding const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGEventHandler_appendPostDescendBinding" "', argument " "2"" of type '" "FabricCore::DGBinding const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::DGBinding * >(argp2);
  {
    try {
      (arg1)->appendPostDescendBinding((FabricCore::DGBinding const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEventHandler_getPostDescendBindingList_needswrap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEventHandler *arg1 = (FabricCore::DGEventHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DGBindingList result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGEventHandler_getPostDescendBindingList_needswrap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEventHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEventHandler_getPostDescendBindingList_needswrap" "', argument " "1"" of type '" "FabricCore::DGEventHandler *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEventHandler * >(argp1);
  {
    try {
      result = (arg1)->getPostDescendBindingList();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DGBindingList(static_cast< const FabricCore::DGBindingList& >(result))), SWIGTYPE_p_FabricCore__DGBindingList, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEventHandler_setScope(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEventHandler *arg1 = (FabricCore::DGEventHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  FabricCore::DGNode *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DGEventHandler_setScope",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEventHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEventHandler_setScope" "', argument " "1"" of type '" "FabricCore::DGEventHandler *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEventHandler * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__DGNode,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DGEventHandler_setScope" "', argument " "3"" of type '" "FabricCore::DGNode const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGEventHandler_setScope" "', argument " "3"" of type '" "FabricCore::DGNode const &""'"); 
  }
  arg3 = reinterpret_cast< FabricCore::DGNode * >(argp3);
  {
    try {
      (arg1)->setScope((char const *)arg2,(FabricCore::DGNode const &)*arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEventHandler_setScopeName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEventHandler *arg1 = (FabricCore::DGEventHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGEventHandler_setScopeName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEventHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEventHandler_setScopeName" "', argument " "1"" of type '" "FabricCore::DGEventHandler *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEventHandler * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->setScopeName((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEventHandler_getScopeName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEventHandler *arg1 = (FabricCore::DGEventHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGEventHandler_getScopeName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEventHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEventHandler_getScopeName" "', argument " "1"" of type '" "FabricCore::DGEventHandler *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEventHandler * >(argp1);
  {
    try {
      result = (char *)(arg1)->getScopeName();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEventHandler_setSelector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEventHandler *arg1 = (FabricCore::DGEventHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  FabricCore::DGBinding *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DGEventHandler_setSelector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEventHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEventHandler_setSelector" "', argument " "1"" of type '" "FabricCore::DGEventHandler *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEventHandler * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FabricCore__DGBinding,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DGEventHandler_setSelector" "', argument " "3"" of type '" "FabricCore::DGBinding const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGEventHandler_setSelector" "', argument " "3"" of type '" "FabricCore::DGBinding const &""'"); 
  }
  arg3 = reinterpret_cast< FabricCore::DGBinding * >(argp3);
  {
    try {
      (arg1)->setSelector((char const *)arg2,(FabricCore::DGBinding const &)*arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEventHandler_GetByName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DGEventHandler result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGEventHandler_GetByName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEventHandler_GetByName" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGEventHandler_GetByName" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = FabricCore::DGEventHandler::GetByName((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DGEventHandler(static_cast< const FabricCore::DGEventHandler& >(result))), SWIGTYPE_p_FabricCore__DGEventHandler, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEventHandler_getChildEventHandlers_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEventHandler *arg1 = (FabricCore::DGEventHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGEventHandler_getChildEventHandlers_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEventHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEventHandler_getChildEventHandlers_Variant" "', argument " "1"" of type '" "FabricCore::DGEventHandler *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEventHandler * >(argp1);
  {
    try {
      result = (arg1)->getChildEventHandlers_Variant();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEventHandler_getScopes_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEventHandler *arg1 = (FabricCore::DGEventHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGEventHandler_getScopes_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEventHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEventHandler_getScopes_Variant" "', argument " "1"" of type '" "FabricCore::DGEventHandler *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEventHandler * >(argp1);
  {
    try {
      result = (arg1)->getScopes_Variant();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEventHandler_removeScope(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEventHandler *arg1 = (FabricCore::DGEventHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGEventHandler_removeScope",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEventHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEventHandler_removeScope" "', argument " "1"" of type '" "FabricCore::DGEventHandler *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEventHandler * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->removeScope((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DGEventHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEventHandler *arg1 = (FabricCore::DGEventHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DGEventHandler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEventHandler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DGEventHandler" "', argument " "1"" of type '" "FabricCore::DGEventHandler *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEventHandler * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DGEventHandler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__DGEventHandler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DGEvent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DGEvent")) SWIG_fail;
  {
    try {
      result = (FabricCore::DGEvent *)new FabricCore::DGEvent();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGEvent, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGEvent__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DGEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DGEvent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DGEvent" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DGEvent" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (FabricCore::DGEvent *)new FabricCore::DGEvent((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGEvent, SWIG_POINTER_NEW |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGEvent__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEvent *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::DGEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DGEvent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__DGEvent,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DGEvent" "', argument " "1"" of type '" "FabricCore::DGEvent const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DGEvent" "', argument " "1"" of type '" "FabricCore::DGEvent const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEvent * >(argp1);
  {
    try {
      result = (FabricCore::DGEvent *)new FabricCore::DGEvent((FabricCore::DGEvent const &)*arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FabricCore__DGEvent, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DGEvent(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DGEvent__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__DGEvent, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DGEvent__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FabricCore__Client, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DGEvent__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DGEvent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FabricCore::DGEvent()\n"
    "    FabricCore::DGEvent(FabricCore::Client const &,char const *)\n"
    "    FabricCore::DGEvent(FabricCore::DGEvent const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEvent_removeEventHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEvent *arg1 = (FabricCore::DGEvent *) 0 ;
  FabricCore::DGEventHandler *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGEvent_removeEventHandler",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEvent_removeEventHandler" "', argument " "1"" of type '" "FabricCore::DGEvent *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEvent * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__DGEventHandler,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DGEvent_removeEventHandler" "', argument " "2"" of type '" "FabricCore::DGEventHandler const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGEvent_removeEventHandler" "', argument " "2"" of type '" "FabricCore::DGEventHandler const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::DGEventHandler * >(argp2);
  {
    try {
      (arg1)->removeEventHandler((FabricCore::DGEventHandler const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEvent_appendEventHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEvent *arg1 = (FabricCore::DGEvent *) 0 ;
  FabricCore::DGEventHandler *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGEvent_appendEventHandler",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEvent_appendEventHandler" "', argument " "1"" of type '" "FabricCore::DGEvent *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEvent * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FabricCore__DGEventHandler,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DGEvent_appendEventHandler" "', argument " "2"" of type '" "FabricCore::DGEventHandler const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGEvent_appendEventHandler" "', argument " "2"" of type '" "FabricCore::DGEventHandler const &""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::DGEventHandler * >(argp2);
  {
    try {
      (arg1)->appendEventHandler((FabricCore::DGEventHandler const &)*arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEvent_fire(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEvent *arg1 = (FabricCore::DGEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGEvent_fire",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEvent_fire" "', argument " "1"" of type '" "FabricCore::DGEvent *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEvent * >(argp1);
  {
    try {
      (arg1)->fire();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEvent_setSelectType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEvent *arg1 = (FabricCore::DGEvent *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGEvent_setSelectType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEvent_setSelectType" "', argument " "1"" of type '" "FabricCore::DGEvent *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEvent * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      (arg1)->setSelectType((char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEvent_getSelectType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEvent *arg1 = (FabricCore::DGEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGEvent_getSelectType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEvent_getSelectType" "', argument " "1"" of type '" "FabricCore::DGEvent *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEvent * >(argp1);
  {
    try {
      result = (char *)(arg1)->getSelectType();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEvent_select_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEvent *arg1 = (FabricCore::DGEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGEvent_select_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEvent_select_Variant" "', argument " "1"" of type '" "FabricCore::DGEvent *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEvent * >(argp1);
  {
    try {
      result = (arg1)->select_Variant();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEvent_getEventHandlers_Variant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEvent *arg1 = (FabricCore::DGEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FabricCore::Variant result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DGEvent_getEventHandlers_Variant",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEvent_getEventHandlers_Variant" "', argument " "1"" of type '" "FabricCore::DGEvent *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEvent * >(argp1);
  {
    try {
      result = (arg1)->getEventHandlers_Variant();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::Variant(static_cast< const FabricCore::Variant& >(result))), SWIGTYPE_p_FabricCore__Variant, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DGEvent_GetByName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::DGEvent result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DGEvent_GetByName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DGEvent_GetByName" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DGEvent_GetByName" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = FabricCore::DGEvent::GetByName((FabricCore::Client const &)*arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::DGEvent(static_cast< const FabricCore::DGEvent& >(result))), SWIGTYPE_p_FabricCore__DGEvent, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DGEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DGEvent *arg1 = (FabricCore::DGEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DGEvent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DGEvent, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DGEvent" "', argument " "1"" of type '" "FabricCore::DGEvent *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DGEvent * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DGEvent_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FabricCore__DGEvent, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GetKLJSONAST(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Client *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GetKLJSONAST",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FabricCore__Client,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetKLJSONAST" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetKLJSONAST" "', argument " "1"" of type '" "FabricCore::Client const &""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Client * >(argp1);
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    if (PyString_Check(obj2) || obj2 == Py_None) {
      res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    }
    else if (PyUnicode_Check(obj2)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj2);
      alloc3 = SWIG_NEWOBJ;
      res3 = SWIG_AsCharPtrAndSize(uniobj, &buf3, NULL, &alloc3);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3),
        "Error converting string or unicode argument to char *");
    }
    arg3 = buf3;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GetKLJSONAST" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = FabricCore::GetKLJSONAST((FabricCore::Client const &)*arg1,(char const *)arg2,(char const *)arg3,arg4);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GetFabricDir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":GetFabricDir")) SWIG_fail;
  {
    try {
      result = (char *)FabricCore::GetFabricDir();
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyObjectToVariant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  FabricCore::Variant *arg2 = (FabricCore::Variant *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PyObjectToVariant",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyObjectToVariant" "', argument " "2"" of type '" "FabricCore::Variant *""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::Variant * >(argp2);
  {
    try {
      result = (PyObject *)PyObjectToVariant(arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariantToPyObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Variant *arg1 = (FabricCore::Variant *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VariantToPyObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Variant, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariantToPyObject" "', argument " "1"" of type '" "FabricCore::Variant const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Variant * >(argp1);
  {
    try {
      result = (PyObject *)VariantToPyObject((FabricCore::Variant const *)arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTValToPyObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = (FabricCore::Context *) 0 ;
  FabricCore::RTVal *arg2 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTValToPyObject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTValToPyObject" "', argument " "1"" of type '" "FabricCore::Context const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RTValToPyObject" "', argument " "2"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::RTVal * >(argp2);
  {
    try {
      result = (PyObject *)RTValToPyObject((FabricCore::Context const *)arg1,(FabricCore::RTVal const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTValToPyObject_DFGHost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  FabricCore::RTVal *arg2 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTValToPyObject_DFGHost",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTValToPyObject_DFGHost" "', argument " "1"" of type '" "FabricCore::DFGHost const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RTValToPyObject_DFGHost" "', argument " "2"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::RTVal * >(argp2);
  {
    try {
      result = (PyObject *)RTValToPyObject_DFGHost((FabricCore::DFGHost const *)arg1,(FabricCore::RTVal const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTValToPyObject_DFGExec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  FabricCore::RTVal *arg2 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTValToPyObject_DFGExec",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTValToPyObject_DFGExec" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RTValToPyObject_DFGExec" "', argument " "2"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::RTVal * >(argp2);
  {
    try {
      result = (PyObject *)RTValToPyObject_DFGExec((FabricCore::DFGExec const *)arg1,(FabricCore::RTVal const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RTValToPyObject_DFGBinding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  FabricCore::RTVal *arg2 = (FabricCore::RTVal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RTValToPyObject_DFGBinding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RTValToPyObject_DFGBinding" "', argument " "1"" of type '" "FabricCore::DFGBinding const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FabricCore__RTVal, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RTValToPyObject_DFGBinding" "', argument " "2"" of type '" "FabricCore::RTVal const *""'"); 
  }
  arg2 = reinterpret_cast< FabricCore::RTVal * >(argp2);
  {
    try {
      result = (PyObject *)RTValToPyObject_DFGBinding((FabricCore::DFGBinding const *)arg1,(FabricCore::RTVal const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyObjectToRTVal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = (FabricCore::Context *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PyObjectToRTVal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyObjectToRTVal" "', argument " "1"" of type '" "FabricCore::Context const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  arg2 = obj1;
  {
    try {
      result = PyObjectToRTVal((FabricCore::Context const *)arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyObjectToRTVal_DFGHost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGHost *arg1 = (FabricCore::DFGHost *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PyObjectToRTVal_DFGHost",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGHost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyObjectToRTVal_DFGHost" "', argument " "1"" of type '" "FabricCore::DFGHost const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGHost * >(argp1);
  arg2 = obj1;
  {
    try {
      result = PyObjectToRTVal_DFGHost((FabricCore::DFGHost const *)arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyObjectToRTVal_DFGExec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGExec *arg1 = (FabricCore::DFGExec *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PyObjectToRTVal_DFGExec",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGExec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyObjectToRTVal_DFGExec" "', argument " "1"" of type '" "FabricCore::DFGExec const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGExec * >(argp1);
  arg2 = obj1;
  {
    try {
      result = PyObjectToRTVal_DFGExec((FabricCore::DFGExec const *)arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyObjectToRTVal_DFGBinding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::DFGBinding *arg1 = (FabricCore::DFGBinding *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FabricCore::RTVal result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PyObjectToRTVal_DFGBinding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__DFGBinding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyObjectToRTVal_DFGBinding" "', argument " "1"" of type '" "FabricCore::DFGBinding const *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::DFGBinding * >(argp1);
  arg2 = obj1;
  {
    try {
      result = PyObjectToRTVal_DFGBinding((FabricCore::DFGBinding const *)arg1,arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new FabricCore::RTVal(static_cast< const FabricCore::RTVal& >(result))), SWIGTYPE_p_FabricCore__RTVal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonSingleStringCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  void *arg1 = (void *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PythonSingleStringCallback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonSingleStringCallback" "', argument " "1"" of type '" "void *""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PythonSingleStringCallback" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      PythonSingleStringCallback(arg1,(char const *)arg2,arg3);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonReportCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  void *arg1 = (void *) 0 ;
  FabricCore::ReportSource arg2 ;
  FabricCore::ReportLevel arg3 ;
  char *arg4 = (char *) 0 ;
  uint32_t arg5 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PythonReportCallback",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonReportCallback" "', argument " "1"" of type '" "void *""'"); 
  }
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PythonReportCallback" "', argument " "2"" of type '" "FabricCore::ReportSource""'");
  } 
  arg2 = static_cast< FabricCore::ReportSource >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PythonReportCallback" "', argument " "3"" of type '" "FabricCore::ReportLevel""'");
  } 
  arg3 = static_cast< FabricCore::ReportLevel >(val3);
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PythonReportCallback" "', argument " "5"" of type '" "uint32_t""'");
  } 
  arg5 = static_cast< uint32_t >(val5);
  {
    try {
      PythonReportCallback(arg1,arg2,arg3,(char const *)arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonStatusCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  void *arg1 = (void *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  char *arg4 = (char *) 0 ;
  uint32_t arg5 ;
  int res1 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PythonStatusCallback",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonStatusCallback" "', argument " "1"" of type '" "void *""'"); 
  }
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PythonStatusCallback" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    if (PyString_Check(obj3) || obj3 == Py_None) {
      res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
    }
    else if (PyUnicode_Check(obj3)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj3);
      alloc4 = SWIG_NEWOBJ;
      res4 = SWIG_AsCharPtrAndSize(uniobj, &buf4, NULL, &alloc4);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4),
        "Error converting string or unicode argument to char *");
    }
    arg4 = buf4;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PythonStatusCallback" "', argument " "5"" of type '" "uint32_t""'");
  } 
  arg5 = static_cast< uint32_t >(val5);
  {
    try {
      PythonStatusCallback(arg1,(char const *)arg2,arg3,(char const *)arg4,arg5);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PythonRTValToJSONEncoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  PythonRTValToJSONEncoder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PythonRTValToJSONEncoder",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      result = (PythonRTValToJSONEncoder *)new PythonRTValToJSONEncoder(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PythonRTValToJSONEncoder, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PythonRTValToJSONEncoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonRTValToJSONEncoder *arg1 = (PythonRTValToJSONEncoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PythonRTValToJSONEncoder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonRTValToJSONEncoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PythonRTValToJSONEncoder" "', argument " "1"" of type '" "PythonRTValToJSONEncoder *""'"); 
  }
  arg1 = reinterpret_cast< PythonRTValToJSONEncoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PythonRTValToJSONEncoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PythonRTValToJSONEncoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PythonRTValFromJSONDecoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  PythonRTValFromJSONDecoder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PythonRTValFromJSONDecoder",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      result = (PythonRTValFromJSONDecoder *)new PythonRTValFromJSONDecoder(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PythonRTValFromJSONDecoder, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PythonRTValFromJSONDecoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonRTValFromJSONDecoder *arg1 = (PythonRTValFromJSONDecoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PythonRTValFromJSONDecoder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonRTValFromJSONDecoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PythonRTValFromJSONDecoder" "', argument " "1"" of type '" "PythonRTValFromJSONDecoder *""'"); 
  }
  arg1 = reinterpret_cast< PythonRTValFromJSONDecoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PythonRTValFromJSONDecoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PythonRTValFromJSONDecoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreatePyRTTypesObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FabricCore::Context *arg1 = (FabricCore::Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CreatePyRTTypesObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FabricCore__Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreatePyRTTypesObject" "', argument " "1"" of type '" "FabricCore::Context *""'"); 
  }
  arg1 = reinterpret_cast< FabricCore::Context * >(argp1);
  {
    try {
      result = (PyObject *)CreatePyRTTypesObject(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyRTValObjectToRTValRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  FEC_RTValRef result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PyRTValObjectToRTValRef",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      result = (FEC_RTValRef)PyRTValObjectToRTValRef(arg1);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyStringToCString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  char *arg2 = (char *) 0 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PyStringToCString",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  {
    if (PyString_Check(obj1) || obj1 == Py_None) {
      res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    }
    else if (PyUnicode_Check(obj1)) {
      PyObject *uniobj = PyUnicode_AsASCIIString(obj1);
      alloc2 = SWIG_NEWOBJ;
      res2 = SWIG_AsCharPtrAndSize(uniobj, &buf2, NULL, &alloc2);
      Py_DECREF(uniobj);
    }
    else {
      SWIG_exception_fail(SWIG_TypeError,
        "Argument type error, expected string or unicode");
    }
    
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2),
        "Error converting string or unicode argument to char *");
    }
    arg2 = buf2;
  }
  {
    try {
      result = (char *)PyStringToCString(arg1,(char const *)arg2);
    }
    catch (FabricCore::Exception e) {
      char errstr[4096];
      snprintf(errstr, 4096, "Fabric: %s", e.getDesc_cstr());
      PyErr_SetString(PyExc_Exception, errstr);
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"FEC_GetVersionMaj", _wrap_FEC_GetVersionMaj, METH_VARARGS, NULL},
	 { (char *)"FEC_GetVersionMin", _wrap_FEC_GetVersionMin, METH_VARARGS, NULL},
	 { (char *)"FEC_GetVersionRev", _wrap_FEC_GetVersionRev, METH_VARARGS, NULL},
	 { (char *)"FEC_GetVersionStr", _wrap_FEC_GetVersionStr, METH_VARARGS, NULL},
	 { (char *)"FEC_Initialize", _wrap_FEC_Initialize, METH_VARARGS, NULL},
	 { (char *)"FEC_Finalize", _wrap_FEC_Finalize, METH_VARARGS, NULL},
	 { (char *)"FEC_EnableDebug", _wrap_FEC_EnableDebug, METH_VARARGS, NULL},
	 { (char *)"FEC_RefRetain", _wrap_FEC_RefRetain, METH_VARARGS, NULL},
	 { (char *)"FEC_RefRelease", _wrap_FEC_RefRelease, METH_VARARGS, NULL},
	 { (char *)"FEC_RefIsNull", _wrap_FEC_RefIsNull, METH_VARARGS, NULL},
	 { (char *)"FEC_Variant__opaque__set", _wrap_FEC_Variant__opaque__set, METH_VARARGS, NULL},
	 { (char *)"FEC_Variant__opaque__get", _wrap_FEC_Variant__opaque__get, METH_VARARGS, NULL},
	 { (char *)"new_FEC_Variant", _wrap_new_FEC_Variant, METH_VARARGS, NULL},
	 { (char *)"delete_FEC_Variant", _wrap_delete_FEC_Variant, METH_VARARGS, NULL},
	 { (char *)"FEC_Variant_swigregister", FEC_Variant_swigregister, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantDictIter__opaque__set", _wrap_FEC_VariantDictIter__opaque__set, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantDictIter__opaque__get", _wrap_FEC_VariantDictIter__opaque__get, METH_VARARGS, NULL},
	 { (char *)"new_FEC_VariantDictIter", _wrap_new_FEC_VariantDictIter, METH_VARARGS, NULL},
	 { (char *)"delete_FEC_VariantDictIter", _wrap_delete_FEC_VariantDictIter, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantDictIter_swigregister", FEC_VariantDictIter_swigregister, METH_VARARGS, NULL},
	 { (char *)"FEC_GetLastExceptionCString", _wrap_FEC_GetLastExceptionCString, METH_VARARGS, NULL},
	 { (char *)"FEC_GetLastExceptionLength", _wrap_FEC_GetLastExceptionLength, METH_VARARGS, NULL},
	 { (char *)"FEC_ClearLastException", _wrap_FEC_ClearLastException, METH_VARARGS, NULL},
	 { (char *)"FEC_AllocVariants", _wrap_FEC_AllocVariants, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetType", _wrap_FEC_VariantGetType, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitCopy", _wrap_FEC_VariantInitCopy, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetCopy", _wrap_FEC_VariantSetCopy, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitTake", _wrap_FEC_VariantInitTake, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetTake", _wrap_FEC_VariantSetTake, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitNull", _wrap_FEC_VariantInitNull, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantIsNull", _wrap_FEC_VariantIsNull, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitBoolean", _wrap_FEC_VariantInitBoolean, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantIsBoolean", _wrap_FEC_VariantIsBoolean, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetBoolean", _wrap_FEC_VariantGetBoolean, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetBoolean", _wrap_FEC_VariantSetBoolean, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitUInt8", _wrap_FEC_VariantInitUInt8, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantIsUInt8", _wrap_FEC_VariantIsUInt8, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetUInt8", _wrap_FEC_VariantGetUInt8, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetUInt8", _wrap_FEC_VariantSetUInt8, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitSInt8", _wrap_FEC_VariantInitSInt8, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantIsSInt8", _wrap_FEC_VariantIsSInt8, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetSInt8", _wrap_FEC_VariantGetSInt8, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetSInt8", _wrap_FEC_VariantSetSInt8, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitUInt16", _wrap_FEC_VariantInitUInt16, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantIsUInt16", _wrap_FEC_VariantIsUInt16, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetUInt16", _wrap_FEC_VariantGetUInt16, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetUInt16", _wrap_FEC_VariantSetUInt16, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitSInt16", _wrap_FEC_VariantInitSInt16, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantIsSInt16", _wrap_FEC_VariantIsSInt16, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetSInt16", _wrap_FEC_VariantGetSInt16, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetSInt16", _wrap_FEC_VariantSetSInt16, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitUInt32", _wrap_FEC_VariantInitUInt32, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantIsUInt32", _wrap_FEC_VariantIsUInt32, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetUInt32", _wrap_FEC_VariantGetUInt32, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetUInt32", _wrap_FEC_VariantSetUInt32, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitSInt32", _wrap_FEC_VariantInitSInt32, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantIsSInt32", _wrap_FEC_VariantIsSInt32, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetSInt32", _wrap_FEC_VariantGetSInt32, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetSInt32", _wrap_FEC_VariantSetSInt32, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitUInt64", _wrap_FEC_VariantInitUInt64, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantIsUInt64", _wrap_FEC_VariantIsUInt64, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetUInt64", _wrap_FEC_VariantGetUInt64, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetUInt64", _wrap_FEC_VariantSetUInt64, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitSInt64", _wrap_FEC_VariantInitSInt64, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantIsSInt64", _wrap_FEC_VariantIsSInt64, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetSInt64", _wrap_FEC_VariantGetSInt64, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetSInt64", _wrap_FEC_VariantSetSInt64, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitFloat32", _wrap_FEC_VariantInitFloat32, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantIsFloat32", _wrap_FEC_VariantIsFloat32, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetFloat32", _wrap_FEC_VariantGetFloat32, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetFloat32", _wrap_FEC_VariantSetFloat32, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitFloat64", _wrap_FEC_VariantInitFloat64, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantIsFloat64", _wrap_FEC_VariantIsFloat64, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetFloat64", _wrap_FEC_VariantGetFloat64, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetFloat64", _wrap_FEC_VariantSetFloat64, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantIsString", _wrap_FEC_VariantIsString, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitStringEmpty", _wrap_FEC_VariantInitStringEmpty, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitStringCopy", _wrap_FEC_VariantInitStringCopy, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitStringCopy_cstr", _wrap_FEC_VariantInitStringCopy_cstr, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitStringTake", _wrap_FEC_VariantInitStringTake, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitStringTake_cstr", _wrap_FEC_VariantInitStringTake_cstr, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetStringData", _wrap_FEC_VariantGetStringData, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetStringLength", _wrap_FEC_VariantGetStringLength, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetString_cstr", _wrap_FEC_VariantGetString_cstr, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetStringCopy", _wrap_FEC_VariantSetStringCopy, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetStringCopy_cstr", _wrap_FEC_VariantSetStringCopy_cstr, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetStringTake", _wrap_FEC_VariantSetStringTake, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetStringTake_cstr", _wrap_FEC_VariantSetStringTake_cstr, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantIsArray", _wrap_FEC_VariantIsArray, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitArrayEmpty", _wrap_FEC_VariantInitArrayEmpty, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitArrayEmptyWithSize", _wrap_FEC_VariantInitArrayEmptyWithSize, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitArrayCopy", _wrap_FEC_VariantInitArrayCopy, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitArrayTake", _wrap_FEC_VariantInitArrayTake, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetArraySize", _wrap_FEC_VariantGetArraySize, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetArrayElement", _wrap_FEC_VariantGetArrayElement, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantArrayAppendCopy", _wrap_FEC_VariantArrayAppendCopy, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantArrayAppendTake", _wrap_FEC_VariantArrayAppendTake, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetArrayElementCopy", _wrap_FEC_VariantSetArrayElementCopy, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetArrayElementTake", _wrap_FEC_VariantSetArrayElementTake, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantIsDict", _wrap_FEC_VariantIsDict, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitDictEmpty", _wrap_FEC_VariantInitDictEmpty, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetDictKeyValue", _wrap_FEC_VariantGetDictKeyValue, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetDictKeyValue_str", _wrap_FEC_VariantGetDictKeyValue_str, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantGetDictKeyValue_cstr", _wrap_FEC_VariantGetDictKeyValue_cstr, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetDictKeyCopyValueCopy", _wrap_FEC_VariantSetDictKeyCopyValueCopy, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetDictKeyTakeValueCopy", _wrap_FEC_VariantSetDictKeyTakeValueCopy, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantSetDictKeyTakeValueTake", _wrap_FEC_VariantSetDictKeyTakeValueTake, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantDictIterInit", _wrap_FEC_VariantDictIterInit, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantDictIterIsDone", _wrap_FEC_VariantDictIterIsDone, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantDictIterGetKey", _wrap_FEC_VariantDictIterGetKey, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantDictIterGetValue", _wrap_FEC_VariantDictIterGetValue, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantDictIterNext", _wrap_FEC_VariantDictIterNext, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantDictIterDispose", _wrap_FEC_VariantDictIterDispose, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitWithVariantDesc", _wrap_FEC_VariantInitWithVariantDesc, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitFromJSON", _wrap_FEC_VariantInitFromJSON, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitWithVariantJSONEncoding", _wrap_FEC_VariantInitWithVariantJSONEncoding, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantDispose", _wrap_FEC_VariantDispose, METH_VARARGS, NULL},
	 { (char *)"FEC_KLTool", _wrap_FEC_KLTool, METH_VARARGS, NULL},
	 { (char *)"FEC_KL2EDK", _wrap_FEC_KL2EDK, METH_VARARGS, NULL},
	 { (char *)"FEC_KLExport", _wrap_FEC_KLExport, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_guarded_set", _wrap_FEC_ClientCreateOptions_guarded_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_guarded_get", _wrap_FEC_ClientCreateOptions_guarded_get, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_trapOnThrow_set", _wrap_FEC_ClientCreateOptions_trapOnThrow_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_trapOnThrow_get", _wrap_FEC_ClientCreateOptions_trapOnThrow_get, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_traceOperators_set", _wrap_FEC_ClientCreateOptions_traceOperators_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_traceOperators_get", _wrap_FEC_ClientCreateOptions_traceOperators_get, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_optimizationType_set", _wrap_FEC_ClientCreateOptions_optimizationType_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_optimizationType_get", _wrap_FEC_ClientCreateOptions_optimizationType_get, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_numExtPaths_set", _wrap_FEC_ClientCreateOptions_numExtPaths_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_numExtPaths_get", _wrap_FEC_ClientCreateOptions_numExtPaths_get, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_extPaths_set", _wrap_FEC_ClientCreateOptions_extPaths_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_extPaths_get", _wrap_FEC_ClientCreateOptions_extPaths_get, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_numExtsToLoad_set", _wrap_FEC_ClientCreateOptions_numExtsToLoad_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_numExtsToLoad_get", _wrap_FEC_ClientCreateOptions_numExtsToLoad_get, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_extsToLoad_set", _wrap_FEC_ClientCreateOptions_extsToLoad_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_extsToLoad_get", _wrap_FEC_ClientCreateOptions_extsToLoad_get, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_canvasPresetDirCount_set", _wrap_FEC_ClientCreateOptions_canvasPresetDirCount_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_canvasPresetDirCount_get", _wrap_FEC_ClientCreateOptions_canvasPresetDirCount_get, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_canvasPresetDirCStrs_set", _wrap_FEC_ClientCreateOptions_canvasPresetDirCStrs_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_canvasPresetDirCStrs_get", _wrap_FEC_ClientCreateOptions_canvasPresetDirCStrs_get, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_slowOperationCallback_set", _wrap_FEC_ClientCreateOptions_slowOperationCallback_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_slowOperationCallback_get", _wrap_FEC_ClientCreateOptions_slowOperationCallback_get, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_slowOperationUserdata_set", _wrap_FEC_ClientCreateOptions_slowOperationUserdata_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_slowOperationUserdata_get", _wrap_FEC_ClientCreateOptions_slowOperationUserdata_get, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_licenseType_set", _wrap_FEC_ClientCreateOptions_licenseType_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_licenseType_get", _wrap_FEC_ClientCreateOptions_licenseType_get, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_encodeRTValToJSON_CB_set", _wrap_FEC_ClientCreateOptions_encodeRTValToJSON_CB_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_encodeRTValToJSON_CB_get", _wrap_FEC_ClientCreateOptions_encodeRTValToJSON_CB_get, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_encodeRTValToJSON_UD_set", _wrap_FEC_ClientCreateOptions_encodeRTValToJSON_UD_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_encodeRTValToJSON_UD_get", _wrap_FEC_ClientCreateOptions_encodeRTValToJSON_UD_get, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_decodeRTValFromJSON_CB_set", _wrap_FEC_ClientCreateOptions_decodeRTValFromJSON_CB_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_decodeRTValFromJSON_CB_get", _wrap_FEC_ClientCreateOptions_decodeRTValFromJSON_CB_get, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_decodeRTValFromJSON_UD_set", _wrap_FEC_ClientCreateOptions_decodeRTValFromJSON_UD_set, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_decodeRTValFromJSON_UD_get", _wrap_FEC_ClientCreateOptions_decodeRTValFromJSON_UD_get, METH_VARARGS, NULL},
	 { (char *)"new_FEC_ClientCreateOptions", _wrap_new_FEC_ClientCreateOptions, METH_VARARGS, NULL},
	 { (char *)"delete_FEC_ClientCreateOptions", _wrap_delete_FEC_ClientCreateOptions, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreateOptions_swigregister", FEC_ClientCreateOptions_swigregister, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientCreate", _wrap_FEC_ClientCreate, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientBind", _wrap_FEC_ClientBind, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientSetReportCallback", _wrap_FEC_ClientSetReportCallback, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientEnableRuntimeLogging", _wrap_FEC_ClientEnableRuntimeLogging, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientDisableRuntimeLogging", _wrap_FEC_ClientDisableRuntimeLogging, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientGetReportSourceMask", _wrap_FEC_ClientGetReportSourceMask, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientGetReportLevelMax", _wrap_FEC_ClientGetReportLevelMax, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientSetReportSourceMask", _wrap_FEC_ClientSetReportSourceMask, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientSetReportLevelMax", _wrap_FEC_ClientSetReportLevelMax, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientGetContextID", _wrap_FEC_ClientGetContextID, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientGetMemoryUsage_Variant", _wrap_FEC_ClientGetMemoryUsage_Variant, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientStartInstrumentation", _wrap_FEC_ClientStartInstrumentation, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientStopInstrumentation_Variant", _wrap_FEC_ClientStopInstrumentation_Variant, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientExportExtension", _wrap_FEC_ClientExportExtension, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientSetLogWarnings", _wrap_FEC_ClientSetLogWarnings, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientSetStatusCallback", _wrap_FEC_ClientSetStatusCallback, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientGetStatusUserdata", _wrap_FEC_ClientGetStatusUserdata, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientSetSlowOperationCallback", _wrap_FEC_ClientSetSlowOperationCallback, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientQueueStatusMessage", _wrap_FEC_ClientQueueStatusMessage, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientValidateLicense", _wrap_FEC_ClientValidateLicense, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientHasCommercialLicense", _wrap_FEC_ClientHasCommercialLicense, METH_VARARGS, NULL},
	 { (char *)"FEC_SetStandaloneLicense", _wrap_FEC_SetStandaloneLicense, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientEnableBackgroundTasks", _wrap_FEC_ClientEnableBackgroundTasks, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientIsBackgroundOptimizationInProgress", _wrap_FEC_ClientIsBackgroundOptimizationInProgress, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientAdoptCurrentGLContext", _wrap_FEC_ClientAdoptCurrentGLContext, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientIdle", _wrap_FEC_ClientIdle, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientSupportsGPUCompute", _wrap_FEC_ClientSupportsGPUCompute, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientGetContext", _wrap_FEC_ClientGetContext, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientComputeMD5", _wrap_FEC_ClientComputeMD5, METH_VARARGS, NULL},
	 { (char *)"FEC_StringGetCStr", _wrap_FEC_StringGetCStr, METH_VARARGS, NULL},
	 { (char *)"FEC_StringGetSize", _wrap_FEC_StringGetSize, METH_VARARGS, NULL},
	 { (char *)"FEC_StringGetCStrAndSize", _wrap_FEC_StringGetCStrAndSize, METH_VARARGS, NULL},
	 { (char *)"FEC_StringAppend", _wrap_FEC_StringAppend, METH_VARARGS, NULL},
	 { (char *)"FEC_RTAssign", _wrap_FEC_RTAssign, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructValue", _wrap_FEC_RTConstructValue, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructValueFromBoolean", _wrap_FEC_RTConstructValueFromBoolean, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructValueFromSInt8", _wrap_FEC_RTConstructValueFromSInt8, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructValueFromSInt16", _wrap_FEC_RTConstructValueFromSInt16, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructValueFromSInt32", _wrap_FEC_RTConstructValueFromSInt32, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructValueFromSInt64", _wrap_FEC_RTConstructValueFromSInt64, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructValueFromUInt8", _wrap_FEC_RTConstructValueFromUInt8, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructValueFromUInt16", _wrap_FEC_RTConstructValueFromUInt16, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructValueFromUInt32", _wrap_FEC_RTConstructValueFromUInt32, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructValueFromUInt64", _wrap_FEC_RTConstructValueFromUInt64, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructValueFromFloat32", _wrap_FEC_RTConstructValueFromFloat32, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructValueFromFloat64", _wrap_FEC_RTConstructValueFromFloat64, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructValueFromData", _wrap_FEC_RTConstructValueFromData, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructValueFromString", _wrap_FEC_RTConstructValueFromString, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructValueFromCString", _wrap_FEC_RTConstructValueFromCString, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructFixedArrayValue", _wrap_FEC_RTConstructFixedArrayValue, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructVariableArrayValue", _wrap_FEC_RTConstructVariableArrayValue, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructExternalArrayValue", _wrap_FEC_RTConstructExternalArrayValue, METH_VARARGS, NULL},
	 { (char *)"FEC_RTConstructDictValue", _wrap_FEC_RTConstructDictValue, METH_VARARGS, NULL},
	 { (char *)"FEC_RTCreateValue", _wrap_FEC_RTCreateValue, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetBoolean", _wrap_FEC_RTValGetBoolean, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetUInt8", _wrap_FEC_RTValGetUInt8, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetUInt16", _wrap_FEC_RTValGetUInt16, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetUInt32", _wrap_FEC_RTValGetUInt32, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetUInt64", _wrap_FEC_RTValGetUInt64, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetSInt8", _wrap_FEC_RTValGetSInt8, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetSInt16", _wrap_FEC_RTValGetSInt16, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetSInt32", _wrap_FEC_RTValGetSInt32, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetSInt64", _wrap_FEC_RTValGetSInt64, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetFloat32", _wrap_FEC_RTValGetFloat32, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSetFloat32", _wrap_FEC_RTValSetFloat32, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetFloat64", _wrap_FEC_RTValGetFloat64, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetData", _wrap_FEC_RTValGetData, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSetData", _wrap_FEC_RTValSetData, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetStringCString", _wrap_FEC_RTValGetStringCString, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetStringLength", _wrap_FEC_RTValGetStringLength, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_type_set", _wrap_FEC_RTValSimpleData_type_set, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_type_get", _wrap_FEC_RTValSimpleData_type_get, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_get", _wrap_FEC_RTValSimpleData_value_get, METH_VARARGS, NULL},
	 { (char *)"new_FEC_RTValSimpleData", _wrap_new_FEC_RTValSimpleData, METH_VARARGS, NULL},
	 { (char *)"delete_FEC_RTValSimpleData", _wrap_delete_FEC_RTValSimpleData, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_swigregister", FEC_RTValSimpleData_swigregister, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_boolean_set", _wrap_FEC_RTValSimpleData_value_boolean_set, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_boolean_get", _wrap_FEC_RTValSimpleData_value_boolean_get, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_uint8_set", _wrap_FEC_RTValSimpleData_value_uint8_set, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_uint8_get", _wrap_FEC_RTValSimpleData_value_uint8_get, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_uint16_set", _wrap_FEC_RTValSimpleData_value_uint16_set, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_uint16_get", _wrap_FEC_RTValSimpleData_value_uint16_get, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_uint32_set", _wrap_FEC_RTValSimpleData_value_uint32_set, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_uint32_get", _wrap_FEC_RTValSimpleData_value_uint32_get, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_uint64_set", _wrap_FEC_RTValSimpleData_value_uint64_set, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_uint64_get", _wrap_FEC_RTValSimpleData_value_uint64_get, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_sint8_set", _wrap_FEC_RTValSimpleData_value_sint8_set, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_sint8_get", _wrap_FEC_RTValSimpleData_value_sint8_get, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_sint16_set", _wrap_FEC_RTValSimpleData_value_sint16_set, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_sint16_get", _wrap_FEC_RTValSimpleData_value_sint16_get, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_sint32_set", _wrap_FEC_RTValSimpleData_value_sint32_set, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_sint32_get", _wrap_FEC_RTValSimpleData_value_sint32_get, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_sint64_set", _wrap_FEC_RTValSimpleData_value_sint64_set, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_sint64_get", _wrap_FEC_RTValSimpleData_value_sint64_get, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_float32_set", _wrap_FEC_RTValSimpleData_value_float32_set, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_float32_get", _wrap_FEC_RTValSimpleData_value_float32_get, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_float64_set", _wrap_FEC_RTValSimpleData_value_float64_set, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_float64_get", _wrap_FEC_RTValSimpleData_value_float64_get, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_string_get", _wrap_FEC_RTValSimpleData_value_string_get, METH_VARARGS, NULL},
	 { (char *)"new_FEC_RTValSimpleData_value", _wrap_new_FEC_RTValSimpleData_value, METH_VARARGS, NULL},
	 { (char *)"delete_FEC_RTValSimpleData_value", _wrap_delete_FEC_RTValSimpleData_value, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_swigregister", FEC_RTValSimpleData_value_swigregister, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_string_cStringData_set", _wrap_FEC_RTValSimpleData_value_string_cStringData_set, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_string_cStringData_get", _wrap_FEC_RTValSimpleData_value_string_cStringData_get, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_string_length_set", _wrap_FEC_RTValSimpleData_value_string_length_set, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_string_length_get", _wrap_FEC_RTValSimpleData_value_string_length_get, METH_VARARGS, NULL},
	 { (char *)"new_FEC_RTValSimpleData_value_string", _wrap_new_FEC_RTValSimpleData_value_string, METH_VARARGS, NULL},
	 { (char *)"delete_FEC_RTValSimpleData_value_string", _wrap_delete_FEC_RTValSimpleData_value_string, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSimpleData_value_string_swigregister", FEC_RTValSimpleData_value_string_swigregister, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValMaybeGetSimpleData", _wrap_FEC_RTValMaybeGetSimpleData, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetArraySize", _wrap_FEC_RTValGetArraySize, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSetArraySize", _wrap_FEC_RTValSetArraySize, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetArrayElement", _wrap_FEC_RTValGetArrayElement, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetArrayElementRef", _wrap_FEC_RTValGetArrayElementRef, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSetArrayElement", _wrap_FEC_RTValSetArrayElement, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetDictSize", _wrap_FEC_RTValGetDictSize, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetDictKeys", _wrap_FEC_RTValGetDictKeys, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetDictElement", _wrap_FEC_RTValGetDictElement, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSetDictElement", _wrap_FEC_RTValSetDictElement, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValIsNullObject", _wrap_FEC_RTValIsNullObject, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValIsArray", _wrap_FEC_RTValIsArray, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValIsDict", _wrap_FEC_RTValIsDict, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValIsStruct", _wrap_FEC_RTValIsStruct, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValIsObject", _wrap_FEC_RTValIsObject, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValIsData", _wrap_FEC_RTValIsData, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValIsInterface", _wrap_FEC_RTValIsInterface, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValMaybeGetMember", _wrap_FEC_RTValMaybeGetMember, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValMaybeGetMemberRef", _wrap_FEC_RTValMaybeGetMemberRef, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSetMember", _wrap_FEC_RTValSetMember, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValCallMethod", _wrap_FEC_RTValCallMethod, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValCopy", _wrap_FEC_RTValCopy, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValClone", _wrap_FEC_RTValClone, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetDesc", _wrap_FEC_RTValGetDesc, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetTypeName", _wrap_FEC_RTValGetTypeName, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetTypeNameCStr", _wrap_FEC_RTValGetTypeNameCStr, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValGetJSON", _wrap_FEC_RTValGetJSON, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSetJSON", _wrap_FEC_RTValSetJSON, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValSetJSONFromCString", _wrap_FEC_RTValSetJSONFromCString, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValIsExEQTo", _wrap_FEC_RTValIsExEQTo, METH_VARARGS, NULL},
	 { (char *)"FEC_RTValHasType", _wrap_FEC_RTValHasType, METH_VARARGS, NULL},
	 { (char *)"FEC_RTGetRTSize", _wrap_FEC_RTGetRTSize, METH_VARARGS, NULL},
	 { (char *)"FEC_RTGetRTIsShallow", _wrap_FEC_RTGetRTIsShallow, METH_VARARGS, NULL},
	 { (char *)"FEC_RTGetRTIsStruct", _wrap_FEC_RTGetRTIsStruct, METH_VARARGS, NULL},
	 { (char *)"FEC_RTGetRTIsObject", _wrap_FEC_RTGetRTIsObject, METH_VARARGS, NULL},
	 { (char *)"FEC_RTGetRTIsInterface", _wrap_FEC_RTGetRTIsInterface, METH_VARARGS, NULL},
	 { (char *)"FEC_RTGetRTExtName", _wrap_FEC_RTGetRTExtName, METH_VARARGS, NULL},
	 { (char *)"FEC_RTGetRegisteredTypes_Variant", _wrap_FEC_RTGetRegisteredTypes_Variant, METH_VARARGS, NULL},
	 { (char *)"FEC_RTGetAggregateMemberInfo_Variant", _wrap_FEC_RTGetAggregateMemberInfo_Variant, METH_VARARGS, NULL},
	 { (char *)"FEC_RTGetTypeNames", _wrap_FEC_RTGetTypeNames, METH_VARARGS, NULL},
	 { (char *)"FEC_KLSourceFile_filenameCStr_set", _wrap_FEC_KLSourceFile_filenameCStr_set, METH_VARARGS, NULL},
	 { (char *)"FEC_KLSourceFile_filenameCStr_get", _wrap_FEC_KLSourceFile_filenameCStr_get, METH_VARARGS, NULL},
	 { (char *)"FEC_KLSourceFile_sourceCodeCStr_set", _wrap_FEC_KLSourceFile_sourceCodeCStr_set, METH_VARARGS, NULL},
	 { (char *)"FEC_KLSourceFile_sourceCodeCStr_get", _wrap_FEC_KLSourceFile_sourceCodeCStr_get, METH_VARARGS, NULL},
	 { (char *)"new_FEC_KLSourceFile", _wrap_new_FEC_KLSourceFile, METH_VARARGS, NULL},
	 { (char *)"delete_FEC_KLSourceFile", _wrap_delete_FEC_KLSourceFile, METH_VARARGS, NULL},
	 { (char *)"FEC_KLSourceFile_swigregister", FEC_KLSourceFile_swigregister, METH_VARARGS, NULL},
	 { (char *)"FEC_ClientGetDFGHost", _wrap_FEC_ClientGetDFGHost, METH_VARARGS, NULL},
	 { (char *)"FEC_ContextGetDFGHost", _wrap_FEC_ContextGetDFGHost, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostMaybeUndo", _wrap_FEC_DFGHostMaybeUndo, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostMaybeRedo", _wrap_FEC_DFGHostMaybeRedo, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostGetContext", _wrap_FEC_DFGHostGetContext, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostGetPresetDesc", _wrap_FEC_DFGHostGetPresetDesc, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostAddPresetDir", _wrap_FEC_DFGHostAddPresetDir, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostImportPresetFileJSON", _wrap_FEC_DFGHostImportPresetFileJSON, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostExportPresetJSON", _wrap_FEC_DFGHostExportPresetJSON, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostRemovePreset", _wrap_FEC_DFGHostRemovePreset, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostCreateBindingToNewGraph", _wrap_FEC_DFGHostCreateBindingToNewGraph, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostCreateBindingToNewFunc", _wrap_FEC_DFGHostCreateBindingToNewFunc, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostCreateBindingFromJSON", _wrap_FEC_DFGHostCreateBindingFromJSON, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostCreateBindingToPreset", _wrap_FEC_DFGHostCreateBindingToPreset, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostCreateNewUnboundGraph", _wrap_FEC_DFGHostCreateNewUnboundGraph, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostCreateNewUnboundFunc", _wrap_FEC_DFGHostCreateNewUnboundFunc, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostCreateNewUnboundExecFromJSON", _wrap_FEC_DFGHostCreateNewUnboundExecFromJSON, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostGetPresetImportPathname", _wrap_FEC_DFGHostGetPresetImportPathname, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostFlushUndoRedo", _wrap_FEC_DFGHostFlushUndoRedo, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostGetBindingForID", _wrap_FEC_DFGHostGetBindingForID, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostBlockComps", _wrap_FEC_DFGHostBlockComps, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGHostUnblockComps", _wrap_FEC_DFGHostUnblockComps, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGBindingGetID", _wrap_FEC_DFGBindingGetID, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGBindingGetHost", _wrap_FEC_DFGBindingGetHost, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGBindingGetExec", _wrap_FEC_DFGBindingGetExec, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGBindingGetArgValue_Index", _wrap_FEC_DFGBindingGetArgValue_Index, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGBindingGetArgValue_Name", _wrap_FEC_DFGBindingGetArgValue_Name, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGBindingSetArgValue_Index", _wrap_FEC_DFGBindingSetArgValue_Index, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGBindingSetArgValue_Name", _wrap_FEC_DFGBindingSetArgValue_Name, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGBindingExecute", _wrap_FEC_DFGBindingExecute, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGBindingSetNotificationCallback", _wrap_FEC_DFGBindingSetNotificationCallback, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGBindingExportJSON", _wrap_FEC_DFGBindingExportJSON, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGBindingDeallocValues", _wrap_FEC_DFGBindingDeallocValues, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGBindingGetMetadata", _wrap_FEC_DFGBindingGetMetadata, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGBindingSetMetadata", _wrap_FEC_DFGBindingSetMetadata, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGBindingGetVars", _wrap_FEC_DFGBindingGetVars, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGBindingGetVersion", _wrap_FEC_DFGBindingGetVersion, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetType", _wrap_FEC_DFGExecGetType, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetNodeType_Path", _wrap_FEC_DFGExecGetNodeType_Path, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetHost", _wrap_FEC_DFGExecGetHost, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetSubExec", _wrap_FEC_DFGExecGetSubExec, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecAddDebugNodePort", _wrap_FEC_DFGExecAddDebugNodePort, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetDebugNodePortValue", _wrap_FEC_DFGExecGetDebugNodePortValue, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecRemoveDebugNodePort", _wrap_FEC_DFGExecRemoveDebugNodePort, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetErrorCount", _wrap_FEC_DFGExecGetErrorCount, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetError", _wrap_FEC_DFGExecGetError, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecHaveExecPort", _wrap_FEC_DFGExecHaveExecPort, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetExecPortCount", _wrap_FEC_DFGExecGetExecPortCount, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetExecPortName", _wrap_FEC_DFGExecGetExecPortName, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetNodeCount", _wrap_FEC_DFGExecGetNodeCount, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetNodeName", _wrap_FEC_DFGExecGetNodeName, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetNodeType", _wrap_FEC_DFGExecGetNodeType, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetInstExec", _wrap_FEC_DFGExecGetInstExec, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetDesc", _wrap_FEC_DFGExecGetDesc, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetExecPortDesc", _wrap_FEC_DFGExecGetExecPortDesc, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetNodeDesc", _wrap_FEC_DFGExecGetNodeDesc, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetNodePortDesc", _wrap_FEC_DFGExecGetNodePortDesc, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetExecPortResolvedType_Index", _wrap_FEC_DFGExecGetExecPortResolvedType_Index, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetExecPortResolvedType_Path", _wrap_FEC_DFGExecGetExecPortResolvedType_Path, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecIsExecPortResolvedType_Index", _wrap_FEC_DFGExecIsExecPortResolvedType_Index, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetNodePortResolvedType", _wrap_FEC_DFGExecGetNodePortResolvedType, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecExportJSON", _wrap_FEC_DFGExecExportJSON, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecAddInstFromPreset", _wrap_FEC_DFGExecAddInstFromPreset, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecAddInstWithNewGraph", _wrap_FEC_DFGExecAddInstWithNewGraph, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecAddInstWithNewFunc", _wrap_FEC_DFGExecAddInstWithNewFunc, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecAddVar", _wrap_FEC_DFGExecAddVar, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecAddGet", _wrap_FEC_DFGExecAddGet, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecAddSet", _wrap_FEC_DFGExecAddSet, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetVarValue", _wrap_FEC_DFGExecGetVarValue, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetVarValue", _wrap_FEC_DFGExecSetVarValue, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetRefVarPath", _wrap_FEC_DFGExecGetRefVarPath, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetRefVarPath", _wrap_FEC_DFGExecSetRefVarPath, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecAddUser", _wrap_FEC_DFGExecAddUser, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetPortDefaultValue", _wrap_FEC_DFGExecGetPortDefaultValue, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetInstPortResolvedDefaultValue", _wrap_FEC_DFGExecGetInstPortResolvedDefaultValue, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetPortDefaultValue", _wrap_FEC_DFGExecSetPortDefaultValue, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecRemoveExecPort_Path", _wrap_FEC_DFGExecRemoveExecPort_Path, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecRemoveExecPort_Index", _wrap_FEC_DFGExecRemoveExecPort_Index, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecRemoveNode", _wrap_FEC_DFGExecRemoveNode, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecAttachPresetFile", _wrap_FEC_DFGExecAttachPresetFile, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecAddInstFromJSON", _wrap_FEC_DFGExecAddInstFromJSON, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecAddExtDep", _wrap_FEC_DFGExecAddExtDep, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetExtDeps", _wrap_FEC_DFGExecSetExtDeps, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetExtDeps", _wrap_FEC_DFGExecGetExtDeps, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetExtDepCount", _wrap_FEC_DFGExecGetExtDepCount, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetExtDepName", _wrap_FEC_DFGExecGetExtDepName, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetExtDepVersion", _wrap_FEC_DFGExecGetExtDepVersion, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecRemoveExtDep", _wrap_FEC_DFGExecRemoveExtDep, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecAddExecPort", _wrap_FEC_DFGExecAddExecPort, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecReorderExecPorts", _wrap_FEC_DFGExecReorderExecPorts, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetCacheRule", _wrap_FEC_DFGExecGetCacheRule, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetCacheRule", _wrap_FEC_DFGExecSetCacheRule, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetInstCacheRule", _wrap_FEC_DFGExecGetInstCacheRule, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetInstCacheRule", _wrap_FEC_DFGExecSetInstCacheRule, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecIsConnectedTo", _wrap_FEC_DFGExecIsConnectedTo, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecHasSrcPort", _wrap_FEC_DFGExecHasSrcPort, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecHasDstPorts", _wrap_FEC_DFGExecHasDstPorts, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecCanConnectTo", _wrap_FEC_DFGExecCanConnectTo, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecConnectTo", _wrap_FEC_DFGExecConnectTo, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecDisconnectFrom", _wrap_FEC_DFGExecDisconnectFrom, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecDisconnectFromAll", _wrap_FEC_DFGExecDisconnectFromAll, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecRenameExecPort", _wrap_FEC_DFGExecRenameExecPort, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecRenameNode", _wrap_FEC_DFGExecRenameNode, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetTitle", _wrap_FEC_DFGExecGetTitle, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetTitle", _wrap_FEC_DFGExecSetTitle, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetVersion", _wrap_FEC_DFGExecSetVersion, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetInstTitle_Index", _wrap_FEC_DFGExecGetInstTitle_Index, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetInstTitle_Path", _wrap_FEC_DFGExecGetInstTitle_Path, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetInstTitle_Index", _wrap_FEC_DFGExecSetInstTitle_Index, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetInstTitle_Path", _wrap_FEC_DFGExecSetInstTitle_Path, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetImportPathname", _wrap_FEC_DFGExecGetImportPathname, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetImportPathname", _wrap_FEC_DFGExecSetImportPathname, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetCode", _wrap_FEC_DFGExecGetCode, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetCode", _wrap_FEC_DFGExecSetCode, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetMetadata", _wrap_FEC_DFGExecGetMetadata, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetExecPortMetadata", _wrap_FEC_DFGExecGetExecPortMetadata, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetNodeMetadata", _wrap_FEC_DFGExecGetNodeMetadata, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetNodePortMetadata", _wrap_FEC_DFGExecGetNodePortMetadata, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetMetadata", _wrap_FEC_DFGExecSetMetadata, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetExecPortMetadata", _wrap_FEC_DFGExecSetExecPortMetadata, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetNodeMetadata", _wrap_FEC_DFGExecSetNodeMetadata, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetNodePortMetadata", _wrap_FEC_DFGExecSetNodePortMetadata, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecBind", _wrap_FEC_DFGExecBind, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecCreateView", _wrap_FEC_DFGExecCreateView, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetNodePortType", _wrap_FEC_DFGExecGetNodePortType, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetExecPortType_Index", _wrap_FEC_DFGExecGetExecPortType_Index, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetExecPortType_Path", _wrap_FEC_DFGExecGetExecPortType_Path, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetExecPortType", _wrap_FEC_DFGExecSetExecPortType, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetExecPortTypeSpec_Index", _wrap_FEC_DFGExecGetExecPortTypeSpec_Index, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetExecPortTypeSpec_Path", _wrap_FEC_DFGExecGetExecPortTypeSpec_Path, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetExecPortTypeSpec_Index", _wrap_FEC_DFGExecSetExecPortTypeSpec_Index, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetExecPortTypeSpec_Path", _wrap_FEC_DFGExecSetExecPortTypeSpec_Path, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetExecPortName_Index", _wrap_FEC_DFGExecGetExecPortName_Index, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetExecPortName_Path", _wrap_FEC_DFGExecGetExecPortName_Path, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetNodePortCount_Path", _wrap_FEC_DFGExecGetNodePortCount_Path, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetNodePortName_Index_Index", _wrap_FEC_DFGExecGetNodePortName_Index_Index, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetNodePortName_Path_Index", _wrap_FEC_DFGExecGetNodePortName_Path_Index, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetNodePortName_Path", _wrap_FEC_DFGExecGetNodePortName_Path, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecExportNodesJSON", _wrap_FEC_DFGExecExportNodesJSON, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecImportNodesJSON", _wrap_FEC_DFGExecImportNodesJSON, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecImplodeNodes", _wrap_FEC_DFGExecImplodeNodes, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecExplodeNode", _wrap_FEC_DFGExecExplodeNode, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetPresetName", _wrap_FEC_DFGExecGetPresetName, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetPresetGUID", _wrap_FEC_DFGExecGetPresetGUID, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecGetOrigPresetGUID", _wrap_FEC_DFGExecGetOrigPresetGUID, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecSetPresetGUID", _wrap_FEC_DFGExecSetPresetGUID, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecEditWouldSplitFromPreset", _wrap_FEC_DFGExecEditWouldSplitFromPreset, METH_VARARGS, NULL},
	 { (char *)"FEC_DFGExecMaybeSplitFromPreset", _wrap_FEC_DFGExecMaybeSplitFromPreset, METH_VARARGS, NULL},
	 { (char *)"FEC_DGCompiledObjectGetContext", _wrap_FEC_DGCompiledObjectGetContext, METH_VARARGS, NULL},
	 { (char *)"FEC_DGCompiledObjectPrepareForExecution", _wrap_FEC_DGCompiledObjectPrepareForExecution, METH_VARARGS, NULL},
	 { (char *)"FEC_DGCompiledObjectGetErrors_Variant", _wrap_FEC_DGCompiledObjectGetErrors_Variant, METH_VARARGS, NULL},
	 { (char *)"FEC_DGBindingCreateEmpty", _wrap_FEC_DGBindingCreateEmpty, METH_VARARGS, NULL},
	 { (char *)"FEC_DGBindingCreate", _wrap_FEC_DGBindingCreate, METH_VARARGS, NULL},
	 { (char *)"FEC_DGBindingSetOperator", _wrap_FEC_DGBindingSetOperator, METH_VARARGS, NULL},
	 { (char *)"FEC_DGBindingGetOperator", _wrap_FEC_DGBindingGetOperator, METH_VARARGS, NULL},
	 { (char *)"FEC_DGBindingSetParameterLayout", _wrap_FEC_DGBindingSetParameterLayout, METH_VARARGS, NULL},
	 { (char *)"FEC_DGBindingGetParameterLayout_Variant", _wrap_FEC_DGBindingGetParameterLayout_Variant, METH_VARARGS, NULL},
	 { (char *)"FEC_DGNamedObjectDestroy", _wrap_FEC_DGNamedObjectDestroy, METH_VARARGS, NULL},
	 { (char *)"FEC_DGNamedObjectGetName", _wrap_FEC_DGNamedObjectGetName, METH_VARARGS, NULL},
	 { (char *)"FEC_DGNamedObjectGetByName", _wrap_FEC_DGNamedObjectGetByName, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerAddMember_Variant", _wrap_FEC_DGContainerAddMember_Variant, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerRemoveMember", _wrap_FEC_DGContainerRemoveMember, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitWithDGContainerGetMembers", _wrap_FEC_VariantInitWithDGContainerGetMembers, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerGetMemberType_cstr", _wrap_FEC_DGContainerGetMemberType_cstr, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerGetMemberSize", _wrap_FEC_DGContainerGetMemberSize, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerGetMemberIsShallow", _wrap_FEC_DGContainerGetMemberIsShallow, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitWithDGContainerGetMemberDefaultData", _wrap_FEC_VariantInitWithDGContainerGetMemberDefaultData, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerGetSize", _wrap_FEC_DGContainerGetSize, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerSetSize", _wrap_FEC_DGContainerSetSize, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerGetMemberAllSlicesData", _wrap_FEC_DGContainerGetMemberAllSlicesData, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerSetMemberAllSlicesData", _wrap_FEC_DGContainerSetMemberAllSlicesData, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerGetMemberSliceData", _wrap_FEC_DGContainerGetMemberSliceData, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerSetMemberSliceData", _wrap_FEC_DGContainerSetMemberSliceData, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerGetMemberSliceArraySize", _wrap_FEC_DGContainerGetMemberSliceArraySize, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerSetMemberSliceArraySize", _wrap_FEC_DGContainerSetMemberSliceArraySize, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerGetMemberSliceArrayData", _wrap_FEC_DGContainerGetMemberSliceArrayData, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerSetMemberSliceArrayData", _wrap_FEC_DGContainerSetMemberSliceArrayData, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerGetMemberSliceData_Float32", _wrap_FEC_DGContainerGetMemberSliceData_Float32, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerSetMemberSliceData_Float32", _wrap_FEC_DGContainerSetMemberSliceData_Float32, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitWithDGContainerGetMemberSlice", _wrap_FEC_VariantInitWithDGContainerGetMemberSlice, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerSetMemberSlice_Variant", _wrap_FEC_DGContainerSetMemberSlice_Variant, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerSetSlice_Variant", _wrap_FEC_DGContainerSetSlice_Variant, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerGetMemberSliceValue", _wrap_FEC_DGContainerGetMemberSliceValue, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerSetMemberSliceValue", _wrap_FEC_DGContainerSetMemberSliceValue, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerGetJSONStringValue", _wrap_FEC_DGContainerGetJSONStringValue, METH_VARARGS, NULL},
	 { (char *)"FEC_DGContainerSetJSONStringValue", _wrap_FEC_DGContainerSetJSONStringValue, METH_VARARGS, NULL},
	 { (char *)"FEC_DGOperatorCreate", _wrap_FEC_DGOperatorCreate, METH_VARARGS, NULL},
	 { (char *)"FEC_DGOperatorCreateEmpty", _wrap_FEC_DGOperatorCreateEmpty, METH_VARARGS, NULL},
	 { (char *)"FEC_DGOperatorSetFilename", _wrap_FEC_DGOperatorSetFilename, METH_VARARGS, NULL},
	 { (char *)"FEC_DGOperatorGetFilename_cstr", _wrap_FEC_DGOperatorGetFilename_cstr, METH_VARARGS, NULL},
	 { (char *)"FEC_DGOperatorSetSourceCode", _wrap_FEC_DGOperatorSetSourceCode, METH_VARARGS, NULL},
	 { (char *)"FEC_DGOperatorGetSourceCode_cstr", _wrap_FEC_DGOperatorGetSourceCode_cstr, METH_VARARGS, NULL},
	 { (char *)"FEC_DGOperatorSetEntryPoint", _wrap_FEC_DGOperatorSetEntryPoint, METH_VARARGS, NULL},
	 { (char *)"FEC_DGOperatorGetEntryPoint_cstr", _wrap_FEC_DGOperatorGetEntryPoint_cstr, METH_VARARGS, NULL},
	 { (char *)"FEC_DGOperatorSetMainThreadOnly", _wrap_FEC_DGOperatorSetMainThreadOnly, METH_VARARGS, NULL},
	 { (char *)"FEC_DGOperatorGetMainThreadOnly", _wrap_FEC_DGOperatorGetMainThreadOnly, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitWithDGOperatorGetDiagnostics", _wrap_FEC_VariantInitWithDGOperatorGetDiagnostics, METH_VARARGS, NULL},
	 { (char *)"FEC_DGOperatorExportKL", _wrap_FEC_DGOperatorExportKL, METH_VARARGS, NULL},
	 { (char *)"FEC_DGOperatorImportKL", _wrap_FEC_DGOperatorImportKL, METH_VARARGS, NULL},
	 { (char *)"FEC_DGNodeCreate", _wrap_FEC_DGNodeCreate, METH_VARARGS, NULL},
	 { (char *)"FEC_DGNodeAppendBinding", _wrap_FEC_DGNodeAppendBinding, METH_VARARGS, NULL},
	 { (char *)"FEC_DGNodeGetBindingList", _wrap_FEC_DGNodeGetBindingList, METH_VARARGS, NULL},
	 { (char *)"FEC_DGNodeEvaluate", _wrap_FEC_DGNodeEvaluate, METH_VARARGS, NULL},
	 { (char *)"FEC_DGNodeSetDependency", _wrap_FEC_DGNodeSetDependency, METH_VARARGS, NULL},
	 { (char *)"FEC_DGNodeRemoveDependency", _wrap_FEC_DGNodeRemoveDependency, METH_VARARGS, NULL},
	 { (char *)"FEC_DGNodeGetDependencies_Variant", _wrap_FEC_DGNodeGetDependencies_Variant, METH_VARARGS, NULL},
	 { (char *)"FEC_DGNodeGetDependency", _wrap_FEC_DGNodeGetDependency, METH_VARARGS, NULL},
	 { (char *)"FEC_DGNodeSetDirty", _wrap_FEC_DGNodeSetDirty, METH_VARARGS, NULL},
	 { (char *)"FEC_DGBindingListAppend", _wrap_FEC_DGBindingListAppend, METH_VARARGS, NULL},
	 { (char *)"FEC_DGBindingListInsert", _wrap_FEC_DGBindingListInsert, METH_VARARGS, NULL},
	 { (char *)"FEC_DGBindingListRemove", _wrap_FEC_DGBindingListRemove, METH_VARARGS, NULL},
	 { (char *)"FEC_DGBindingListGetBinding", _wrap_FEC_DGBindingListGetBinding, METH_VARARGS, NULL},
	 { (char *)"FEC_DGBindingListGetLength", _wrap_FEC_DGBindingListGetLength, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventCreate", _wrap_FEC_DGEventCreate, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventRemoveEventHandler", _wrap_FEC_DGEventRemoveEventHandler, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventAppendEventHandler", _wrap_FEC_DGEventAppendEventHandler, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventFire", _wrap_FEC_DGEventFire, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventSetSelectType", _wrap_FEC_DGEventSetSelectType, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventGetSelectType", _wrap_FEC_DGEventGetSelectType, METH_VARARGS, NULL},
	 { (char *)"FEC_VariantInitWithDGEventSelect", _wrap_FEC_VariantInitWithDGEventSelect, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventGetEventHandlers_Variant", _wrap_FEC_DGEventGetEventHandlers_Variant, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventHandlerCreate", _wrap_FEC_DGEventHandlerCreate, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventHandlerAppendChildEventHandler", _wrap_FEC_DGEventHandlerAppendChildEventHandler, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventHandlerRemoveChildEventHandler", _wrap_FEC_DGEventHandlerRemoveChildEventHandler, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventHandlerAppendPreDescendBinding", _wrap_FEC_DGEventHandlerAppendPreDescendBinding, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventHandlerGetPreDescendBindingList", _wrap_FEC_DGEventHandlerGetPreDescendBindingList, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventHandlerAppendPostDescendBinding", _wrap_FEC_DGEventHandlerAppendPostDescendBinding, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventHandlerGetPostDescendBindingList", _wrap_FEC_DGEventHandlerGetPostDescendBindingList, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventHandlerSetScopeName", _wrap_FEC_DGEventHandlerSetScopeName, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventHandlerGetScopeName_cstr", _wrap_FEC_DGEventHandlerGetScopeName_cstr, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventHandlerSetScope", _wrap_FEC_DGEventHandlerSetScope, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventHandlerRemoveScope", _wrap_FEC_DGEventHandlerRemoveScope, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventHandlerSetSelector", _wrap_FEC_DGEventHandlerSetSelector, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventHandlerGetChildEventHandlers_Variant", _wrap_FEC_DGEventHandlerGetChildEventHandlers_Variant, METH_VARARGS, NULL},
	 { (char *)"FEC_DGEventHandlerGetScopes_Variant", _wrap_FEC_DGEventHandlerGetScopes_Variant, METH_VARARGS, NULL},
	 { (char *)"FEC_GetKLJSONAST", _wrap_FEC_GetKLJSONAST, METH_VARARGS, NULL},
	 { (char *)"FEC_KLTokenStreamCreate", _wrap_FEC_KLTokenStreamCreate, METH_VARARGS, NULL},
	 { (char *)"FEC_KLTokenStreamGetNext", _wrap_FEC_KLTokenStreamGetNext, METH_VARARGS, NULL},
	 { (char *)"FEC_GetFabricDir", _wrap_FEC_GetFabricDir, METH_VARARGS, NULL},
	 { (char *)"Initialize", _wrap_Initialize, METH_VARARGS, NULL},
	 { (char *)"Finalize", _wrap_Finalize, METH_VARARGS, NULL},
	 { (char *)"GetVersionMaj", _wrap_GetVersionMaj, METH_VARARGS, NULL},
	 { (char *)"GetVersionMin", _wrap_GetVersionMin, METH_VARARGS, NULL},
	 { (char *)"GetVersionRev", _wrap_GetVersionRev, METH_VARARGS, NULL},
	 { (char *)"GetVersionStr", _wrap_GetVersionStr, METH_VARARGS, NULL},
	 { (char *)"new_Exception", _wrap_new_Exception, METH_VARARGS, NULL},
	 { (char *)"delete_Exception", _wrap_delete_Exception, METH_VARARGS, NULL},
	 { (char *)"Exception_getDescData", _wrap_Exception_getDescData, METH_VARARGS, NULL},
	 { (char *)"Exception_getDescLength", _wrap_Exception_getDescLength, METH_VARARGS, NULL},
	 { (char *)"Exception_getDesc_cstr", _wrap_Exception_getDesc_cstr, METH_VARARGS, NULL},
	 { (char *)"Exception_getDesc_stl", _wrap_Exception_getDesc_stl, METH_VARARGS, NULL},
	 { (char *)"Exception_ClearLastException", _wrap_Exception_ClearLastException, METH_VARARGS, NULL},
	 { (char *)"Exception_MaybeThrowLastException", _wrap_Exception_MaybeThrowLastException, METH_VARARGS, NULL},
	 { (char *)"Exception_Throw", _wrap_Exception_Throw, METH_VARARGS, NULL},
	 { (char *)"Exception_swigregister", Exception_swigregister, METH_VARARGS, NULL},
	 { (char *)"EnableDebug", _wrap_EnableDebug, METH_VARARGS, NULL},
	 { (char *)"new_Variant", _wrap_new_Variant, METH_VARARGS, NULL},
	 { (char *)"Variant_getFECVariant", _wrap_Variant_getFECVariant, METH_VARARGS, NULL},
	 { (char *)"Variant_clone", _wrap_Variant_clone, METH_VARARGS, NULL},
	 { (char *)"Variant_take", _wrap_Variant_take, METH_VARARGS, NULL},
	 { (char *)"delete_Variant", _wrap_delete_Variant, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateNull", _wrap_Variant_CreateNull, METH_VARARGS, NULL},
	 { (char *)"Variant_isNull", _wrap_Variant_isNull, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateBoolean", _wrap_Variant_CreateBoolean, METH_VARARGS, NULL},
	 { (char *)"Variant_isBoolean", _wrap_Variant_isBoolean, METH_VARARGS, NULL},
	 { (char *)"Variant_getBoolean", _wrap_Variant_getBoolean, METH_VARARGS, NULL},
	 { (char *)"Variant_setBoolean", _wrap_Variant_setBoolean, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateUInt8", _wrap_Variant_CreateUInt8, METH_VARARGS, NULL},
	 { (char *)"Variant_isUInt8", _wrap_Variant_isUInt8, METH_VARARGS, NULL},
	 { (char *)"Variant_getUInt8", _wrap_Variant_getUInt8, METH_VARARGS, NULL},
	 { (char *)"Variant_setUInt8", _wrap_Variant_setUInt8, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateSInt8", _wrap_Variant_CreateSInt8, METH_VARARGS, NULL},
	 { (char *)"Variant_isSInt8", _wrap_Variant_isSInt8, METH_VARARGS, NULL},
	 { (char *)"Variant_getSInt8", _wrap_Variant_getSInt8, METH_VARARGS, NULL},
	 { (char *)"Variant_setSInt8", _wrap_Variant_setSInt8, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateUInt16", _wrap_Variant_CreateUInt16, METH_VARARGS, NULL},
	 { (char *)"Variant_isUInt16", _wrap_Variant_isUInt16, METH_VARARGS, NULL},
	 { (char *)"Variant_getUInt16", _wrap_Variant_getUInt16, METH_VARARGS, NULL},
	 { (char *)"Variant_setUInt16", _wrap_Variant_setUInt16, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateSInt16", _wrap_Variant_CreateSInt16, METH_VARARGS, NULL},
	 { (char *)"Variant_isSInt16", _wrap_Variant_isSInt16, METH_VARARGS, NULL},
	 { (char *)"Variant_getSInt16", _wrap_Variant_getSInt16, METH_VARARGS, NULL},
	 { (char *)"Variant_setSInt16", _wrap_Variant_setSInt16, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateUInt32", _wrap_Variant_CreateUInt32, METH_VARARGS, NULL},
	 { (char *)"Variant_isUInt32", _wrap_Variant_isUInt32, METH_VARARGS, NULL},
	 { (char *)"Variant_getUInt32", _wrap_Variant_getUInt32, METH_VARARGS, NULL},
	 { (char *)"Variant_setUInt32", _wrap_Variant_setUInt32, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateSInt32", _wrap_Variant_CreateSInt32, METH_VARARGS, NULL},
	 { (char *)"Variant_isSInt32", _wrap_Variant_isSInt32, METH_VARARGS, NULL},
	 { (char *)"Variant_getSInt32", _wrap_Variant_getSInt32, METH_VARARGS, NULL},
	 { (char *)"Variant_setSInt32", _wrap_Variant_setSInt32, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateUInt64", _wrap_Variant_CreateUInt64, METH_VARARGS, NULL},
	 { (char *)"Variant_isUInt64", _wrap_Variant_isUInt64, METH_VARARGS, NULL},
	 { (char *)"Variant_getUInt64", _wrap_Variant_getUInt64, METH_VARARGS, NULL},
	 { (char *)"Variant_setUInt64", _wrap_Variant_setUInt64, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateSInt64", _wrap_Variant_CreateSInt64, METH_VARARGS, NULL},
	 { (char *)"Variant_isSInt64", _wrap_Variant_isSInt64, METH_VARARGS, NULL},
	 { (char *)"Variant_getSInt64", _wrap_Variant_getSInt64, METH_VARARGS, NULL},
	 { (char *)"Variant_setSInt64", _wrap_Variant_setSInt64, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateFloat32", _wrap_Variant_CreateFloat32, METH_VARARGS, NULL},
	 { (char *)"Variant_isFloat32", _wrap_Variant_isFloat32, METH_VARARGS, NULL},
	 { (char *)"Variant_getFloat32", _wrap_Variant_getFloat32, METH_VARARGS, NULL},
	 { (char *)"Variant_setFloat32", _wrap_Variant_setFloat32, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateFloat64", _wrap_Variant_CreateFloat64, METH_VARARGS, NULL},
	 { (char *)"Variant_isFloat64", _wrap_Variant_isFloat64, METH_VARARGS, NULL},
	 { (char *)"Variant_getFloat64", _wrap_Variant_getFloat64, METH_VARARGS, NULL},
	 { (char *)"Variant_setFloat64", _wrap_Variant_setFloat64, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateString_Take", _wrap_Variant_CreateString_Take, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateString", _wrap_Variant_CreateString, METH_VARARGS, NULL},
	 { (char *)"Variant_isString", _wrap_Variant_isString, METH_VARARGS, NULL},
	 { (char *)"Variant_getStringData", _wrap_Variant_getStringData, METH_VARARGS, NULL},
	 { (char *)"Variant_getStringLength", _wrap_Variant_getStringLength, METH_VARARGS, NULL},
	 { (char *)"Variant_getString_cstr", _wrap_Variant_getString_cstr, METH_VARARGS, NULL},
	 { (char *)"Variant_getString_stl", _wrap_Variant_getString_stl, METH_VARARGS, NULL},
	 { (char *)"Variant_setString", _wrap_Variant_setString, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateArray", _wrap_Variant_CreateArray, METH_VARARGS, NULL},
	 { (char *)"Variant_isArray", _wrap_Variant_isArray, METH_VARARGS, NULL},
	 { (char *)"Variant_getArraySize", _wrap_Variant_getArraySize, METH_VARARGS, NULL},
	 { (char *)"Variant_getArrayElement", _wrap_Variant_getArrayElement, METH_VARARGS, NULL},
	 { (char *)"Variant_arrayAppend", _wrap_Variant_arrayAppend, METH_VARARGS, NULL},
	 { (char *)"Variant_arrayAppendTake", _wrap_Variant_arrayAppendTake, METH_VARARGS, NULL},
	 { (char *)"Variant_setElementCopy", _wrap_Variant_setElementCopy, METH_VARARGS, NULL},
	 { (char *)"Variant_setElementTake", _wrap_Variant_setElementTake, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateDict", _wrap_Variant_CreateDict, METH_VARARGS, NULL},
	 { (char *)"Variant_isDict", _wrap_Variant_isDict, METH_VARARGS, NULL},
	 { (char *)"Variant_getDictValue", _wrap_Variant_getDictValue, METH_VARARGS, NULL},
	 { (char *)"Variant_setDictValue", _wrap_Variant_setDictValue, METH_VARARGS, NULL},
	 { (char *)"Variant_getDesc", _wrap_Variant_getDesc, METH_VARARGS, NULL},
	 { (char *)"Variant_getDesc_stl", _wrap_Variant_getDesc_stl, METH_VARARGS, NULL},
	 { (char *)"Variant_CreateFromJSON", _wrap_Variant_CreateFromJSON, METH_VARARGS, NULL},
	 { (char *)"Variant_getJSONEncoding", _wrap_Variant_getJSONEncoding, METH_VARARGS, NULL},
	 { (char *)"Variant_getJSONEncoding_stl", _wrap_Variant_getJSONEncoding_stl, METH_VARARGS, NULL},
	 { (char *)"Variant_swigregister", Variant_swigregister, METH_VARARGS, NULL},
	 { (char *)"KLTool", _wrap_KLTool, METH_VARARGS, NULL},
	 { (char *)"KL2EDK", _wrap_KL2EDK, METH_VARARGS, NULL},
	 { (char *)"KLExport", _wrap_KLExport, METH_VARARGS, NULL},
	 { (char *)"new_Ref", _wrap_new_Ref, METH_VARARGS, NULL},
	 { (char *)"delete_Ref", _wrap_delete_Ref, METH_VARARGS, NULL},
	 { (char *)"Ref_getFECRef", _wrap_Ref_getFECRef, METH_VARARGS, NULL},
	 { (char *)"Ref_takeFECRef", _wrap_Ref_takeFECRef, METH_VARARGS, NULL},
	 { (char *)"Ref_invalidate", _wrap_Ref_invalidate, METH_VARARGS, NULL},
	 { (char *)"Ref_isValid", _wrap_Ref_isValid, METH_VARARGS, NULL},
	 { (char *)"Ref___nonzero__", _wrap_Ref___nonzero__, METH_VARARGS, NULL},
	 { (char *)"Ref_swigregister", Ref_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_String", _wrap_new_String, METH_VARARGS, NULL},
	 { (char *)"String_getCStr", _wrap_String_getCStr, METH_VARARGS, NULL},
	 { (char *)"String_getSize", _wrap_String_getSize, METH_VARARGS, NULL},
	 { (char *)"String_getCStrAndSize", _wrap_String_getCStrAndSize, METH_VARARGS, NULL},
	 { (char *)"String_append", _wrap_String_append, METH_VARARGS, NULL},
	 { (char *)"String_getCString", _wrap_String_getCString, METH_VARARGS, NULL},
	 { (char *)"String_getLength", _wrap_String_getLength, METH_VARARGS, NULL},
	 { (char *)"String_getStringDataAndLength", _wrap_String_getStringDataAndLength, METH_VARARGS, NULL},
	 { (char *)"delete_String", _wrap_delete_String, METH_VARARGS, NULL},
	 { (char *)"String_swigregister", String_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DFGView", _wrap_new_DFGView, METH_VARARGS, NULL},
	 { (char *)"delete_DFGView", _wrap_delete_DFGView, METH_VARARGS, NULL},
	 { (char *)"DFGView_getFECDFGViewRef", _wrap_DFGView_getFECDFGViewRef, METH_VARARGS, NULL},
	 { (char *)"DFGView_swigregister", DFGView_swigregister, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getFECDFGExecRef", _wrap_DFGExec_getFECDFGExecRef, METH_VARARGS, NULL},
	 { (char *)"new_DFGExec", _wrap_new_DFGExec, METH_VARARGS, NULL},
	 { (char *)"delete_DFGExec", _wrap_delete_DFGExec, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getType", _wrap_DFGExec_getType, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getHost", _wrap_DFGExec_getHost, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getSubExec", _wrap_DFGExec_getSubExec, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getErrorCount", _wrap_DFGExec_getErrorCount, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getError", _wrap_DFGExec_getError, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getExtDeps", _wrap_DFGExec_getExtDeps, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getExtDepCount", _wrap_DFGExec_getExtDepCount, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getExtDepName", _wrap_DFGExec_getExtDepName, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getExtDepVersion", _wrap_DFGExec_getExtDepVersion, METH_VARARGS, NULL},
	 { (char *)"DFGExec_haveExecPort", _wrap_DFGExec_haveExecPort, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getExecPortCount", _wrap_DFGExec_getExecPortCount, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getNodeCount", _wrap_DFGExec_getNodeCount, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getNodeName", _wrap_DFGExec_getNodeName, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getNodeType", _wrap_DFGExec_getNodeType, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getInstExec", _wrap_DFGExec_getInstExec, METH_VARARGS, NULL},
	 { (char *)"DFGExec_addDebugNodePort", _wrap_DFGExec_addDebugNodePort, METH_VARARGS, NULL},
	 { (char *)"DFGExec_removeDebugNodePort", _wrap_DFGExec_removeDebugNodePort, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getDesc", _wrap_DFGExec_getDesc, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getExecPortDesc", _wrap_DFGExec_getExecPortDesc, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getNodeDesc", _wrap_DFGExec_getNodeDesc, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getNodePortDesc", _wrap_DFGExec_getNodePortDesc, METH_VARARGS, NULL},
	 { (char *)"DFGExec_isExecPortResolvedType", _wrap_DFGExec_isExecPortResolvedType, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getExecPortResolvedType", _wrap_DFGExec_getExecPortResolvedType, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getNodePortResolvedType", _wrap_DFGExec_getNodePortResolvedType, METH_VARARGS, NULL},
	 { (char *)"DFGExec_exportJSON", _wrap_DFGExec_exportJSON, METH_VARARGS, NULL},
	 { (char *)"DFGExec_addInstFromPreset", _wrap_DFGExec_addInstFromPreset, METH_VARARGS, NULL},
	 { (char *)"DFGExec_addInstWithNewGraph", _wrap_DFGExec_addInstWithNewGraph, METH_VARARGS, NULL},
	 { (char *)"DFGExec_addInstWithNewFunc", _wrap_DFGExec_addInstWithNewFunc, METH_VARARGS, NULL},
	 { (char *)"DFGExec_addInstFromJSON", _wrap_DFGExec_addInstFromJSON, METH_VARARGS, NULL},
	 { (char *)"DFGExec_addVar", _wrap_DFGExec_addVar, METH_VARARGS, NULL},
	 { (char *)"DFGExec_addGet", _wrap_DFGExec_addGet, METH_VARARGS, NULL},
	 { (char *)"DFGExec_addSet", _wrap_DFGExec_addSet, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getVarValue_RTVal", _wrap_DFGExec_getVarValue_RTVal, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setVarValue_RTVal", _wrap_DFGExec_setVarValue_RTVal, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getRefVarPath", _wrap_DFGExec_getRefVarPath, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setRefVarPath", _wrap_DFGExec_setRefVarPath, METH_VARARGS, NULL},
	 { (char *)"DFGExec_addUser", _wrap_DFGExec_addUser, METH_VARARGS, NULL},
	 { (char *)"DFGExec_addExtDep", _wrap_DFGExec_addExtDep, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setExtDeps", _wrap_DFGExec_setExtDeps, METH_VARARGS, NULL},
	 { (char *)"DFGExec_removeExtDep", _wrap_DFGExec_removeExtDep, METH_VARARGS, NULL},
	 { (char *)"DFGExec_addExecPort", _wrap_DFGExec_addExecPort, METH_VARARGS, NULL},
	 { (char *)"DFGExec_reorderExecPorts", _wrap_DFGExec_reorderExecPorts, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getCacheRule", _wrap_DFGExec_getCacheRule, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setCacheRule", _wrap_DFGExec_setCacheRule, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getInstCacheRule", _wrap_DFGExec_getInstCacheRule, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setInstCacheRule", _wrap_DFGExec_setInstCacheRule, METH_VARARGS, NULL},
	 { (char *)"DFGExec_isConnectedTo", _wrap_DFGExec_isConnectedTo, METH_VARARGS, NULL},
	 { (char *)"DFGExec_hasSrcPort", _wrap_DFGExec_hasSrcPort, METH_VARARGS, NULL},
	 { (char *)"DFGExec_hasDstPorts", _wrap_DFGExec_hasDstPorts, METH_VARARGS, NULL},
	 { (char *)"DFGExec_canConnectTo", _wrap_DFGExec_canConnectTo, METH_VARARGS, NULL},
	 { (char *)"DFGExec_connectTo", _wrap_DFGExec_connectTo, METH_VARARGS, NULL},
	 { (char *)"DFGExec_disconnectFrom", _wrap_DFGExec_disconnectFrom, METH_VARARGS, NULL},
	 { (char *)"DFGExec_disconnectFromAll", _wrap_DFGExec_disconnectFromAll, METH_VARARGS, NULL},
	 { (char *)"DFGExec_attachPresetFile", _wrap_DFGExec_attachPresetFile, METH_VARARGS, NULL},
	 { (char *)"DFGExec_renameExecPort", _wrap_DFGExec_renameExecPort, METH_VARARGS, NULL},
	 { (char *)"DFGExec_renameNode", _wrap_DFGExec_renameNode, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getTitle", _wrap_DFGExec_getTitle, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setTitle", _wrap_DFGExec_setTitle, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setVersion", _wrap_DFGExec_setVersion, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getInstTitle", _wrap_DFGExec_getInstTitle, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setInstTitle", _wrap_DFGExec_setInstTitle, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getNodePortType", _wrap_DFGExec_getNodePortType, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getExecPortType", _wrap_DFGExec_getExecPortType, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setExecPortType", _wrap_DFGExec_setExecPortType, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getCode", _wrap_DFGExec_getCode, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setCode", _wrap_DFGExec_setCode, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getMetadata", _wrap_DFGExec_getMetadata, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getExecPortMetadata", _wrap_DFGExec_getExecPortMetadata, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getNodeMetadata", _wrap_DFGExec_getNodeMetadata, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getNodePortMetadata", _wrap_DFGExec_getNodePortMetadata, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setMetadata", _wrap_DFGExec_setMetadata, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setExecPortMetadata", _wrap_DFGExec_setExecPortMetadata, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setNodeMetadata", _wrap_DFGExec_setNodeMetadata, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setNodePortMetadata", _wrap_DFGExec_setNodePortMetadata, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getImportPathname", _wrap_DFGExec_getImportPathname, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setImportPathname", _wrap_DFGExec_setImportPathname, METH_VARARGS, NULL},
	 { (char *)"DFGExec_removeExecPort", _wrap_DFGExec_removeExecPort, METH_VARARGS, NULL},
	 { (char *)"DFGExec_removeNode", _wrap_DFGExec_removeNode, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getExecPortTypeSpec", _wrap_DFGExec_getExecPortTypeSpec, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setExecPortTypeSpec", _wrap_DFGExec_setExecPortTypeSpec, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getExecPortName", _wrap_DFGExec_getExecPortName, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getNodePortCount", _wrap_DFGExec_getNodePortCount, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getNodePortName", _wrap_DFGExec_getNodePortName, METH_VARARGS, NULL},
	 { (char *)"DFGExec_importNodesJSON", _wrap_DFGExec_importNodesJSON, METH_VARARGS, NULL},
	 { (char *)"DFGExec_implodeNodes", _wrap_DFGExec_implodeNodes, METH_VARARGS, NULL},
	 { (char *)"DFGExec_explodeNode", _wrap_DFGExec_explodeNode, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getPresetName", _wrap_DFGExec_getPresetName, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getPresetGUID", _wrap_DFGExec_getPresetGUID, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setPresetGUID", _wrap_DFGExec_setPresetGUID, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getOrigPresetGUID", _wrap_DFGExec_getOrigPresetGUID, METH_VARARGS, NULL},
	 { (char *)"DFGExec_editWouldSplitFromPreset", _wrap_DFGExec_editWouldSplitFromPreset, METH_VARARGS, NULL},
	 { (char *)"DFGExec_maybeSplitFromPreset", _wrap_DFGExec_maybeSplitFromPreset, METH_VARARGS, NULL},
	 { (char *)"DFGExec_exportNodesJSON", _wrap_DFGExec_exportNodesJSON, METH_VARARGS, NULL},
	 { (char *)"DFGExec_bind", _wrap_DFGExec_bind, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getPortDefaultValue", _wrap_DFGExec_getPortDefaultValue, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getInstPortResolvedDefaultValue", _wrap_DFGExec_getInstPortResolvedDefaultValue, METH_VARARGS, NULL},
	 { (char *)"DFGExec_setPortDefaultValue", _wrap_DFGExec_setPortDefaultValue, METH_VARARGS, NULL},
	 { (char *)"DFGExec_getDebugNodePortValue", _wrap_DFGExec_getDebugNodePortValue, METH_VARARGS, NULL},
	 { (char *)"DFGExec_createView", _wrap_DFGExec_createView, METH_VARARGS, NULL},
	 { (char *)"DFGExec_swigregister", DFGExec_swigregister, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_getFECDFGBindingRef", _wrap_DFGBinding_getFECDFGBindingRef, METH_VARARGS, NULL},
	 { (char *)"new_DFGBinding", _wrap_new_DFGBinding, METH_VARARGS, NULL},
	 { (char *)"delete_DFGBinding", _wrap_delete_DFGBinding, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_getBindingID", _wrap_DFGBinding_getBindingID, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_getHost", _wrap_DFGBinding_getHost, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_getExec", _wrap_DFGBinding_getExec, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_setArgValue_lockType", _wrap_DFGBinding_setArgValue_lockType, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_execute_lockType", _wrap_DFGBinding_execute_lockType, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_execute", _wrap_DFGBinding_execute, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_exportJSON", _wrap_DFGBinding_exportJSON, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_deallocValues", _wrap_DFGBinding_deallocValues, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_getMetadata", _wrap_DFGBinding_getMetadata, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_setMetadata", _wrap_DFGBinding_setMetadata, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_getVars", _wrap_DFGBinding_getVars, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_getVersion", _wrap_DFGBinding_getVersion, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_getArgValue", _wrap_DFGBinding_getArgValue, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_setArgValue", _wrap_DFGBinding_setArgValue, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_setNotificationCallback", _wrap_DFGBinding_setNotificationCallback, METH_VARARGS, NULL},
	 { (char *)"DFGBinding_swigregister", DFGBinding_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Context", _wrap_new_Context, METH_VARARGS, NULL},
	 { (char *)"Context_getFECContextRef", _wrap_Context_getFECContextRef, METH_VARARGS, NULL},
	 { (char *)"Context_getHost", _wrap_Context_getHost, METH_VARARGS, NULL},
	 { (char *)"delete_Context", _wrap_delete_Context, METH_VARARGS, NULL},
	 { (char *)"Context_swigregister", Context_swigregister, METH_VARARGS, NULL},
	 { (char *)"DFGHost_getFECDFGHostRef", _wrap_DFGHost_getFECDFGHostRef, METH_VARARGS, NULL},
	 { (char *)"new_DFGHost", _wrap_new_DFGHost, METH_VARARGS, NULL},
	 { (char *)"delete_DFGHost", _wrap_delete_DFGHost, METH_VARARGS, NULL},
	 { (char *)"DFGHost_getContext", _wrap_DFGHost_getContext, METH_VARARGS, NULL},
	 { (char *)"DFGHost_maybeUndo", _wrap_DFGHost_maybeUndo, METH_VARARGS, NULL},
	 { (char *)"DFGHost_maybeRedo", _wrap_DFGHost_maybeRedo, METH_VARARGS, NULL},
	 { (char *)"DFGHost_flushUndoRedo", _wrap_DFGHost_flushUndoRedo, METH_VARARGS, NULL},
	 { (char *)"DFGHost_getPresetImportPathname", _wrap_DFGHost_getPresetImportPathname, METH_VARARGS, NULL},
	 { (char *)"DFGHost_getPresetDesc", _wrap_DFGHost_getPresetDesc, METH_VARARGS, NULL},
	 { (char *)"DFGHost_addPresetDir", _wrap_DFGHost_addPresetDir, METH_VARARGS, NULL},
	 { (char *)"DFGHost_importPresetFileJSON", _wrap_DFGHost_importPresetFileJSON, METH_VARARGS, NULL},
	 { (char *)"DFGHost_exportPresetJSON", _wrap_DFGHost_exportPresetJSON, METH_VARARGS, NULL},
	 { (char *)"DFGHost_removePreset", _wrap_DFGHost_removePreset, METH_VARARGS, NULL},
	 { (char *)"DFGHost_createNewUnboundGraph", _wrap_DFGHost_createNewUnboundGraph, METH_VARARGS, NULL},
	 { (char *)"DFGHost_createNewUnboundExecFromJSON", _wrap_DFGHost_createNewUnboundExecFromJSON, METH_VARARGS, NULL},
	 { (char *)"DFGHost_createNewUnboundFunc", _wrap_DFGHost_createNewUnboundFunc, METH_VARARGS, NULL},
	 { (char *)"DFGHost_createBindingToNewGraph", _wrap_DFGHost_createBindingToNewGraph, METH_VARARGS, NULL},
	 { (char *)"DFGHost_createBindingToNewFunc", _wrap_DFGHost_createBindingToNewFunc, METH_VARARGS, NULL},
	 { (char *)"DFGHost_createBindingFromJSON", _wrap_DFGHost_createBindingFromJSON, METH_VARARGS, NULL},
	 { (char *)"DFGHost_getBindingForID", _wrap_DFGHost_getBindingForID, METH_VARARGS, NULL},
	 { (char *)"DFGHost_blockComps", _wrap_DFGHost_blockComps, METH_VARARGS, NULL},
	 { (char *)"DFGHost_unblockComps", _wrap_DFGHost_unblockComps, METH_VARARGS, NULL},
	 { (char *)"DFGHost_createBindingToPreset", _wrap_DFGHost_createBindingToPreset, METH_VARARGS, NULL},
	 { (char *)"DFGHost_createBindingToExecutableFromJSON", _wrap_DFGHost_createBindingToExecutableFromJSON, METH_VARARGS, NULL},
	 { (char *)"DFGHost_swigregister", DFGHost_swigregister, METH_VARARGS, NULL},
	 { (char *)"Client_getFECClientRef", _wrap_Client_getFECClientRef, METH_VARARGS, NULL},
	 { (char *)"new_Client", _wrap_new_Client, METH_VARARGS, NULL},
	 { (char *)"Client_getContext", _wrap_Client_getContext, METH_VARARGS, NULL},
	 { (char *)"Client_setReportCallback", _wrap_Client_setReportCallback, METH_VARARGS, NULL},
	 { (char *)"Client_getReportSourceMask", _wrap_Client_getReportSourceMask, METH_VARARGS, NULL},
	 { (char *)"Client_getReportLevelMax", _wrap_Client_getReportLevelMax, METH_VARARGS, NULL},
	 { (char *)"Client_setReportSourceMask", _wrap_Client_setReportSourceMask, METH_VARARGS, NULL},
	 { (char *)"Client_setReportLevelMax", _wrap_Client_setReportLevelMax, METH_VARARGS, NULL},
	 { (char *)"Client_disableRuntimeLogging", _wrap_Client_disableRuntimeLogging, METH_VARARGS, NULL},
	 { (char *)"Client_enableRuntimeLogging", _wrap_Client_enableRuntimeLogging, METH_VARARGS, NULL},
	 { (char *)"Client_getContextID", _wrap_Client_getContextID, METH_VARARGS, NULL},
	 { (char *)"Client_getMemoryUsage_Variant", _wrap_Client_getMemoryUsage_Variant, METH_VARARGS, NULL},
	 { (char *)"Client_startInstrumentation", _wrap_Client_startInstrumentation, METH_VARARGS, NULL},
	 { (char *)"Client_stopInstrumentation_Variant", _wrap_Client_stopInstrumentation_Variant, METH_VARARGS, NULL},
	 { (char *)"Client_setLogWarnings", _wrap_Client_setLogWarnings, METH_VARARGS, NULL},
	 { (char *)"Client_loadExtension", _wrap_Client_loadExtension, METH_VARARGS, NULL},
	 { (char *)"Client_exportExtension", _wrap_Client_exportExtension, METH_VARARGS, NULL},
	 { (char *)"Client_getStatusUserdata", _wrap_Client_getStatusUserdata, METH_VARARGS, NULL},
	 { (char *)"Client_setSlowOperationCallback", _wrap_Client_setSlowOperationCallback, METH_VARARGS, NULL},
	 { (char *)"Client_queueStatusMessage", _wrap_Client_queueStatusMessage, METH_VARARGS, NULL},
	 { (char *)"Client_enableBackgroundTasks", _wrap_Client_enableBackgroundTasks, METH_VARARGS, NULL},
	 { (char *)"Client_isBackgroundOptimizationInProgress", _wrap_Client_isBackgroundOptimizationInProgress, METH_VARARGS, NULL},
	 { (char *)"Client_adoptCurrentGLContext", _wrap_Client_adoptCurrentGLContext, METH_VARARGS, NULL},
	 { (char *)"Client_idle", _wrap_Client_idle, METH_VARARGS, NULL},
	 { (char *)"Client_supportsGPUCompute", _wrap_Client_supportsGPUCompute, METH_VARARGS, NULL},
	 { (char *)"Client_getDFGHost", _wrap_Client_getDFGHost, METH_VARARGS, NULL},
	 { (char *)"Client_validateLicense", _wrap_Client_validateLicense, METH_VARARGS, NULL},
	 { (char *)"Client_hasCommercialLicense", _wrap_Client_hasCommercialLicense, METH_VARARGS, NULL},
	 { (char *)"Client_computeMD5", _wrap_Client_computeMD5, METH_VARARGS, NULL},
	 { (char *)"Client_Create", _wrap_Client_Create, METH_VARARGS, NULL},
	 { (char *)"Client_setStatusCallback", _wrap_Client_setStatusCallback, METH_VARARGS, NULL},
	 { (char *)"delete_Client", _wrap_delete_Client, METH_VARARGS, NULL},
	 { (char *)"Client_swigregister", Client_swigregister, METH_VARARGS, NULL},
	 { (char *)"SetStandaloneLicense", _wrap_SetStandaloneLicense, METH_VARARGS, NULL},
	 { (char *)"GetRegisteredTypes_Variant", _wrap_GetRegisteredTypes_Variant, METH_VARARGS, NULL},
	 { (char *)"GetAggregateMemberInfo_Variant", _wrap_GetAggregateMemberInfo_Variant, METH_VARARGS, NULL},
	 { (char *)"GetRegisteredTypeSize", _wrap_GetRegisteredTypeSize, METH_VARARGS, NULL},
	 { (char *)"GetRegisteredTypeIsShallow", _wrap_GetRegisteredTypeIsShallow, METH_VARARGS, NULL},
	 { (char *)"GetRegisteredTypeIsStruct", _wrap_GetRegisteredTypeIsStruct, METH_VARARGS, NULL},
	 { (char *)"GetRegisteredTypeIsObject", _wrap_GetRegisteredTypeIsObject, METH_VARARGS, NULL},
	 { (char *)"GetRegisteredTypeIsInterface", _wrap_GetRegisteredTypeIsInterface, METH_VARARGS, NULL},
	 { (char *)"GetRegisteredTypeExtName", _wrap_GetRegisteredTypeExtName, METH_VARARGS, NULL},
	 { (char *)"new_RTVal", _wrap_new_RTVal, METH_VARARGS, NULL},
	 { (char *)"RTVal_getFECRTValRef", _wrap_RTVal_getFECRTValRef, METH_VARARGS, NULL},
	 { (char *)"RTVal_takeRTValFECRef", _wrap_RTVal_takeRTValFECRef, METH_VARARGS, NULL},
	 { (char *)"RTVal_assign", _wrap_RTVal_assign, METH_VARARGS, NULL},
	 { (char *)"RTVal_Construct", _wrap_RTVal_Construct, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructBoolean", _wrap_RTVal_ConstructBoolean, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructSInt8", _wrap_RTVal_ConstructSInt8, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructSInt16", _wrap_RTVal_ConstructSInt16, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructSInt32", _wrap_RTVal_ConstructSInt32, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructSInt64", _wrap_RTVal_ConstructSInt64, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructUInt8", _wrap_RTVal_ConstructUInt8, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructUInt16", _wrap_RTVal_ConstructUInt16, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructUInt32", _wrap_RTVal_ConstructUInt32, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructUInt64", _wrap_RTVal_ConstructUInt64, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructFloat32", _wrap_RTVal_ConstructFloat32, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructFloat64", _wrap_RTVal_ConstructFloat64, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructString", _wrap_RTVal_ConstructString, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructData", _wrap_RTVal_ConstructData, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructFixedArray", _wrap_RTVal_ConstructFixedArray, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructVariableArray", _wrap_RTVal_ConstructVariableArray, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructExternalArray", _wrap_RTVal_ConstructExternalArray, METH_VARARGS, NULL},
	 { (char *)"RTVal_ConstructDict", _wrap_RTVal_ConstructDict, METH_VARARGS, NULL},
	 { (char *)"RTVal_Create", _wrap_RTVal_Create, METH_VARARGS, NULL},
	 { (char *)"RTVal_getBoolean", _wrap_RTVal_getBoolean, METH_VARARGS, NULL},
	 { (char *)"RTVal_getUInt8", _wrap_RTVal_getUInt8, METH_VARARGS, NULL},
	 { (char *)"RTVal_getUInt16", _wrap_RTVal_getUInt16, METH_VARARGS, NULL},
	 { (char *)"RTVal_getUInt32", _wrap_RTVal_getUInt32, METH_VARARGS, NULL},
	 { (char *)"RTVal_getUInt64", _wrap_RTVal_getUInt64, METH_VARARGS, NULL},
	 { (char *)"RTVal_getSInt8", _wrap_RTVal_getSInt8, METH_VARARGS, NULL},
	 { (char *)"RTVal_getSInt16", _wrap_RTVal_getSInt16, METH_VARARGS, NULL},
	 { (char *)"RTVal_getSInt32", _wrap_RTVal_getSInt32, METH_VARARGS, NULL},
	 { (char *)"RTVal_getSInt64", _wrap_RTVal_getSInt64, METH_VARARGS, NULL},
	 { (char *)"RTVal_getFloat32", _wrap_RTVal_getFloat32, METH_VARARGS, NULL},
	 { (char *)"RTVal_setFloat32", _wrap_RTVal_setFloat32, METH_VARARGS, NULL},
	 { (char *)"RTVal_getFloat64", _wrap_RTVal_getFloat64, METH_VARARGS, NULL},
	 { (char *)"RTVal_getStringCString", _wrap_RTVal_getStringCString, METH_VARARGS, NULL},
	 { (char *)"RTVal_getStringLength", _wrap_RTVal_getStringLength, METH_VARARGS, NULL},
	 { (char *)"RTVal_getData", _wrap_RTVal_getData, METH_VARARGS, NULL},
	 { (char *)"RTVal_setData", _wrap_RTVal_setData, METH_VARARGS, NULL},
	 { (char *)"RTVal_maybeGetSimpleData", _wrap_RTVal_maybeGetSimpleData, METH_VARARGS, NULL},
	 { (char *)"RTVal_isNullObject", _wrap_RTVal_isNullObject, METH_VARARGS, NULL},
	 { (char *)"RTVal_isArray", _wrap_RTVal_isArray, METH_VARARGS, NULL},
	 { (char *)"RTVal_isDict", _wrap_RTVal_isDict, METH_VARARGS, NULL},
	 { (char *)"RTVal_isStruct", _wrap_RTVal_isStruct, METH_VARARGS, NULL},
	 { (char *)"RTVal_isObject", _wrap_RTVal_isObject, METH_VARARGS, NULL},
	 { (char *)"RTVal_isData", _wrap_RTVal_isData, METH_VARARGS, NULL},
	 { (char *)"RTVal_isInterface", _wrap_RTVal_isInterface, METH_VARARGS, NULL},
	 { (char *)"RTVal_getArraySize", _wrap_RTVal_getArraySize, METH_VARARGS, NULL},
	 { (char *)"RTVal_setArraySize", _wrap_RTVal_setArraySize, METH_VARARGS, NULL},
	 { (char *)"RTVal_getArrayElement", _wrap_RTVal_getArrayElement, METH_VARARGS, NULL},
	 { (char *)"RTVal_getArrayElementRef", _wrap_RTVal_getArrayElementRef, METH_VARARGS, NULL},
	 { (char *)"RTVal_setArrayElement", _wrap_RTVal_setArrayElement, METH_VARARGS, NULL},
	 { (char *)"RTVal_getDictSize", _wrap_RTVal_getDictSize, METH_VARARGS, NULL},
	 { (char *)"RTVal_getDictKeys", _wrap_RTVal_getDictKeys, METH_VARARGS, NULL},
	 { (char *)"RTVal_getDictElement", _wrap_RTVal_getDictElement, METH_VARARGS, NULL},
	 { (char *)"RTVal_setDictElement", _wrap_RTVal_setDictElement, METH_VARARGS, NULL},
	 { (char *)"RTVal_maybeGetMember", _wrap_RTVal_maybeGetMember, METH_VARARGS, NULL},
	 { (char *)"RTVal_maybeGetMemberRef", _wrap_RTVal_maybeGetMemberRef, METH_VARARGS, NULL},
	 { (char *)"RTVal_setMember", _wrap_RTVal_setMember, METH_VARARGS, NULL},
	 { (char *)"RTVal_callMethod", _wrap_RTVal_callMethod, METH_VARARGS, NULL},
	 { (char *)"RTVal_copy", _wrap_RTVal_copy, METH_VARARGS, NULL},
	 { (char *)"RTVal_clone", _wrap_RTVal_clone, METH_VARARGS, NULL},
	 { (char *)"RTVal_getDesc", _wrap_RTVal_getDesc, METH_VARARGS, NULL},
	 { (char *)"RTVal_getTypeName", _wrap_RTVal_getTypeName, METH_VARARGS, NULL},
	 { (char *)"RTVal_getTypeNameCStr", _wrap_RTVal_getTypeNameCStr, METH_VARARGS, NULL},
	 { (char *)"RTVal_getJSON", _wrap_RTVal_getJSON, METH_VARARGS, NULL},
	 { (char *)"RTVal_setJSON", _wrap_RTVal_setJSON, METH_VARARGS, NULL},
	 { (char *)"RTVal_isExEQTo", _wrap_RTVal_isExEQTo, METH_VARARGS, NULL},
	 { (char *)"RTVal_hasType", _wrap_RTVal_hasType, METH_VARARGS, NULL},
	 { (char *)"delete_RTVal", _wrap_delete_RTVal, METH_VARARGS, NULL},
	 { (char *)"RTVal_swigregister", RTVal_swigregister, METH_VARARGS, NULL},
	 { (char *)"ConstructRTValFromJSON", _wrap_ConstructRTValFromJSON, METH_VARARGS, NULL},
	 { (char *)"new_KLTokenStream", _wrap_new_KLTokenStream, METH_VARARGS, NULL},
	 { (char *)"KLTokenStream_getFECTokenStreamRef", _wrap_KLTokenStream_getFECTokenStreamRef, METH_VARARGS, NULL},
	 { (char *)"KLTokenStream_Create", _wrap_KLTokenStream_Create, METH_VARARGS, NULL},
	 { (char *)"KLTokenStream_getNext", _wrap_KLTokenStream_getNext, METH_VARARGS, NULL},
	 { (char *)"delete_KLTokenStream", _wrap_delete_KLTokenStream, METH_VARARGS, NULL},
	 { (char *)"KLTokenStream_swigregister", KLTokenStream_swigregister, METH_VARARGS, NULL},
	 { (char *)"RegisterKLExtension", _wrap_RegisterKLExtension, METH_VARARGS, NULL},
	 { (char *)"new_DGCompiledObject", _wrap_new_DGCompiledObject, METH_VARARGS, NULL},
	 { (char *)"DGCompiledObject_getContext", _wrap_DGCompiledObject_getContext, METH_VARARGS, NULL},
	 { (char *)"DGCompiledObject_getErrors_Variant", _wrap_DGCompiledObject_getErrors_Variant, METH_VARARGS, NULL},
	 { (char *)"delete_DGCompiledObject", _wrap_delete_DGCompiledObject, METH_VARARGS, NULL},
	 { (char *)"DGCompiledObject_swigregister", DGCompiledObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DGBinding", _wrap_new_DGBinding, METH_VARARGS, NULL},
	 { (char *)"DGBinding_setOperator", _wrap_DGBinding_setOperator, METH_VARARGS, NULL},
	 { (char *)"DGBinding_getOperator_needswrap", _wrap_DGBinding_getOperator_needswrap, METH_VARARGS, NULL},
	 { (char *)"DGBinding_setParameterLayout", _wrap_DGBinding_setParameterLayout, METH_VARARGS, NULL},
	 { (char *)"DGBinding_getParameterLayout_Variant", _wrap_DGBinding_getParameterLayout_Variant, METH_VARARGS, NULL},
	 { (char *)"delete_DGBinding", _wrap_delete_DGBinding, METH_VARARGS, NULL},
	 { (char *)"DGBinding_swigregister", DGBinding_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DGBindingList", _wrap_new_DGBindingList, METH_VARARGS, NULL},
	 { (char *)"DGBindingList_append", _wrap_DGBindingList_append, METH_VARARGS, NULL},
	 { (char *)"DGBindingList_insert", _wrap_DGBindingList_insert, METH_VARARGS, NULL},
	 { (char *)"DGBindingList_remove", _wrap_DGBindingList_remove, METH_VARARGS, NULL},
	 { (char *)"DGBindingList_getBinding_needswrap", _wrap_DGBindingList_getBinding_needswrap, METH_VARARGS, NULL},
	 { (char *)"DGBindingList_getCount", _wrap_DGBindingList_getCount, METH_VARARGS, NULL},
	 { (char *)"delete_DGBindingList", _wrap_delete_DGBindingList, METH_VARARGS, NULL},
	 { (char *)"DGBindingList_swigregister", DGBindingList_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DGNamedObject", _wrap_new_DGNamedObject, METH_VARARGS, NULL},
	 { (char *)"DGNamedObject_destroy", _wrap_DGNamedObject_destroy, METH_VARARGS, NULL},
	 { (char *)"DGNamedObject_getName", _wrap_DGNamedObject_getName, METH_VARARGS, NULL},
	 { (char *)"DGNamedObject_getName_stl", _wrap_DGNamedObject_getName_stl, METH_VARARGS, NULL},
	 { (char *)"delete_DGNamedObject", _wrap_delete_DGNamedObject, METH_VARARGS, NULL},
	 { (char *)"DGNamedObject_swigregister", DGNamedObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DGContainer", _wrap_new_DGContainer, METH_VARARGS, NULL},
	 { (char *)"DGContainer_addMember_nodefault", _wrap_DGContainer_addMember_nodefault, METH_VARARGS, NULL},
	 { (char *)"DGContainer_addMember_Variant", _wrap_DGContainer_addMember_Variant, METH_VARARGS, NULL},
	 { (char *)"DGContainer_removeMember", _wrap_DGContainer_removeMember, METH_VARARGS, NULL},
	 { (char *)"DGContainer_getMembers_Variant", _wrap_DGContainer_getMembers_Variant, METH_VARARGS, NULL},
	 { (char *)"DGContainer_getMemberType", _wrap_DGContainer_getMemberType, METH_VARARGS, NULL},
	 { (char *)"DGContainer_getMemberSize", _wrap_DGContainer_getMemberSize, METH_VARARGS, NULL},
	 { (char *)"DGContainer_getMemberIsShallow", _wrap_DGContainer_getMemberIsShallow, METH_VARARGS, NULL},
	 { (char *)"DGContainer_getMemberDefaultData_Variant", _wrap_DGContainer_getMemberDefaultData_Variant, METH_VARARGS, NULL},
	 { (char *)"DGContainer_size", _wrap_DGContainer_size, METH_VARARGS, NULL},
	 { (char *)"DGContainer_resize", _wrap_DGContainer_resize, METH_VARARGS, NULL},
	 { (char *)"DGContainer_getMemberSliceData", _wrap_DGContainer_getMemberSliceData, METH_VARARGS, NULL},
	 { (char *)"DGContainer_getMemberSliceArraySize", _wrap_DGContainer_getMemberSliceArraySize, METH_VARARGS, NULL},
	 { (char *)"DGContainer_getMemberSliceArrayData", _wrap_DGContainer_getMemberSliceArrayData, METH_VARARGS, NULL},
	 { (char *)"DGContainer_setMemberSliceData", _wrap_DGContainer_setMemberSliceData, METH_VARARGS, NULL},
	 { (char *)"DGContainer_setMemberSliceArraySize", _wrap_DGContainer_setMemberSliceArraySize, METH_VARARGS, NULL},
	 { (char *)"DGContainer_setMemberSliceArrayData", _wrap_DGContainer_setMemberSliceArrayData, METH_VARARGS, NULL},
	 { (char *)"DGContainer_getMemberAllSlicesData", _wrap_DGContainer_getMemberAllSlicesData, METH_VARARGS, NULL},
	 { (char *)"DGContainer_setMemberAllSlicesData", _wrap_DGContainer_setMemberAllSlicesData, METH_VARARGS, NULL},
	 { (char *)"DGContainer_getMemberSliceData_Float32", _wrap_DGContainer_getMemberSliceData_Float32, METH_VARARGS, NULL},
	 { (char *)"DGContainer_setMemberSliceData_Float32", _wrap_DGContainer_setMemberSliceData_Float32, METH_VARARGS, NULL},
	 { (char *)"DGContainer_getMemberSliceData_Variant", _wrap_DGContainer_getMemberSliceData_Variant, METH_VARARGS, NULL},
	 { (char *)"DGContainer_setMemberSliceData_Variant", _wrap_DGContainer_setMemberSliceData_Variant, METH_VARARGS, NULL},
	 { (char *)"DGContainer_setSliceData_Variant", _wrap_DGContainer_setSliceData_Variant, METH_VARARGS, NULL},
	 { (char *)"DGContainer_getMemberSliceValue", _wrap_DGContainer_getMemberSliceValue, METH_VARARGS, NULL},
	 { (char *)"DGContainer_setMemberSliceValue", _wrap_DGContainer_setMemberSliceValue, METH_VARARGS, NULL},
	 { (char *)"DGContainer_getJSONStringValue", _wrap_DGContainer_getJSONStringValue, METH_VARARGS, NULL},
	 { (char *)"DGContainer_setJSONStringValue", _wrap_DGContainer_setJSONStringValue, METH_VARARGS, NULL},
	 { (char *)"delete_DGContainer", _wrap_delete_DGContainer, METH_VARARGS, NULL},
	 { (char *)"DGContainer_swigregister", DGContainer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DGNode", _wrap_new_DGNode, METH_VARARGS, NULL},
	 { (char *)"DGNode_evaluate_lockType", _wrap_DGNode_evaluate_lockType, METH_VARARGS, NULL},
	 { (char *)"DGNode_evaluate", _wrap_DGNode_evaluate, METH_VARARGS, NULL},
	 { (char *)"DGNode_evaluate_noLock", _wrap_DGNode_evaluate_noLock, METH_VARARGS, NULL},
	 { (char *)"DGNode_setDependency_real", _wrap_DGNode_setDependency_real, METH_VARARGS, NULL},
	 { (char *)"DGNode_removeDependency", _wrap_DGNode_removeDependency, METH_VARARGS, NULL},
	 { (char *)"DGNode_appendBinding", _wrap_DGNode_appendBinding, METH_VARARGS, NULL},
	 { (char *)"DGNode_getBindingList_needswrap", _wrap_DGNode_getBindingList_needswrap, METH_VARARGS, NULL},
	 { (char *)"DGNode_getDependencies_Variant", _wrap_DGNode_getDependencies_Variant, METH_VARARGS, NULL},
	 { (char *)"DGNode_getDependency", _wrap_DGNode_getDependency, METH_VARARGS, NULL},
	 { (char *)"DGNode_setDirty", _wrap_DGNode_setDirty, METH_VARARGS, NULL},
	 { (char *)"DGNode_GetByName", _wrap_DGNode_GetByName, METH_VARARGS, NULL},
	 { (char *)"delete_DGNode", _wrap_delete_DGNode, METH_VARARGS, NULL},
	 { (char *)"DGNode_swigregister", DGNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DGOperator", _wrap_new_DGOperator, METH_VARARGS, NULL},
	 { (char *)"DGOperator_setFilename", _wrap_DGOperator_setFilename, METH_VARARGS, NULL},
	 { (char *)"DGOperator_getFilename", _wrap_DGOperator_getFilename, METH_VARARGS, NULL},
	 { (char *)"DGOperator_setSourceCode", _wrap_DGOperator_setSourceCode, METH_VARARGS, NULL},
	 { (char *)"DGOperator_getSourceCode", _wrap_DGOperator_getSourceCode, METH_VARARGS, NULL},
	 { (char *)"DGOperator_setEntryPoint", _wrap_DGOperator_setEntryPoint, METH_VARARGS, NULL},
	 { (char *)"DGOperator_getEntryPoint", _wrap_DGOperator_getEntryPoint, METH_VARARGS, NULL},
	 { (char *)"DGOperator_setMainThreadOnly", _wrap_DGOperator_setMainThreadOnly, METH_VARARGS, NULL},
	 { (char *)"DGOperator_getMainThreadOnly", _wrap_DGOperator_getMainThreadOnly, METH_VARARGS, NULL},
	 { (char *)"DGOperator_getDiagnostics_Variant", _wrap_DGOperator_getDiagnostics_Variant, METH_VARARGS, NULL},
	 { (char *)"DGOperator_exportKL", _wrap_DGOperator_exportKL, METH_VARARGS, NULL},
	 { (char *)"DGOperator_importKL", _wrap_DGOperator_importKL, METH_VARARGS, NULL},
	 { (char *)"DGOperator_GetByName", _wrap_DGOperator_GetByName, METH_VARARGS, NULL},
	 { (char *)"delete_DGOperator", _wrap_delete_DGOperator, METH_VARARGS, NULL},
	 { (char *)"DGOperator_swigregister", DGOperator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DGEventHandler", _wrap_new_DGEventHandler, METH_VARARGS, NULL},
	 { (char *)"DGEventHandler_appendChildEventHandler", _wrap_DGEventHandler_appendChildEventHandler, METH_VARARGS, NULL},
	 { (char *)"DGEventHandler_removeChildEventHandler", _wrap_DGEventHandler_removeChildEventHandler, METH_VARARGS, NULL},
	 { (char *)"DGEventHandler_appendPreDescendBinding", _wrap_DGEventHandler_appendPreDescendBinding, METH_VARARGS, NULL},
	 { (char *)"DGEventHandler_getPreDescendBindingList_needswrap", _wrap_DGEventHandler_getPreDescendBindingList_needswrap, METH_VARARGS, NULL},
	 { (char *)"DGEventHandler_appendPostDescendBinding", _wrap_DGEventHandler_appendPostDescendBinding, METH_VARARGS, NULL},
	 { (char *)"DGEventHandler_getPostDescendBindingList_needswrap", _wrap_DGEventHandler_getPostDescendBindingList_needswrap, METH_VARARGS, NULL},
	 { (char *)"DGEventHandler_setScope", _wrap_DGEventHandler_setScope, METH_VARARGS, NULL},
	 { (char *)"DGEventHandler_setScopeName", _wrap_DGEventHandler_setScopeName, METH_VARARGS, NULL},
	 { (char *)"DGEventHandler_getScopeName", _wrap_DGEventHandler_getScopeName, METH_VARARGS, NULL},
	 { (char *)"DGEventHandler_setSelector", _wrap_DGEventHandler_setSelector, METH_VARARGS, NULL},
	 { (char *)"DGEventHandler_GetByName", _wrap_DGEventHandler_GetByName, METH_VARARGS, NULL},
	 { (char *)"DGEventHandler_getChildEventHandlers_Variant", _wrap_DGEventHandler_getChildEventHandlers_Variant, METH_VARARGS, NULL},
	 { (char *)"DGEventHandler_getScopes_Variant", _wrap_DGEventHandler_getScopes_Variant, METH_VARARGS, NULL},
	 { (char *)"DGEventHandler_removeScope", _wrap_DGEventHandler_removeScope, METH_VARARGS, NULL},
	 { (char *)"delete_DGEventHandler", _wrap_delete_DGEventHandler, METH_VARARGS, NULL},
	 { (char *)"DGEventHandler_swigregister", DGEventHandler_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DGEvent", _wrap_new_DGEvent, METH_VARARGS, NULL},
	 { (char *)"DGEvent_removeEventHandler", _wrap_DGEvent_removeEventHandler, METH_VARARGS, NULL},
	 { (char *)"DGEvent_appendEventHandler", _wrap_DGEvent_appendEventHandler, METH_VARARGS, NULL},
	 { (char *)"DGEvent_fire", _wrap_DGEvent_fire, METH_VARARGS, NULL},
	 { (char *)"DGEvent_setSelectType", _wrap_DGEvent_setSelectType, METH_VARARGS, NULL},
	 { (char *)"DGEvent_getSelectType", _wrap_DGEvent_getSelectType, METH_VARARGS, NULL},
	 { (char *)"DGEvent_select_Variant", _wrap_DGEvent_select_Variant, METH_VARARGS, NULL},
	 { (char *)"DGEvent_getEventHandlers_Variant", _wrap_DGEvent_getEventHandlers_Variant, METH_VARARGS, NULL},
	 { (char *)"DGEvent_GetByName", _wrap_DGEvent_GetByName, METH_VARARGS, NULL},
	 { (char *)"delete_DGEvent", _wrap_delete_DGEvent, METH_VARARGS, NULL},
	 { (char *)"DGEvent_swigregister", DGEvent_swigregister, METH_VARARGS, NULL},
	 { (char *)"GetKLJSONAST", _wrap_GetKLJSONAST, METH_VARARGS, NULL},
	 { (char *)"GetFabricDir", _wrap_GetFabricDir, METH_VARARGS, NULL},
	 { (char *)"PyObjectToVariant", _wrap_PyObjectToVariant, METH_VARARGS, NULL},
	 { (char *)"VariantToPyObject", _wrap_VariantToPyObject, METH_VARARGS, NULL},
	 { (char *)"RTValToPyObject", _wrap_RTValToPyObject, METH_VARARGS, NULL},
	 { (char *)"RTValToPyObject_DFGHost", _wrap_RTValToPyObject_DFGHost, METH_VARARGS, NULL},
	 { (char *)"RTValToPyObject_DFGExec", _wrap_RTValToPyObject_DFGExec, METH_VARARGS, NULL},
	 { (char *)"RTValToPyObject_DFGBinding", _wrap_RTValToPyObject_DFGBinding, METH_VARARGS, NULL},
	 { (char *)"PyObjectToRTVal", _wrap_PyObjectToRTVal, METH_VARARGS, NULL},
	 { (char *)"PyObjectToRTVal_DFGHost", _wrap_PyObjectToRTVal_DFGHost, METH_VARARGS, NULL},
	 { (char *)"PyObjectToRTVal_DFGExec", _wrap_PyObjectToRTVal_DFGExec, METH_VARARGS, NULL},
	 { (char *)"PyObjectToRTVal_DFGBinding", _wrap_PyObjectToRTVal_DFGBinding, METH_VARARGS, NULL},
	 { (char *)"PythonSingleStringCallback", _wrap_PythonSingleStringCallback, METH_VARARGS, NULL},
	 { (char *)"PythonReportCallback", _wrap_PythonReportCallback, METH_VARARGS, NULL},
	 { (char *)"PythonStatusCallback", _wrap_PythonStatusCallback, METH_VARARGS, NULL},
	 { (char *)"new_PythonRTValToJSONEncoder", _wrap_new_PythonRTValToJSONEncoder, METH_VARARGS, NULL},
	 { (char *)"delete_PythonRTValToJSONEncoder", _wrap_delete_PythonRTValToJSONEncoder, METH_VARARGS, NULL},
	 { (char *)"PythonRTValToJSONEncoder_swigregister", PythonRTValToJSONEncoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PythonRTValFromJSONDecoder", _wrap_new_PythonRTValFromJSONDecoder, METH_VARARGS, NULL},
	 { (char *)"delete_PythonRTValFromJSONDecoder", _wrap_delete_PythonRTValFromJSONDecoder, METH_VARARGS, NULL},
	 { (char *)"PythonRTValFromJSONDecoder_swigregister", PythonRTValFromJSONDecoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"CreatePyRTTypesObject", _wrap_CreatePyRTTypesObject, METH_VARARGS, NULL},
	 { (char *)"PyRTValObjectToRTValRef", _wrap_PyRTValObjectToRTValRef, METH_VARARGS, NULL},
	 { (char *)"PyStringToCString", _wrap_PyStringToCString, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_FabricCore__DFGHostTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *)  ((FabricCore::DFGHost *) x));
}
static void *_p_FabricCore__DGNamedObjectTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *) (FabricCore::DGCompiledObject *) ((FabricCore::DGNamedObject *) x));
}
static void *_p_FabricCore__DGCompiledObjectTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *)  ((FabricCore::DGCompiledObject *) x));
}
static void *_p_FabricCore__DGBindingTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *) (FabricCore::DGCompiledObject *) ((FabricCore::DGBinding *) x));
}
static void *_p_FabricCore__DFGBindingTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *)  ((FabricCore::DFGBinding *) x));
}
static void *_p_FabricCore__ContextTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *)  ((FabricCore::Context *) x));
}
static void *_p_FabricCore__ClientTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *)  ((FabricCore::Client *) x));
}
static void *_p_FabricCore__DFGExecTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *)  ((FabricCore::DFGExec *) x));
}
static void *_p_FabricCore__KLTokenStreamTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *)  ((FabricCore::KLTokenStream *) x));
}
static void *_p_FabricCore__StringTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *)  ((FabricCore::String *) x));
}
static void *_p_FabricCore__DGEventHandlerTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *) (FabricCore::DGCompiledObject *)(FabricCore::DGNamedObject *)(FabricCore::DGContainer *) ((FabricCore::DGEventHandler *) x));
}
static void *_p_FabricCore__RTValTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *)  ((FabricCore::RTVal *) x));
}
static void *_p_FabricCore__DGContainerTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *) (FabricCore::DGCompiledObject *)(FabricCore::DGNamedObject *) ((FabricCore::DGContainer *) x));
}
static void *_p_FabricCore__DGBindingListTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *) (FabricCore::DGCompiledObject *) ((FabricCore::DGBindingList *) x));
}
static void *_p_FabricCore__DFGViewTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *)  ((FabricCore::DFGView *) x));
}
static void *_p_FabricCore__DGNodeTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *) (FabricCore::DGCompiledObject *)(FabricCore::DGNamedObject *)(FabricCore::DGContainer *) ((FabricCore::DGNode *) x));
}
static void *_p_FabricCore__DGEventTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *) (FabricCore::DGCompiledObject *)(FabricCore::DGNamedObject *)(FabricCore::DGContainer *) ((FabricCore::DGEvent *) x));
}
static void *_p_FabricCore__DGOperatorTo_p_FabricCore__Ref(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::Ref *) (FabricCore::DGCompiledObject *)(FabricCore::DGNamedObject *)(FabricCore::DGContainer *) ((FabricCore::DGOperator *) x));
}
static void *_p_FabricCore__DGNodeTo_p_FabricCore__DGContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGContainer *)  ((FabricCore::DGNode *) x));
}
static void *_p_FabricCore__DGOperatorTo_p_FabricCore__DGContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGContainer *)  ((FabricCore::DGOperator *) x));
}
static void *_p_FabricCore__DGEventHandlerTo_p_FabricCore__DGContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGContainer *)  ((FabricCore::DGEventHandler *) x));
}
static void *_p_FabricCore__DGEventTo_p_FabricCore__DGContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGContainer *)  ((FabricCore::DGEvent *) x));
}
static void *_p_FabricCore__DGNodeTo_p_FabricCore__DGNamedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGNamedObject *) (FabricCore::DGContainer *) ((FabricCore::DGNode *) x));
}
static void *_p_FabricCore__DGOperatorTo_p_FabricCore__DGNamedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGNamedObject *) (FabricCore::DGContainer *) ((FabricCore::DGOperator *) x));
}
static void *_p_FabricCore__DGEventHandlerTo_p_FabricCore__DGNamedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGNamedObject *) (FabricCore::DGContainer *) ((FabricCore::DGEventHandler *) x));
}
static void *_p_FabricCore__DGEventTo_p_FabricCore__DGNamedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGNamedObject *) (FabricCore::DGContainer *) ((FabricCore::DGEvent *) x));
}
static void *_p_FabricCore__DGContainerTo_p_FabricCore__DGNamedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGNamedObject *)  ((FabricCore::DGContainer *) x));
}
static void *_p_FabricCore__DGBindingListTo_p_FabricCore__DGCompiledObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGCompiledObject *)  ((FabricCore::DGBindingList *) x));
}
static void *_p_FabricCore__DGNodeTo_p_FabricCore__DGCompiledObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGCompiledObject *) (FabricCore::DGNamedObject *)(FabricCore::DGContainer *) ((FabricCore::DGNode *) x));
}
static void *_p_FabricCore__DGBindingTo_p_FabricCore__DGCompiledObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGCompiledObject *)  ((FabricCore::DGBinding *) x));
}
static void *_p_FabricCore__DGNamedObjectTo_p_FabricCore__DGCompiledObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGCompiledObject *)  ((FabricCore::DGNamedObject *) x));
}
static void *_p_FabricCore__DGOperatorTo_p_FabricCore__DGCompiledObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGCompiledObject *) (FabricCore::DGNamedObject *)(FabricCore::DGContainer *) ((FabricCore::DGOperator *) x));
}
static void *_p_FabricCore__DGEventHandlerTo_p_FabricCore__DGCompiledObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGCompiledObject *) (FabricCore::DGNamedObject *)(FabricCore::DGContainer *) ((FabricCore::DGEventHandler *) x));
}
static void *_p_FabricCore__DGEventTo_p_FabricCore__DGCompiledObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGCompiledObject *) (FabricCore::DGNamedObject *)(FabricCore::DGContainer *) ((FabricCore::DGEvent *) x));
}
static void *_p_FabricCore__DGContainerTo_p_FabricCore__DGCompiledObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::DGCompiledObject *) (FabricCore::DGNamedObject *) ((FabricCore::DGContainer *) x));
}
static void *_p_PythonRTValFromJSONDecoderTo_p_FabricCore__RTValFromJSONDecoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::RTValFromJSONDecoder *)  ((PythonRTValFromJSONDecoder *) x));
}
static void *_p_PythonRTValToJSONEncoderTo_p_FabricCore__RTValToJSONEncoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FabricCore::RTValToJSONEncoder *)  ((PythonRTValToJSONEncoder *) x));
}
static swig_type_info _swigt__p_FEC_ClientCreateOptions = {"_p_FEC_ClientCreateOptions", "FEC_ClientCreateOptions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FEC_DFGCacheRule = {"_p_FEC_DFGCacheRule", "enum FEC_DFGCacheRule *|FEC_DFGCacheRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FEC_DFGExecType = {"_p_FEC_DFGExecType", "enum FEC_DFGExecType *|FEC_DFGExecType *|FabricCore::DFGExecType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FEC_DFGNodeType = {"_p_FEC_DFGNodeType", "enum FEC_DFGNodeType *|FEC_DFGNodeType *|FabricCore::DFGNodeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FEC_DFGPortType = {"_p_FEC_DFGPortType", "enum FEC_DFGPortType *|FEC_DFGPortType *|FabricCore::DFGPortType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FEC_KLSourceFile = {"_p_FEC_KLSourceFile", "FEC_KLSourceFile *|FabricCore::KLSourceFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FEC_KLTokenType = {"_p_FEC_KLTokenType", "enum FEC_KLTokenType *|FEC_KLTokenType *|FabricCore::KLTokenType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FEC_RTValSimpleData = {"_p_FEC_RTValSimpleData", "FEC_RTValSimpleData *|FabricCore::RTVal::SimpleData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FEC_RTValSimpleData_value = {"_p_FEC_RTValSimpleData_value", "FEC_RTValSimpleData_value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FEC_RTValSimpleData_value_string = {"_p_FEC_RTValSimpleData_value_string", "FEC_RTValSimpleData_value_string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FEC_RTValSimpleType = {"_p_FEC_RTValSimpleType", "enum FEC_RTValSimpleType *|FEC_RTValSimpleType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FEC_Variant = {"_p_FEC_Variant", "FEC_Variant *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FEC_VariantDictIter = {"_p_FEC_VariantDictIter", "FEC_VariantDictIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__Client = {"_p_FabricCore__Client", "FabricCore::Client *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__Context = {"_p_FabricCore__Context", "FabricCore::Context *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__DFGBinding = {"_p_FabricCore__DFGBinding", "FabricCore::DFGBinding *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__DFGExec = {"_p_FabricCore__DFGExec", "FabricCore::DFGExec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__DFGHost = {"_p_FabricCore__DFGHost", "FabricCore::DFGHost *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__DFGView = {"_p_FabricCore__DFGView", "FabricCore::DFGView *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__DGBinding = {"_p_FabricCore__DGBinding", "FabricCore::DGBinding *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__DGBindingList = {"_p_FabricCore__DGBindingList", "FabricCore::DGBindingList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__DGCompiledObject = {"_p_FabricCore__DGCompiledObject", "FabricCore::DGCompiledObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__DGContainer = {"_p_FabricCore__DGContainer", "FabricCore::DGContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__DGEvent = {"_p_FabricCore__DGEvent", "FabricCore::DGEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__DGEventHandler = {"_p_FabricCore__DGEventHandler", "FabricCore::DGEventHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__DGNamedObject = {"_p_FabricCore__DGNamedObject", "FabricCore::DGNamedObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__DGNode = {"_p_FabricCore__DGNode", "FabricCore::DGNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__DGOperator = {"_p_FabricCore__DGOperator", "FabricCore::DGOperator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__Exception = {"_p_FabricCore__Exception", "FabricCore::Exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__KLTokenStream = {"_p_FabricCore__KLTokenStream", "FabricCore::KLTokenStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__RTVal = {"_p_FabricCore__RTVal", "FabricCore::RTVal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__RTValFromJSONDecoder = {"_p_FabricCore__RTValFromJSONDecoder", "FabricCore::RTValFromJSONDecoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__RTValToJSONEncoder = {"_p_FabricCore__RTValToJSONEncoder", "FabricCore::RTValToJSONEncoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__Ref = {"_p_FabricCore__Ref", "FabricCore::Ref *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__String = {"_p_FabricCore__String", "FabricCore::DFGStringResult *|FabricCore::String *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FabricCore__Variant = {"_p_FabricCore__Variant", "FabricCore::Variant *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PythonRTValFromJSONDecoder = {"_p_PythonRTValFromJSONDecoder", "PythonRTValFromJSONDecoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PythonRTValToJSONEncoder = {"_p_PythonRTValToJSONEncoder", "PythonRTValToJSONEncoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ReportCallback = {"_p_ReportCallback", "ReportCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleData = {"_p_SimpleData", "SimpleData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SlowOperationCallback = {"_p_SlowOperationCallback", "SlowOperationCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StatusCallback = {"_p_StatusCallback", "StatusCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p___int64 = {"_p___int64", "__int64 *|LONGLONG *|LONG64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "CHAR *|TCHAR *|char *|CCHAR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_q_const__char_unsigned_int__void = {"_p_f_p_void_p_q_const__char_unsigned_int__void", "void (*)(void *,char const *,unsigned int)|FEC_ClientSlowOperationCallback|FEC_DFGNotificationCallback|FabricCore::DFGNotificationCallback|FabricCore::Client::SlowOperationCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_q_const__char_unsigned_int_p_q_const__char_unsigned_int__void = {"_p_f_p_void_p_q_const__char_unsigned_int_p_q_const__char_unsigned_int__void", "void (*)(void *,char const *,unsigned int,char const *,unsigned int)|FEC_ClientStatusCallback|FabricCore::Client::StatusCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_void_p_void_unsigned_char_p_f_p_void_p_q_const__char_unsigned_int__void_p_void_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char = {"_p_f_p_void_p_void_p_void_unsigned_char_p_f_p_void_p_q_const__char_unsigned_int__void_p_void_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char", "unsigned char (*)(void *,void *,void *,unsigned char,void (*)(void *,char const *,unsigned int),void *,char const *(*)(void *,char const *),void *)|FEC_EncodeRTValToJSONCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_void_p_void_unsigned_char_p_q_const__char_unsigned_int_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char = {"_p_f_p_void_p_void_p_void_unsigned_char_p_q_const__char_unsigned_int_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char", "unsigned char (*)(void *,void *,void *,unsigned char,char const *,unsigned int,char const *(*)(void *,char const *),void *)|FEC_DecodeRTValFromJSONCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_unsigned_char_unsigned_char_p_q_const__char_unsigned_int__void = {"_p_f_p_void_unsigned_char_unsigned_char_p_q_const__char_unsigned_int__void", "void (*)(void *,unsigned char,unsigned char,char const *,unsigned int)|FEC_ClientReportCallback|FabricCore::Client::ReportCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "FLOAT *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "BOOL *|INT32 *|intptr_t *|int *|INT *|int_least32_t *|int_fast32_t *|int32_t *|INT_PTR *|LONG32 *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "SHANDLE_PTR *|LONG_PTR *|LONG *|HRESULT *|long *|SSIZE_T *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "PTCH *|PCTSTR *|LPCTSTR *|LPTCH *|PUTSTR *|LPUTSTR *|PCUTSTR *|LPCUTSTR *|char **|PTSTR *|LPTSTR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_f_p_void_p_q_const__char_unsigned_int__void = {"_p_p_f_p_void_p_q_const__char_unsigned_int__void", "void (**)(void *,char const *,unsigned int)|FabricCore::DFGNotificationCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_long = {"_p_p_unsigned_long", "unsigned long **|PLCID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "FEC_DFGViewRef *|void **|FEC_DGOperatorRef *|FEC_DGContainerRef *|FEC_DGEventHandlerRef *|FEC_ContextRef *|FEC_DGEventRef *|FEC_ClientRef *|FEC_DFGHostRef *|FEC_DGCompiledObjectRef *|FEC_DGNamedObjectRef *|FEC_DGNodeRef *|FEC_DFGExecRef *|FEC_DGBindingListRef *|FEC_RTValRef *|FEC_KLTokenStreamRef *|FEC_StringRef *|FEC_DFGBindingRef *|FEC_DGBindingRef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "HALF_PTR *|short *|SHORT *|int_least16_t *|int16_t *|INT16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed___int64 = {"_p_signed___int64", "INT64 *|signed __int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|INT8 *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned___int64 = {"_p_unsigned___int64", "UINT64 *|DWORD64 *|unsigned __int64 *|DWORDLONG *|ULONGLONG *|ULONG64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "FabricCore::ReportLevel *|FEC_ReportLevel *|FabricCore::ClientOptimizationType *|FEC_ClientOptimizationType *|uint8_t *|UCHAR *|uint_fast8_t *|uint_least8_t *|TBYTE *|BYTE *|FabricCore::RTValCodecResult *|FEC_RTValCodecResult *|FCHAR *|BOOLEAN *|UINT8 *|FEC_ReportSource *|FabricCore::ReportSource *|FabricCore::RTValCodecContext *|FEC_RTValCodecContext *|FEC_LockType *|FEC_ClientLicenseType *|FabricCore::LockType *|FabricCore::ClientLicenseType *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "UINT32 *|DWORD32 *|FEC_VariantType *|uintptr_t *|uint_least32_t *|uint_fast32_t *|UINT *|uint32_t *|unsigned int *|UINT_PTR *|ULONG32 *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "HANDLE_PTR *|DWORD *|ULONG_PTR *|DWORD_PTR *|FLONG *|unsigned long *|ULONG *|SIZE_T *|LCID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "WORD *|UHALF_PTR *|unsigned short *|USHORT *|FSHORT *|uint_least16_t *|LANGID *|uint16_t *|UINT16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "FEC_DGEventHandlerRef|FEC_ContextRef|FEC_DFGViewRef|FEC_StringRef|FEC_DFGBindingRef|FEC_DGBindingRef|FEC_DGNamedObjectRef|FEC_Ref|FEC_RTValRef|FEC_DGNodeRef|FEC_DFGHostRef|FEC_DGOperatorRef|void *|FEC_DFGExecRef|FEC_DGEventRef|FEC_KLTokenStreamRef|FEC_DGBindingListRef|FEC_ClientRef", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FEC_ClientCreateOptions,
  &_swigt__p_FEC_DFGCacheRule,
  &_swigt__p_FEC_DFGExecType,
  &_swigt__p_FEC_DFGNodeType,
  &_swigt__p_FEC_DFGPortType,
  &_swigt__p_FEC_KLSourceFile,
  &_swigt__p_FEC_KLTokenType,
  &_swigt__p_FEC_RTValSimpleData,
  &_swigt__p_FEC_RTValSimpleData_value,
  &_swigt__p_FEC_RTValSimpleData_value_string,
  &_swigt__p_FEC_RTValSimpleType,
  &_swigt__p_FEC_Variant,
  &_swigt__p_FEC_VariantDictIter,
  &_swigt__p_FabricCore__Client,
  &_swigt__p_FabricCore__Context,
  &_swigt__p_FabricCore__DFGBinding,
  &_swigt__p_FabricCore__DFGExec,
  &_swigt__p_FabricCore__DFGHost,
  &_swigt__p_FabricCore__DFGView,
  &_swigt__p_FabricCore__DGBinding,
  &_swigt__p_FabricCore__DGBindingList,
  &_swigt__p_FabricCore__DGCompiledObject,
  &_swigt__p_FabricCore__DGContainer,
  &_swigt__p_FabricCore__DGEvent,
  &_swigt__p_FabricCore__DGEventHandler,
  &_swigt__p_FabricCore__DGNamedObject,
  &_swigt__p_FabricCore__DGNode,
  &_swigt__p_FabricCore__DGOperator,
  &_swigt__p_FabricCore__Exception,
  &_swigt__p_FabricCore__KLTokenStream,
  &_swigt__p_FabricCore__RTVal,
  &_swigt__p_FabricCore__RTValFromJSONDecoder,
  &_swigt__p_FabricCore__RTValToJSONEncoder,
  &_swigt__p_FabricCore__Ref,
  &_swigt__p_FabricCore__String,
  &_swigt__p_FabricCore__Variant,
  &_swigt__p_PythonRTValFromJSONDecoder,
  &_swigt__p_PythonRTValToJSONEncoder,
  &_swigt__p_ReportCallback,
  &_swigt__p_SimpleData,
  &_swigt__p_SlowOperationCallback,
  &_swigt__p_StatusCallback,
  &_swigt__p___int64,
  &_swigt__p_char,
  &_swigt__p_f_p_void_p_q_const__char_unsigned_int__void,
  &_swigt__p_f_p_void_p_q_const__char_unsigned_int_p_q_const__char_unsigned_int__void,
  &_swigt__p_f_p_void_p_void_p_void_unsigned_char_p_f_p_void_p_q_const__char_unsigned_int__void_p_void_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char,
  &_swigt__p_f_p_void_p_void_p_void_unsigned_char_p_q_const__char_unsigned_int_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char,
  &_swigt__p_f_p_void_unsigned_char_unsigned_char_p_q_const__char_unsigned_int__void,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_p_char,
  &_swigt__p_p_f_p_void_p_q_const__char_unsigned_int__void,
  &_swigt__p_p_unsigned_long,
  &_swigt__p_p_void,
  &_swigt__p_short,
  &_swigt__p_signed___int64,
  &_swigt__p_signed_char,
  &_swigt__p_unsigned___int64,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_FEC_ClientCreateOptions[] = {  {&_swigt__p_FEC_ClientCreateOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FEC_DFGCacheRule[] = {  {&_swigt__p_FEC_DFGCacheRule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FEC_DFGExecType[] = {  {&_swigt__p_FEC_DFGExecType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FEC_DFGNodeType[] = {  {&_swigt__p_FEC_DFGNodeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FEC_DFGPortType[] = {  {&_swigt__p_FEC_DFGPortType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FEC_KLSourceFile[] = {  {&_swigt__p_FEC_KLSourceFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FEC_KLTokenType[] = {  {&_swigt__p_FEC_KLTokenType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FEC_RTValSimpleData[] = {  {&_swigt__p_FEC_RTValSimpleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FEC_RTValSimpleData_value[] = {  {&_swigt__p_FEC_RTValSimpleData_value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FEC_RTValSimpleData_value_string[] = {  {&_swigt__p_FEC_RTValSimpleData_value_string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FEC_RTValSimpleType[] = {  {&_swigt__p_FEC_RTValSimpleType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FEC_Variant[] = {  {&_swigt__p_FEC_Variant, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FEC_VariantDictIter[] = {  {&_swigt__p_FEC_VariantDictIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__Client[] = {  {&_swigt__p_FabricCore__Client, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__Context[] = {  {&_swigt__p_FabricCore__Context, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__DFGBinding[] = {  {&_swigt__p_FabricCore__DFGBinding, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__DFGExec[] = {  {&_swigt__p_FabricCore__DFGExec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__DFGHost[] = {  {&_swigt__p_FabricCore__DFGHost, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__DFGView[] = {  {&_swigt__p_FabricCore__DFGView, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__DGBinding[] = {  {&_swigt__p_FabricCore__DGBinding, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__DGBindingList[] = {  {&_swigt__p_FabricCore__DGBindingList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__DGCompiledObject[] = {  {&_swigt__p_FabricCore__DGBindingList, _p_FabricCore__DGBindingListTo_p_FabricCore__DGCompiledObject, 0, 0},  {&_swigt__p_FabricCore__DGNode, _p_FabricCore__DGNodeTo_p_FabricCore__DGCompiledObject, 0, 0},  {&_swigt__p_FabricCore__DGCompiledObject, 0, 0, 0},  {&_swigt__p_FabricCore__DGBinding, _p_FabricCore__DGBindingTo_p_FabricCore__DGCompiledObject, 0, 0},  {&_swigt__p_FabricCore__DGNamedObject, _p_FabricCore__DGNamedObjectTo_p_FabricCore__DGCompiledObject, 0, 0},  {&_swigt__p_FabricCore__DGOperator, _p_FabricCore__DGOperatorTo_p_FabricCore__DGCompiledObject, 0, 0},  {&_swigt__p_FabricCore__DGEventHandler, _p_FabricCore__DGEventHandlerTo_p_FabricCore__DGCompiledObject, 0, 0},  {&_swigt__p_FabricCore__DGEvent, _p_FabricCore__DGEventTo_p_FabricCore__DGCompiledObject, 0, 0},  {&_swigt__p_FabricCore__DGContainer, _p_FabricCore__DGContainerTo_p_FabricCore__DGCompiledObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__DGContainer[] = {  {&_swigt__p_FabricCore__DGNode, _p_FabricCore__DGNodeTo_p_FabricCore__DGContainer, 0, 0},  {&_swigt__p_FabricCore__DGOperator, _p_FabricCore__DGOperatorTo_p_FabricCore__DGContainer, 0, 0},  {&_swigt__p_FabricCore__DGEventHandler, _p_FabricCore__DGEventHandlerTo_p_FabricCore__DGContainer, 0, 0},  {&_swigt__p_FabricCore__DGEvent, _p_FabricCore__DGEventTo_p_FabricCore__DGContainer, 0, 0},  {&_swigt__p_FabricCore__DGContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__DGEvent[] = {  {&_swigt__p_FabricCore__DGEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__DGEventHandler[] = {  {&_swigt__p_FabricCore__DGEventHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__DGNamedObject[] = {  {&_swigt__p_FabricCore__DGNode, _p_FabricCore__DGNodeTo_p_FabricCore__DGNamedObject, 0, 0},  {&_swigt__p_FabricCore__DGNamedObject, 0, 0, 0},  {&_swigt__p_FabricCore__DGOperator, _p_FabricCore__DGOperatorTo_p_FabricCore__DGNamedObject, 0, 0},  {&_swigt__p_FabricCore__DGEventHandler, _p_FabricCore__DGEventHandlerTo_p_FabricCore__DGNamedObject, 0, 0},  {&_swigt__p_FabricCore__DGEvent, _p_FabricCore__DGEventTo_p_FabricCore__DGNamedObject, 0, 0},  {&_swigt__p_FabricCore__DGContainer, _p_FabricCore__DGContainerTo_p_FabricCore__DGNamedObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__DGNode[] = {  {&_swigt__p_FabricCore__DGNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__DGOperator[] = {  {&_swigt__p_FabricCore__DGOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__Exception[] = {  {&_swigt__p_FabricCore__Exception, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__KLTokenStream[] = {  {&_swigt__p_FabricCore__KLTokenStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__RTVal[] = {  {&_swigt__p_FabricCore__RTVal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__RTValFromJSONDecoder[] = {  {&_swigt__p_FabricCore__RTValFromJSONDecoder, 0, 0, 0},  {&_swigt__p_PythonRTValFromJSONDecoder, _p_PythonRTValFromJSONDecoderTo_p_FabricCore__RTValFromJSONDecoder, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__RTValToJSONEncoder[] = {  {&_swigt__p_FabricCore__RTValToJSONEncoder, 0, 0, 0},  {&_swigt__p_PythonRTValToJSONEncoder, _p_PythonRTValToJSONEncoderTo_p_FabricCore__RTValToJSONEncoder, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__Ref[] = {  {&_swigt__p_FabricCore__Client, _p_FabricCore__ClientTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__DFGHost, _p_FabricCore__DFGHostTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__DGNamedObject, _p_FabricCore__DGNamedObjectTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__DGCompiledObject, _p_FabricCore__DGCompiledObjectTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__DFGBinding, _p_FabricCore__DFGBindingTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__DGBinding, _p_FabricCore__DGBindingTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__Context, _p_FabricCore__ContextTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__DFGExec, _p_FabricCore__DFGExecTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__String, _p_FabricCore__StringTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__Ref, 0, 0, 0},  {&_swigt__p_FabricCore__KLTokenStream, _p_FabricCore__KLTokenStreamTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__DGEventHandler, _p_FabricCore__DGEventHandlerTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__DGNode, _p_FabricCore__DGNodeTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__DGContainer, _p_FabricCore__DGContainerTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__RTVal, _p_FabricCore__RTValTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__DGBindingList, _p_FabricCore__DGBindingListTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__DGEvent, _p_FabricCore__DGEventTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__DFGView, _p_FabricCore__DFGViewTo_p_FabricCore__Ref, 0, 0},  {&_swigt__p_FabricCore__DGOperator, _p_FabricCore__DGOperatorTo_p_FabricCore__Ref, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__String[] = {  {&_swigt__p_FabricCore__String, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FabricCore__Variant[] = {  {&_swigt__p_FabricCore__Variant, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PythonRTValFromJSONDecoder[] = {  {&_swigt__p_PythonRTValFromJSONDecoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PythonRTValToJSONEncoder[] = {  {&_swigt__p_PythonRTValToJSONEncoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ReportCallback[] = {  {&_swigt__p_ReportCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleData[] = {  {&_swigt__p_SimpleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SlowOperationCallback[] = {  {&_swigt__p_SlowOperationCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StatusCallback[] = {  {&_swigt__p_StatusCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p___int64[] = {  {&_swigt__p___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_q_const__char_unsigned_int__void[] = {  {&_swigt__p_f_p_void_p_q_const__char_unsigned_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_q_const__char_unsigned_int_p_q_const__char_unsigned_int__void[] = {  {&_swigt__p_f_p_void_p_q_const__char_unsigned_int_p_q_const__char_unsigned_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_void_p_void_unsigned_char_p_f_p_void_p_q_const__char_unsigned_int__void_p_void_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char[] = {  {&_swigt__p_f_p_void_p_void_p_void_unsigned_char_p_f_p_void_p_q_const__char_unsigned_int__void_p_void_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_void_p_void_unsigned_char_p_q_const__char_unsigned_int_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char[] = {  {&_swigt__p_f_p_void_p_void_p_void_unsigned_char_p_q_const__char_unsigned_int_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_unsigned_char_unsigned_char_p_q_const__char_unsigned_int__void[] = {  {&_swigt__p_f_p_void_unsigned_char_unsigned_char_p_q_const__char_unsigned_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_p_void_p_q_const__char_unsigned_int__void[] = {  {&_swigt__p_p_f_p_void_p_q_const__char_unsigned_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_long[] = {  {&_swigt__p_p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed___int64[] = {  {&_swigt__p_signed___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned___int64[] = {  {&_swigt__p_unsigned___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FEC_ClientCreateOptions,
  _swigc__p_FEC_DFGCacheRule,
  _swigc__p_FEC_DFGExecType,
  _swigc__p_FEC_DFGNodeType,
  _swigc__p_FEC_DFGPortType,
  _swigc__p_FEC_KLSourceFile,
  _swigc__p_FEC_KLTokenType,
  _swigc__p_FEC_RTValSimpleData,
  _swigc__p_FEC_RTValSimpleData_value,
  _swigc__p_FEC_RTValSimpleData_value_string,
  _swigc__p_FEC_RTValSimpleType,
  _swigc__p_FEC_Variant,
  _swigc__p_FEC_VariantDictIter,
  _swigc__p_FabricCore__Client,
  _swigc__p_FabricCore__Context,
  _swigc__p_FabricCore__DFGBinding,
  _swigc__p_FabricCore__DFGExec,
  _swigc__p_FabricCore__DFGHost,
  _swigc__p_FabricCore__DFGView,
  _swigc__p_FabricCore__DGBinding,
  _swigc__p_FabricCore__DGBindingList,
  _swigc__p_FabricCore__DGCompiledObject,
  _swigc__p_FabricCore__DGContainer,
  _swigc__p_FabricCore__DGEvent,
  _swigc__p_FabricCore__DGEventHandler,
  _swigc__p_FabricCore__DGNamedObject,
  _swigc__p_FabricCore__DGNode,
  _swigc__p_FabricCore__DGOperator,
  _swigc__p_FabricCore__Exception,
  _swigc__p_FabricCore__KLTokenStream,
  _swigc__p_FabricCore__RTVal,
  _swigc__p_FabricCore__RTValFromJSONDecoder,
  _swigc__p_FabricCore__RTValToJSONEncoder,
  _swigc__p_FabricCore__Ref,
  _swigc__p_FabricCore__String,
  _swigc__p_FabricCore__Variant,
  _swigc__p_PythonRTValFromJSONDecoder,
  _swigc__p_PythonRTValToJSONEncoder,
  _swigc__p_ReportCallback,
  _swigc__p_SimpleData,
  _swigc__p_SlowOperationCallback,
  _swigc__p_StatusCallback,
  _swigc__p___int64,
  _swigc__p_char,
  _swigc__p_f_p_void_p_q_const__char_unsigned_int__void,
  _swigc__p_f_p_void_p_q_const__char_unsigned_int_p_q_const__char_unsigned_int__void,
  _swigc__p_f_p_void_p_void_p_void_unsigned_char_p_f_p_void_p_q_const__char_unsigned_int__void_p_void_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char,
  _swigc__p_f_p_void_p_void_p_void_unsigned_char_p_q_const__char_unsigned_int_p_f_p_void_p_q_const__char__p_q_const__char_p_void__unsigned_char,
  _swigc__p_f_p_void_unsigned_char_unsigned_char_p_q_const__char_unsigned_int__void,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_p_char,
  _swigc__p_p_f_p_void_p_q_const__char_unsigned_int__void,
  _swigc__p_p_unsigned_long,
  _swigc__p_p_void,
  _swigc__p_short,
  _swigc__p_signed___int64,
  _swigc__p_signed_char,
  _swigc__p_unsigned___int64,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
#endif
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
      varlink_type.ob_type = &PyType_Type;
#endif
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          size_t shift = (ci->ptype) - types;
          swig_type_info *ty = types_initial[shift];
          size_t ldoc = (c - methods[i].ml_doc);
          size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
          char *ndoc = (char*)malloc(ldoc + lptr + 10);
          if (ndoc) {
            char *buff = ndoc;
            void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
            if (ptr) {
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d;  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
  SWIG_Python_SetConstant(d, "FEC_LockType_Shared",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "FEC_LockType_Exclusive",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FEC_VARIANT_SIZE",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, "FEC_VARIANT_DICT_ITER_SIZE",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "FEC_VT_NULL",SWIG_From_int(static_cast< int >((0x00000000))));
  SWIG_Python_SetConstant(d, "FEC_VT_BOOLEAN",SWIG_From_int(static_cast< int >((0x00001000))));
  SWIG_Python_SetConstant(d, "FEC_VT_UINT8",SWIG_From_int(static_cast< int >((0x00000010))));
  SWIG_Python_SetConstant(d, "FEC_VT_SINT8",SWIG_From_int(static_cast< int >((0x00000100))));
  SWIG_Python_SetConstant(d, "FEC_VT_UINT16",SWIG_From_int(static_cast< int >((0x00000020))));
  SWIG_Python_SetConstant(d, "FEC_VT_SINT16",SWIG_From_int(static_cast< int >((0x00000200))));
  SWIG_Python_SetConstant(d, "FEC_VT_UINT32",SWIG_From_int(static_cast< int >((0x00000040))));
  SWIG_Python_SetConstant(d, "FEC_VT_SINT32",SWIG_From_int(static_cast< int >((0x00000400))));
  SWIG_Python_SetConstant(d, "FEC_VT_UINT64",SWIG_From_int(static_cast< int >((0x00000080))));
  SWIG_Python_SetConstant(d, "FEC_VT_SINT64",SWIG_From_int(static_cast< int >((0x00000800))));
  SWIG_Python_SetConstant(d, "FEC_VT_FLOAT32",SWIG_From_int(static_cast< int >((0x00000002))));
  SWIG_Python_SetConstant(d, "FEC_VT_FLOAT64",SWIG_From_int(static_cast< int >((0x00000004))));
  SWIG_Python_SetConstant(d, "FEC_VT_STRING",SWIG_From_int(static_cast< int >((0x00002000))));
  SWIG_Python_SetConstant(d, "FEC_VT_ARRAY",SWIG_From_int(static_cast< int >((0x01000000))));
  SWIG_Python_SetConstant(d, "FEC_VT_DICT",SWIG_From_int(static_cast< int >((0x02000000))));
  PyDict_SetItemString(d,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"FEC_ReportSource_NONE",Swig_var_FEC_ReportSource_NONE_get, Swig_var_FEC_ReportSource_NONE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FEC_ReportSource_System",Swig_var_FEC_ReportSource_System_get, Swig_var_FEC_ReportSource_System_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FEC_ReportSource_User",Swig_var_FEC_ReportSource_User_get, Swig_var_FEC_ReportSource_User_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FEC_ReportSource_ALL",Swig_var_FEC_ReportSource_ALL_get, Swig_var_FEC_ReportSource_ALL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FEC_ReportLevel_Error",Swig_var_FEC_ReportLevel_Error_get, Swig_var_FEC_ReportLevel_Error_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FEC_ReportLevel_Warning",Swig_var_FEC_ReportLevel_Warning_get, Swig_var_FEC_ReportLevel_Warning_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FEC_ReportLevel_Info",Swig_var_FEC_ReportLevel_Info_get, Swig_var_FEC_ReportLevel_Info_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FEC_ReportLevel_Debug",Swig_var_FEC_ReportLevel_Debug_get, Swig_var_FEC_ReportLevel_Debug_set);
  SWIG_Python_SetConstant(d, "FEC_ClientOptimizationType_Background",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "FEC_ClientOptimizationType_Synchronous",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FEC_ClientOptimizationType_None",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "FEC_ClientLicenseType_Compute",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "FEC_ClientLicenseType_Interactive",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FEC_ClientLicenseType_Developer",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "FEC_RTValCodecResult_Reject",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "FEC_RTValCodecResult_Accept_Pending",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FEC_RTValCodecResult_Accept_Complete",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "FEC_RTValCodecResult_BindingArgument",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "FEC_RTValCodecResult_DefaultValue",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FEC_RTVAL_SIMPLE_TYPE_BOOLEAN",SWIG_From_int(static_cast< int >(FEC_RTVAL_SIMPLE_TYPE_BOOLEAN)));
  SWIG_Python_SetConstant(d, "FEC_RTVAL_SIMPLE_TYPE_UINT8",SWIG_From_int(static_cast< int >(FEC_RTVAL_SIMPLE_TYPE_UINT8)));
  SWIG_Python_SetConstant(d, "FEC_RTVAL_SIMPLE_TYPE_UINT16",SWIG_From_int(static_cast< int >(FEC_RTVAL_SIMPLE_TYPE_UINT16)));
  SWIG_Python_SetConstant(d, "FEC_RTVAL_SIMPLE_TYPE_UINT32",SWIG_From_int(static_cast< int >(FEC_RTVAL_SIMPLE_TYPE_UINT32)));
  SWIG_Python_SetConstant(d, "FEC_RTVAL_SIMPLE_TYPE_UINT64",SWIG_From_int(static_cast< int >(FEC_RTVAL_SIMPLE_TYPE_UINT64)));
  SWIG_Python_SetConstant(d, "FEC_RTVAL_SIMPLE_TYPE_SINT8",SWIG_From_int(static_cast< int >(FEC_RTVAL_SIMPLE_TYPE_SINT8)));
  SWIG_Python_SetConstant(d, "FEC_RTVAL_SIMPLE_TYPE_SINT16",SWIG_From_int(static_cast< int >(FEC_RTVAL_SIMPLE_TYPE_SINT16)));
  SWIG_Python_SetConstant(d, "FEC_RTVAL_SIMPLE_TYPE_SINT32",SWIG_From_int(static_cast< int >(FEC_RTVAL_SIMPLE_TYPE_SINT32)));
  SWIG_Python_SetConstant(d, "FEC_RTVAL_SIMPLE_TYPE_SINT64",SWIG_From_int(static_cast< int >(FEC_RTVAL_SIMPLE_TYPE_SINT64)));
  SWIG_Python_SetConstant(d, "FEC_RTVAL_SIMPLE_TYPE_FLOAT32",SWIG_From_int(static_cast< int >(FEC_RTVAL_SIMPLE_TYPE_FLOAT32)));
  SWIG_Python_SetConstant(d, "FEC_RTVAL_SIMPLE_TYPE_FLOAT64",SWIG_From_int(static_cast< int >(FEC_RTVAL_SIMPLE_TYPE_FLOAT64)));
  SWIG_Python_SetConstant(d, "FEC_RTVAL_SIMPLE_TYPE_STRING",SWIG_From_int(static_cast< int >(FEC_RTVAL_SIMPLE_TYPE_STRING)));
  SWIG_Python_SetConstant(d, "FEC_DFGPortType_In",SWIG_From_int(static_cast< int >(FEC_DFGPortType_In)));
  SWIG_Python_SetConstant(d, "FEC_DFGPortType_IO",SWIG_From_int(static_cast< int >(FEC_DFGPortType_IO)));
  SWIG_Python_SetConstant(d, "FEC_DFGPortType_Out",SWIG_From_int(static_cast< int >(FEC_DFGPortType_Out)));
  SWIG_Python_SetConstant(d, "FEC_DFGExecType_Graph",SWIG_From_int(static_cast< int >(FEC_DFGExecType_Graph)));
  SWIG_Python_SetConstant(d, "FEC_DFGExecType_Func",SWIG_From_int(static_cast< int >(FEC_DFGExecType_Func)));
  SWIG_Python_SetConstant(d, "FEC_DFGNodeType_Inst",SWIG_From_int(static_cast< int >(FEC_DFGNodeType_Inst)));
  SWIG_Python_SetConstant(d, "FEC_DFGNodeType_Get",SWIG_From_int(static_cast< int >(FEC_DFGNodeType_Get)));
  SWIG_Python_SetConstant(d, "FEC_DFGNodeType_Set",SWIG_From_int(static_cast< int >(FEC_DFGNodeType_Set)));
  SWIG_Python_SetConstant(d, "FEC_DFGNodeType_Var",SWIG_From_int(static_cast< int >(FEC_DFGNodeType_Var)));
  SWIG_Python_SetConstant(d, "FEC_DFGNodeType_User",SWIG_From_int(static_cast< int >(FEC_DFGNodeType_User)));
  SWIG_Python_SetConstant(d, "FEC_DFGCacheRule_Unspecified",SWIG_From_int(static_cast< int >(FEC_DFGCacheRule_Unspecified)));
  SWIG_Python_SetConstant(d, "FEC_DFGCacheRule_Never",SWIG_From_int(static_cast< int >(FEC_DFGCacheRule_Never)));
  SWIG_Python_SetConstant(d, "FEC_DFGCacheRule_Always",SWIG_From_int(static_cast< int >(FEC_DFGCacheRule_Always)));
  SWIG_Python_SetConstant(d, "FEC_KLTokenType_Comment",SWIG_From_int(static_cast< int >(FEC_KLTokenType_Comment)));
  SWIG_Python_SetConstant(d, "FEC_KLTokenType_String",SWIG_From_int(static_cast< int >(FEC_KLTokenType_String)));
  SWIG_Python_SetConstant(d, "FEC_KLTokenType_Number",SWIG_From_int(static_cast< int >(FEC_KLTokenType_Number)));
  SWIG_Python_SetConstant(d, "FEC_KLTokenType_Keyword",SWIG_From_int(static_cast< int >(FEC_KLTokenType_Keyword)));
  SWIG_Python_SetConstant(d, "FEC_KLTokenType_Other",SWIG_From_int(static_cast< int >(FEC_KLTokenType_Other)));
  SWIG_Python_SetConstant(d, "FEC_KLTokenType_Error",SWIG_From_int(static_cast< int >(FEC_KLTokenType_Error)));
  SWIG_Python_SetConstant(d, "FEC_KLTokenType_EOF",SWIG_From_int(static_cast< int >(FEC_KLTokenType_EOF)));
  SWIG_addvarlink(SWIG_globals(),(char*)"LockType_Shared",Swig_var_LockType_Shared_get, Swig_var_LockType_Shared_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LockType_Exclusive",Swig_var_LockType_Exclusive_get, Swig_var_LockType_Exclusive_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DFGPortType_In",Swig_var_DFGPortType_In_get, Swig_var_DFGPortType_In_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DFGPortType_IO",Swig_var_DFGPortType_IO_get, Swig_var_DFGPortType_IO_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DFGPortType_Out",Swig_var_DFGPortType_Out_get, Swig_var_DFGPortType_Out_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DFGExecType_Graph",Swig_var_DFGExecType_Graph_get, Swig_var_DFGExecType_Graph_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DFGExecType_Func",Swig_var_DFGExecType_Func_get, Swig_var_DFGExecType_Func_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DFGNodeType_Inst",Swig_var_DFGNodeType_Inst_get, Swig_var_DFGNodeType_Inst_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DFGNodeType_Get",Swig_var_DFGNodeType_Get_get, Swig_var_DFGNodeType_Get_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DFGNodeType_Set",Swig_var_DFGNodeType_Set_get, Swig_var_DFGNodeType_Set_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DFGNodeType_Var",Swig_var_DFGNodeType_Var_get, Swig_var_DFGNodeType_Var_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DFGNodeType_User",Swig_var_DFGNodeType_User_get, Swig_var_DFGNodeType_User_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClientOptimizationType_Background",Swig_var_ClientOptimizationType_Background_get, Swig_var_ClientOptimizationType_Background_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClientOptimizationType_Synchronous",Swig_var_ClientOptimizationType_Synchronous_get, Swig_var_ClientOptimizationType_Synchronous_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClientOptimizationType_None",Swig_var_ClientOptimizationType_None_get, Swig_var_ClientOptimizationType_None_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClientLicenseType_Compute",Swig_var_ClientLicenseType_Compute_get, Swig_var_ClientLicenseType_Compute_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClientLicenseType_Interactive",Swig_var_ClientLicenseType_Interactive_get, Swig_var_ClientLicenseType_Interactive_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClientLicenseType_Developer",Swig_var_ClientLicenseType_Developer_get, Swig_var_ClientLicenseType_Developer_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RTValCodecResult_Reject",Swig_var_RTValCodecResult_Reject_get, Swig_var_RTValCodecResult_Reject_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RTValCodecResult_Accept_Pending",Swig_var_RTValCodecResult_Accept_Pending_get, Swig_var_RTValCodecResult_Accept_Pending_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RTValCodecResult_Accept_Complete",Swig_var_RTValCodecResult_Accept_Complete_get, Swig_var_RTValCodecResult_Accept_Complete_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RTValCodecContext_BindingArgument",Swig_var_RTValCodecContext_BindingArgument_get, Swig_var_RTValCodecContext_BindingArgument_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RTValCodecContext_DefaultValue",Swig_var_RTValCodecContext_DefaultValue_get, Swig_var_RTValCodecContext_DefaultValue_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ReportSource_NONE",Swig_var_ReportSource_NONE_get, Swig_var_ReportSource_NONE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ReportSource_System",Swig_var_ReportSource_System_get, Swig_var_ReportSource_System_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ReportSource_User",Swig_var_ReportSource_User_get, Swig_var_ReportSource_User_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ReportSource_ALL",Swig_var_ReportSource_ALL_get, Swig_var_ReportSource_ALL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ReportLevel_Error",Swig_var_ReportLevel_Error_get, Swig_var_ReportLevel_Error_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ReportLevel_Warning",Swig_var_ReportLevel_Warning_get, Swig_var_ReportLevel_Warning_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ReportLevel_Info",Swig_var_ReportLevel_Info_get, Swig_var_ReportLevel_Info_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ReportLevel_Debug",Swig_var_ReportLevel_Debug_get, Swig_var_ReportLevel_Debug_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

